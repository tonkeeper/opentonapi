{
 "components": {
  "parameters": {
   "accountIdParameter": {
    "description": "account ID",
    "in": "path",
    "name": "account_id",
    "required": true,
    "schema": {
     "example": "0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
     "type": "string"
    }
   },
   "accountIdParameters": {
    "description": "account ID",
    "explode": false,
    "in": "path",
    "name": "account_ids",
    "required": true,
    "schema": {
     "items": {
      "example": "0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
      "type": "string"
     },
     "type": "array"
    }
   },
   "accountIdQuery": {
    "description": "account ID",
    "explode": false,
    "in": "query",
    "name": "account_id",
    "required": false,
    "schema": {
     "example": "0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
     "type": "string"
    }
   },
   "blockIdExtParameter": {
    "description": "block ID: (workchain,shard,seqno,root_hash,file_hash)",
    "in": "path",
    "name": "block_id",
    "required": true,
    "schema": {
     "example": "(-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29)",
     "type": "string"
    }
   },
   "blockIdParameter": {
    "description": "block ID",
    "in": "path",
    "name": "block_id",
    "required": true,
    "schema": {
     "example": "(-1,8000000000000000,4234234)",
     "type": "string"
    }
   },
   "collectionQuery": {
    "description": "nft collection",
    "in": "query",
    "name": "collection",
    "required": false,
    "schema": {
     "example": "0:06d811f426598591b32b2c49f29f66c821368e4acb1de16762b04e0174532465",
     "type": "string"
    }
   },
   "countQuery": {
    "description": "count",
    "in": "query",
    "name": "count",
    "required": true,
    "schema": {
     "example": 100,
     "format": "uint32",
     "type": "integer"
    }
   },
   "domainFilterParameter": {
    "description": "domain filter for current auctions \"ton\" or \"t.me\"",
    "in": "query",
    "name": "tld",
    "required": false,
    "schema": {
     "example": "ton",
     "type": "string"
    }
   },
   "domainNameParameter": {
    "description": "domain name with .ton or .t.me",
    "in": "path",
    "name": "domain_name",
    "required": true,
    "schema": {
     "example": "wallet.ton",
     "type": "string"
    }
   },
   "eventIdParameter": {
    "description": "event ID or transaction hash in hex (without 0x) or base64url format",
    "in": "path",
    "name": "event_id",
    "required": true,
    "schema": {
     "example": "97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
     "type": "string"
    }
   },
   "exactQuery": {
    "description": "exact",
    "in": "query",
    "name": "exact",
    "required": true,
    "schema": {
     "example": false,
     "type": "boolean"
    }
   },
   "hashQuery": {
    "description": "hash",
    "in": "query",
    "name": "hash",
    "required": true,
    "schema": {
     "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
     "type": "string"
    }
   },
   "i18n": {
    "in": "header",
    "name": "Accept-Language",
    "required": false,
    "schema": {
     "default": "en",
     "example": "ru-RU,ru;q=0.5",
     "type": "string"
    }
   },
   "jettonIdParameter": {
    "description": "jetton ID",
    "in": "path",
    "name": "jetton_id",
    "required": true,
    "schema": {
     "example": "0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
     "type": "string"
    }
   },
   "knownBlockIdExtQuery": {
    "description": "known block: (workchain,shard,seqno,root_hash,file_hash)",
    "in": "query",
    "name": "known_block",
    "required": true,
    "schema": {
     "example": "(-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29)",
     "type": "string"
    }
   },
   "limit": {
    "in": "query",
    "name": "limit",
    "required": false,
    "schema": {
     "default": 1000,
     "maximum": 1000,
     "type": "integer"
    }
   },
   "ltMustQuery": {
    "description": "lt",
    "in": "query",
    "name": "lt",
    "required": true,
    "schema": {
     "example": 23814011000000,
     "format": "uint64",
     "type": "integer"
    }
   },
   "ltQuery": {
    "description": "lt",
    "in": "query",
    "name": "lt",
    "schema": {
     "example": 23814011000000,
     "format": "uint64",
     "type": "integer"
    }
   },
   "messageIdParameter": {
    "description": "message ID",
    "in": "path",
    "name": "msg_id",
    "required": true,
    "schema": {
     "example": "97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
     "type": "string"
    }
   },
   "methodNameParameter": {
    "description": "contract get method name",
    "in": "path",
    "name": "method_name",
    "required": true,
    "schema": {
     "example": "get_wallet_address",
     "type": "string"
    }
   },
   "modeQuery": {
    "description": "mode",
    "in": "query",
    "name": "mode",
    "required": true,
    "schema": {
     "example": 0,
     "format": "uint32",
     "type": "integer"
    }
   },
   "offset": {
    "in": "query",
    "name": "offset",
    "required": false,
    "schema": {
     "default": 0,
     "type": "integer"
    }
   },
   "periodQuery": {
    "description": "number of days before expiration",
    "in": "query",
    "name": "period",
    "required": false,
    "schema": {
     "maximum": 3660,
     "minimum": 1,
     "type": "integer"
    }
   },
   "publicKeyParameter": {
    "in": "path",
    "name": "public_key",
    "required": true,
    "schema": {
     "example": "NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODQ3...",
     "type": "string"
    }
   },
   "shardQuery": {
    "description": "shard",
    "in": "query",
    "name": "shard",
    "required": true,
    "schema": {
     "example": 1,
     "format": "uint64",
     "type": "integer"
    }
   },
   "targetBlockIdExtQuery": {
    "description": "target block: (workchain,shard,seqno,root_hash,file_hash)",
    "in": "query",
    "name": "target_block",
    "required": false,
    "schema": {
     "example": "(-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29)",
     "type": "string"
    }
   },
   "traceIdParameter": {
    "description": "trace ID or transaction hash in hex (without 0x) or base64url format",
    "in": "path",
    "name": "trace_id",
    "required": true,
    "schema": {
     "example": "97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
     "type": "string"
    }
   },
   "transactionIdParameter": {
    "description": "transaction ID",
    "in": "path",
    "name": "transaction_id",
    "required": true,
    "schema": {
     "example": "97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
     "type": "string"
    }
   },
   "workchainQuery": {
    "description": "workchain",
    "in": "query",
    "name": "workchain",
    "required": true,
    "schema": {
     "example": 1,
     "format": "uint32",
     "type": "integer"
    }
   }
  },
  "requestBodies": {
   "AccountIds": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "account_ids": {
         "items": {
          "example": "0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
          "type": "string"
         },
         "type": "array"
        }
       },
       "required": [
        "account_ids"
       ],
       "type": "object"
      }
     }
    },
    "description": "a list of account ids"
   },
   "Backup": {
    "content": {
     "application/octet-stream": {
      "schema": {
       "format": "binary",
       "type": "string"
      }
     }
    },
    "description": "Information for saving backup",
    "required": true
   },
   "Boc": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "boc": {
         "example": "te6ccgECBQEAARUAAkWIAWTtae+KgtbrX26Bep8JSq8lFLfGOoyGR/xwdjfvpvEaHg",
         "type": "string"
        }
       },
       "required": [
        "boc"
       ],
       "type": "object"
      }
     }
    },
    "description": "bag-of-cells serialized to base64",
    "required": true
   },
   "LiteServerSendMessageRequest": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "body": {
         "type": "string"
        }
       },
       "required": [
        "body"
       ],
       "type": "object"
      }
     }
    },
    "description": "Data that is expected",
    "required": true
   },
   "MethodParameters": {
    "content": {
     "application/json": {
      "schema": {
       "type": "object"
      }
     }
    },
    "description": "input parameters for contract get method"
   },
   "TonConnectProof": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "address": {
         "example": "0:97146a46acc2654y27947f14c4a4b14273e954f78bc017790b41208b0043200b",
         "type": "string"
        },
        "proof": {
         "properties": {
          "domain": {
           "properties": {
            "length_bytes": {
             "format": "uint32",
             "type": "integer"
            },
            "value": {
             "type": "string"
            }
           },
           "required": [
            "value"
           ],
           "type": "object"
          },
          "payload": {
           "example": "84jHVNLQmZsAAAAAZB0Zryi2wqVJI-KaKNXOvCijEi46YyYzkaSHyJrMPBMOkVZa",
           "type": "string"
          },
          "signature": {
           "type": "string"
          },
          "state_init": {
           "type": "string"
          },
          "timestamp": {
           "example": "1678275313",
           "format": "int64",
           "type": "integer"
          }
         },
         "required": [
          "timestamp",
          "domain",
          "signature",
          "payload"
         ],
         "type": "object"
        }
       },
       "required": [
        "address",
        "proof"
       ],
       "type": "object"
      }
     }
    },
    "description": "Data that is expected from TON Connect",
    "required": true
   },
   "TonConnectStateInit": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "state_init": {
         "type": "string"
        }
       },
       "required": [
        "state_init"
       ],
       "type": "object"
      }
     }
    },
    "description": "Data that is expected",
    "required": true
   }
  },
  "responses": {
   "BadRequest": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "error": {
         "type": "string"
        }
       },
       "required": [
        "error"
       ],
       "type": "object"
      }
     }
    },
    "description": "Something went wrong on client side"
   },
   "InternalError": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "error": {
         "type": "string"
        }
       },
       "required": [
        "error"
       ],
       "type": "object"
      }
     }
    },
    "description": "Something went wrong on server side"
   },
   "NotFound": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "error": {
         "type": "string"
        }
       },
       "required": [
        "error"
       ],
       "type": "object"
      }
     }
    },
    "description": "The specified resource was not found"
   },
   "UnauthorizedError": {
    "content": {
     "application/json": {
      "schema": {
       "properties": {
        "error": {
         "type": "string"
        }
       },
       "required": [
        "error"
       ],
       "type": "object"
      }
     }
    },
    "description": "Access token is missing or invalid"
   }
  },
  "schemas": {
   "AccStatusChange": {
    "enum": [
     "acst_unchanged",
     "acst_frozen",
     "acst_deleted"
    ],
    "example": "acst_unchanged",
    "type": "string"
   },
   "Account": {
    "properties": {
     "address": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     },
     "balance": {
      "example": 123456789,
      "format": "int64",
      "type": "integer"
     },
     "get_methods": {
      "example": [
       "get_item_data"
      ],
      "items": {
       "type": "string"
      },
      "type": "array"
     },
     "icon": {
      "example": "https://ton.org/logo.png",
      "type": "string"
     },
     "interfaces": {
      "items": {
       "example": "nft_sale",
       "type": "string"
      },
      "type": "array"
     },
     "is_scam": {
      "example": true,
      "type": "boolean"
     },
     "last_activity": {
      "description": "unix timestamp",
      "example": 123456789,
      "format": "int64",
      "type": "integer"
     },
     "memo_required": {
      "example": true,
      "type": "boolean"
     },
     "name": {
      "example": "Ton foundation",
      "type": "string"
     },
     "status": {
      "example": "active",
      "type": "string"
     }
    },
    "required": [
     "address",
     "balance",
     "status",
     "last_activity",
     "get_methods"
    ],
    "type": "object"
   },
   "AccountAddress": {
    "properties": {
     "address": {
      "example": "0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365",
      "type": "string"
     },
     "icon": {
      "example": "https://ton.org/logo.png",
      "type": "string"
     },
     "is_scam": {
      "description": "Is this account was marked as part of scammers activity",
      "example": true,
      "type": "boolean"
     },
     "name": {
      "description": "Display name. Data collected from different sources like moderation lists, dns, collections names and over.",
      "example": "Ton foundation",
      "type": "string"
     }
    },
    "required": [
     "address",
     "is_scam"
    ],
    "type": "object"
   },
   "AccountEvent": {
    "description": "An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.",
    "properties": {
     "account": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "actions": {
      "items": {
       "$ref": "#/components/schemas/Action"
      },
      "type": "array"
     },
     "event_id": {
      "example": "e8b0e3fee4a26bd2317ac1f9952fcdc87dc08fdb617656b5202416323337372e",
      "type": "string"
     },
     "extra": {
      "description": "TODO",
      "example": 3,
      "format": "int64",
      "type": "integer"
     },
     "in_progress": {
      "description": "Event is not finished yet. Transactions still happening",
      "example": false,
      "type": "boolean"
     },
     "is_scam": {
      "description": "scam",
      "example": false,
      "type": "boolean"
     },
     "lt": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "timestamp": {
      "example": 1234567890,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "event_id",
     "timestamp",
     "actions",
     "account",
     "is_scam",
     "lt",
     "in_progress",
     "extra"
    ],
    "type": "object"
   },
   "AccountEvents": {
    "properties": {
     "events": {
      "items": {
       "$ref": "#/components/schemas/AccountEvent"
      },
      "type": "array"
     },
     "next_from": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "events",
     "next_from"
    ],
    "type": "object"
   },
   "AccountInfoByStateInit": {
    "properties": {
     "address": {
      "example": "0:97146a46acc2654y27947f14c4a4b14273e954f78bc017790b41208b0043200b",
      "type": "string"
     },
     "public_key": {
      "example": "NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODQ3...",
      "type": "string"
     }
    },
    "required": [
     "public_key",
     "address"
    ],
    "type": "object"
   },
   "AccountStaking": {
    "properties": {
     "pools": {
      "items": {
       "$ref": "#/components/schemas/AccountStakingInfo"
      },
      "type": "array"
     }
    },
    "required": [
     "pools"
    ],
    "type": "object"
   },
   "AccountStakingInfo": {
    "properties": {
     "amount": {
      "example": 10050000000000,
      "format": "int64",
      "type": "integer"
     },
     "pending_deposit": {
      "example": 500000000000,
      "format": "int64",
      "type": "integer"
     },
     "pending_withdraw": {
      "example": 500000000000,
      "format": "int64",
      "type": "integer"
     },
     "pool": {
      "example": "EQBI-wGVp_x0VFEjd7m9cEUD3tJ_bnxMSp0Tb9qz757ATEAM",
      "type": "string"
     },
     "ready_withdraw": {
      "example": 500000000000,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "pool",
     "amount",
     "pending_deposit",
     "pending_withdraw",
     "ready_withdraw"
    ],
    "type": "object"
   },
   "AccountStatus": {
    "enum": [
     "nonexist",
     "uninit",
     "active",
     "frozen"
    ],
    "example": "active",
    "type": "string"
   },
   "AccountStorageInfo": {
    "properties": {
     "due_payment": {
      "example": 567,
      "format": "int64",
      "type": "integer"
     },
     "last_paid": {
      "example": 567,
      "format": "int64",
      "type": "integer"
     },
     "used_bits": {
      "example": 567,
      "format": "int64",
      "type": "integer"
     },
     "used_cells": {
      "example": 567,
      "format": "int64",
      "type": "integer"
     },
     "used_public_cells": {
      "example": 567,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "used_cells",
     "used_bits",
     "used_public_cells",
     "last_paid",
     "due_payment"
    ],
    "type": "object"
   },
   "Accounts": {
    "properties": {
     "accounts": {
      "items": {
       "$ref": "#/components/schemas/Account"
      },
      "type": "array"
     }
    },
    "required": [
     "accounts"
    ],
    "type": "object"
   },
   "Action": {
    "properties": {
     "AuctionBid": {
      "$ref": "#/components/schemas/AuctionBidAction"
     },
     "ContractDeploy": {
      "$ref": "#/components/schemas/ContractDeployAction"
     },
     "DepositStake": {
      "$ref": "#/components/schemas/DepositStakeAction"
     },
     "JettonTransfer": {
      "$ref": "#/components/schemas/JettonTransferAction"
     },
     "NftItemTransfer": {
      "$ref": "#/components/schemas/NftItemTransferAction"
     },
     "NftPurchase": {
      "$ref": "#/components/schemas/NftPurchaseAction"
     },
     "RecoverStake": {
      "$ref": "#/components/schemas/RecoverStakeAction"
     },
     "STONfiSwap": {
      "$ref": "#/components/schemas/STONfiSwapAction"
     },
     "SmartContractExec": {
      "$ref": "#/components/schemas/SmartContractAction"
     },
     "Subscribe": {
      "$ref": "#/components/schemas/SubscriptionAction"
     },
     "TonTransfer": {
      "$ref": "#/components/schemas/TonTransferAction"
     },
     "UnSubscribe": {
      "$ref": "#/components/schemas/UnSubscriptionAction"
     },
     "simple_preview": {
      "$ref": "#/components/schemas/ActionSimplePreview"
     },
     "status": {
      "enum": [
       "ok",
       "failed",
       "pending"
      ],
      "example": "ok",
      "type": "string"
     },
     "type": {
      "enum": [
       "TonTransfer",
       "JettonTransfer",
       "NftItemTransfer",
       "ContractDeploy",
       "Subscribe",
       "UnSubscribe",
       "AuctionBid",
       "NftPurchase",
       "DepositStake",
       "RecoverStake",
       "STONfiSwap",
       "SmartContractExec",
       "Unknown"
      ],
      "example": "TonTransfer",
      "type": "string"
     }
    },
    "required": [
     "type",
     "status",
     "simple_preview"
    ],
    "type": "object"
   },
   "ActionPhase": {
    "properties": {
     "fwd_fees": {
      "example": 1000,
      "format": "int64",
      "type": "integer"
     },
     "skipped_actions": {
      "example": 5,
      "format": "int32",
      "type": "integer"
     },
     "success": {
      "example": true,
      "type": "boolean"
     },
     "total_actions": {
      "example": 5,
      "format": "int32",
      "type": "integer"
     },
     "total_fees": {
      "example": 1000,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "success",
     "total_actions",
     "skipped_actions",
     "fwd_fees",
     "total_fees"
    ],
    "type": "object"
   },
   "ActionSimplePreview": {
    "description": "shortly describes what this action is about.",
    "properties": {
     "accounts": {
      "items": {
       "$ref": "#/components/schemas/AccountAddress"
      },
      "type": "array"
     },
     "action_image": {
      "description": "a link to an image for this particular action.",
      "type": "string"
     },
     "description": {
      "example": "Transferring 5 Ton",
      "type": "string"
     },
     "name": {
      "example": "Ton Transfer",
      "type": "string"
     },
     "value": {
      "example": "5 Ton",
      "type": "string"
     },
     "value_image": {
      "description": "a link to an image that depicts this action's asset.",
      "type": "string"
     }
    },
    "required": [
     "name",
     "description",
     "accounts"
    ],
    "type": "object"
   },
   "ApyHistory": {
    "properties": {
     "apy": {
      "type": "number"
     },
     "time": {
      "type": "integer"
     }
    },
    "required": [
     "apy",
     "time"
    ],
    "type": "object"
   },
   "Auction": {
    "properties": {
     "bids": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     },
     "date": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     },
     "domain": {
      "example": "wallet.ton",
      "type": "string"
     },
     "owner": {
      "example": "owner",
      "type": "string"
     },
     "price": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "domain",
     "owner",
     "price",
     "bids",
     "date"
    ],
    "type": "object"
   },
   "AuctionBidAction": {
    "properties": {
     "amount": {
      "$ref": "#/components/schemas/Price"
     },
     "auction_type": {
      "enum": [
       "DNS.ton",
       "DNS.tg",
       "NUMBER.tg",
       "getgems"
      ],
      "type": "string"
     },
     "beneficiary": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "bidder": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "nft": {
      "$ref": "#/components/schemas/NftItem"
     }
    },
    "required": [
     "amount",
     "beneficiary",
     "bidder",
     "auction_type"
    ],
    "type": "object"
   },
   "Auctions": {
    "properties": {
     "data": {
      "items": {
       "$ref": "#/components/schemas/Auction"
      },
      "type": "array"
     },
     "total": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "data",
     "total"
    ],
    "type": "object"
   },
   "Block": {
    "properties": {
     "after_merge": {
      "example": true,
      "type": "boolean"
     },
     "after_split": {
      "example": true,
      "type": "boolean"
     },
     "before_split": {
      "example": true,
      "type": "boolean"
     },
     "created_by": {
      "example": "A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB",
      "type": "string"
     },
     "end_lt": {
      "example": 23814011000001,
      "format": "int64",
      "type": "integer"
     },
     "file_hash": {
      "example": "A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB",
      "type": "string"
     },
     "gen_catchain_seqno": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "gen_software_capabilities": {
      "example": 0,
      "format": "int64",
      "type": "integer"
     },
     "gen_software_version": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "gen_utime": {
      "example": 1674826775,
      "format": "int64",
      "type": "integer"
     },
     "global_id": {
      "example": -239,
      "format": "int32",
      "type": "integer"
     },
     "in_msg_descr_length": {
      "example": 0,
      "format": "int64",
      "type": "integer"
     },
     "key_block": {
      "example": true,
      "type": "boolean"
     },
     "master_ref": {
      "example": "(-1,4234234,8000000000000000)",
      "type": "string"
     },
     "min_ref_mc_seqno": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "out_msg_descr_length": {
      "example": 0,
      "format": "int64",
      "type": "integer"
     },
     "prev_key_block_seqno": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "prev_refs": {
      "items": {
       "example": [
        "(-1",
        4234235,
        "8000000000000000)"
       ],
       "type": "string"
      },
      "type": "array"
     },
     "rand_seed": {
      "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
      "type": "string"
     },
     "root_hash": {
      "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
      "type": "string"
     },
     "seqno": {
      "example": 21734019,
      "format": "int32",
      "type": "integer"
     },
     "shard": {
      "example": 8000000000000000,
      "type": "string"
     },
     "start_lt": {
      "example": 23814011000000,
      "format": "int64",
      "type": "integer"
     },
     "version": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "vert_seqno": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "want_merge": {
      "example": true,
      "type": "boolean"
     },
     "want_split": {
      "example": true,
      "type": "boolean"
     },
     "workchain_id": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     }
    },
    "required": [
     "workchain_id",
     "shard",
     "seqno",
     "root_hash",
     "file_hash",
     "global_id",
     "version",
     "after_merge",
     "before_split",
     "after_split",
     "want_split",
     "want_merge",
     "key_block",
     "gen_utime",
     "start_lt",
     "end_lt",
     "vert_seqno",
     "gen_catchain_seqno",
     "min_ref_mc_seqno",
     "prev_key_block_seqno",
     "prev_refs",
     "in_msg_descr_length",
     "out_msg_descr_length",
     "rand_seed",
     "created_by"
    ],
    "type": "object"
   },
   "BlockRaw": {
    "properties": {
     "file_hash": {
      "example": "A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB",
      "type": "string"
     },
     "root_hash": {
      "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
      "type": "string"
     },
     "seqno": {
      "example": 30699640,
      "format": "uint32",
      "type": "integer"
     },
     "shard": {
      "example": 9223372036854775808,
      "format": "uint64",
      "type": "integer"
     },
     "workchain": {
      "example": 4294967295,
      "format": "uint32",
      "type": "integer"
     }
    },
    "required": [
     "workchain",
     "shard",
     "seqno",
     "root_hash",
     "file_hash"
    ],
    "type": "object"
   },
   "BouncePhaseType": {
    "enum": [
     "TrPhaseBounceNegfunds",
     "TrPhaseBounceNofunds",
     "TrPhaseBounceOk"
    ],
    "example": "cskip_no_state",
    "type": "string"
   },
   "ComputePhase": {
    "properties": {
     "exit_code": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "gas_fees": {
      "example": 1000,
      "format": "int64",
      "type": "integer"
     },
     "gas_used": {
      "example": 10000,
      "format": "int64",
      "type": "integer"
     },
     "skip_reason": {
      "$ref": "#/components/schemas/ComputeSkipReason"
     },
     "skipped": {
      "example": true,
      "type": "boolean"
     },
     "success": {
      "example": true,
      "type": "boolean"
     },
     "vm_steps": {
      "example": 5,
      "format": "uint32",
      "type": "integer"
     }
    },
    "required": [
     "skipped"
    ],
    "type": "object"
   },
   "ComputeSkipReason": {
    "enum": [
     "cskip_no_state",
     "cskip_bad_state",
     "cskip_no_gas"
    ],
    "example": "cskip_no_state",
    "type": "string"
   },
   "Config": {
    "properties": {
     "0": {
      "description": "config address",
      "type": "string"
     },
     "1": {
      "description": "elector address",
      "type": "string"
     },
     "2": {
      "description": "minter address",
      "type": "string"
     },
     "32": {
      "$ref": "#/components/schemas/ValidatorsSet"
     },
     "33": {
      "$ref": "#/components/schemas/ValidatorsSet"
     },
     "34": {
      "$ref": "#/components/schemas/ValidatorsSet"
     },
     "35": {
      "$ref": "#/components/schemas/ValidatorsSet"
     },
     "36": {
      "$ref": "#/components/schemas/ValidatorsSet"
     },
     "37": {
      "$ref": "#/components/schemas/ValidatorsSet"
     },
     "4": {
      "description": "dns root address",
      "type": "string"
     },
     "raw": {
      "description": "config boc in base64 format",
      "example": "te6ccgEBBgEARAABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQAE8jAAONBsIdMfMO1E0NM/MAHAAZekyMs/ye1UkzDyBuIAEaE0MdqJoaZ+YQ==",
      "type": "string"
     }
    },
    "required": [
     "raw",
     "0",
     "1",
     "2",
     "4"
    ],
    "type": "object"
   },
   "ContractDeployAction": {
    "properties": {
     "address": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     },
     "interfaces": {
      "example": [
       "nft_item",
       "nft_royalty"
      ],
      "items": {
       "type": "string"
      },
      "type": "array"
     }
    },
    "required": [
     "address",
     "interfaces"
    ],
    "type": "object"
   },
   "CreditPhase": {
    "properties": {
     "credit": {
      "example": 1000,
      "format": "int64",
      "type": "integer"
     },
     "fees_collected": {
      "example": 100,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "fees_collected",
     "credit"
    ],
    "type": "object"
   },
   "DepositStakeAction": {
    "properties": {
     "amount": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     },
     "staker": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "amount",
     "staker"
    ],
    "type": "object"
   },
   "DnsExpiring": {
    "properties": {
     "items": {
      "items": {
       "properties": {
        "dns_item": {
         "$ref": "#/components/schemas/NftItem"
        },
        "expiring_at": {
         "example": "1678275313",
         "format": "int64",
         "type": "integer"
        },
        "name": {
         "example": "blah_blah.ton",
         "type": "string"
        }
       },
       "required": [
        "expiring_at",
        "name"
       ],
       "type": "object"
      },
      "type": "array"
     }
    },
    "required": [
     "items"
    ],
    "type": "object"
   },
   "DnsRecord": {
    "properties": {
     "next_resolver": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     },
     "sites": {
      "items": {
       "example": "http://12234.ton",
       "type": "string"
      },
      "type": "array"
     },
     "storage": {
      "description": "tonstorage bag id",
      "example": "da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     },
     "wallet": {
      "$ref": "#/components/schemas/WalletDNS"
     }
    },
    "required": [
     "sites"
    ],
    "type": "object"
   },
   "DomainBid": {
    "properties": {
     "bidder": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "success": {
      "default": false,
      "example": true,
      "type": "boolean"
     },
     "txHash": {
      "example": "55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122",
      "type": "string"
     },
     "txTime": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     },
     "value": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "success",
     "value",
     "txTime",
     "bidder",
     "txHash"
    ],
    "type": "object"
   },
   "DomainBids": {
    "properties": {
     "data": {
      "items": {
       "$ref": "#/components/schemas/DomainBid"
      },
      "type": "array"
     }
    },
    "required": [
     "data"
    ],
    "type": "object"
   },
   "DomainInfo": {
    "properties": {
     "expiring_at": {
      "description": "date of expiring. optional. not all domain in ton has expiration date",
      "type": "integer"
     },
     "item": {
      "$ref": "#/components/schemas/NftItem"
     },
     "name": {
      "type": "string"
     }
    },
    "required": [
     "name"
    ],
    "type": "object"
   },
   "DomainNames": {
    "properties": {
     "domains": {
      "items": {
       "example": "vasya.ton",
       "type": "string"
      },
      "type": "array"
     }
    },
    "required": [
     "domains"
    ],
    "type": "object"
   },
   "Error": {
    "properties": {
     "error": {
      "example": "error description",
      "type": "string"
     }
    },
    "required": [
     "error"
    ],
    "type": "object"
   },
   "Event": {
    "properties": {
     "actions": {
      "items": {
       "$ref": "#/components/schemas/Action"
      },
      "type": "array"
     },
     "event_id": {
      "example": "e8b0e3fee4a26bd2317ac1f9952fcdc87dc08fdb617656b5202416323337372e",
      "type": "string"
     },
     "in_progress": {
      "description": "Event is not finished yet. Transactions still happening",
      "example": false,
      "type": "boolean"
     },
     "is_scam": {
      "description": "scam",
      "example": false,
      "type": "boolean"
     },
     "lt": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "timestamp": {
      "example": 1234567890,
      "format": "int64",
      "type": "integer"
     },
     "value_flow": {
      "items": {
       "$ref": "#/components/schemas/ValueFlow"
      },
      "type": "array"
     }
    },
    "required": [
     "event_id",
     "timestamp",
     "actions",
     "fees",
     "value_flow",
     "is_scam",
     "lt",
     "in_progress"
    ],
    "type": "object"
   },
   "FoundAccounts": {
    "properties": {
     "addresses": {
      "items": {
       "properties": {
        "address": {
         "example": "0:010cеeac44fad23417a5c55e4071796868771082с9a61e8c195a8d57508b8471",
         "type": "string"
        },
        "name": {
         "example": "blah_blah.ton",
         "type": "string"
        }
       },
       "required": [
        "address",
        "name"
       ],
       "type": "object"
      },
      "type": "array"
     }
    },
    "required": [
     "addresses"
    ],
    "type": "object"
   },
   "ImagePreview": {
    "properties": {
     "resolution": {
      "example": "100x100",
      "type": "string"
     },
     "url": {
      "example": "https://site.com/pic1.jpg",
      "type": "string"
     }
    },
    "required": [
     "resolution",
     "url"
    ],
    "type": "object"
   },
   "InitStateRaw": {
    "properties": {
     "file_hash": {
      "example": "A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB",
      "type": "string"
     },
     "root_hash": {
      "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
      "type": "string"
     },
     "workchain": {
      "example": 4294967295,
      "format": "uint32",
      "type": "integer"
     }
    },
    "required": [
     "workchain",
     "root_hash",
     "file_hash"
    ],
    "type": "object"
   },
   "JettonBalance": {
    "properties": {
     "balance": {
      "example": 597968399,
      "type": "string"
     },
     "jetton": {
      "$ref": "#/components/schemas/JettonPreview"
     },
     "wallet_address": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "balance",
     "wallet_address",
     "jetton"
    ],
    "type": "object"
   },
   "JettonInfo": {
    "properties": {
     "metadata": {
      "$ref": "#/components/schemas/JettonMetadata"
     },
     "mintable": {
      "example": true,
      "type": "boolean"
     },
     "total_supply": {
      "example": 311500000000000,
      "type": "string"
     },
     "verification": {
      "$ref": "#/components/schemas/JettonVerificationType"
     }
    },
    "required": [
     "mintable",
     "total_supply",
     "metadata",
     "verification"
    ],
    "type": "object"
   },
   "JettonMetadata": {
    "properties": {
     "address": {
      "example": "0:0BB5A9F69043EEBDDA5AD2E946EB953242BD8F603FE795D90698CEEC6BFC60A0",
      "type": "string"
     },
     "catalogs": {
      "items": {
       "example": [
        "https://coinmarketcap.com/currencies/drv/",
        "https://www.coingecko.com/en/coins/durov"
       ],
       "type": "string"
      },
      "type": "array"
     },
     "decimals": {
      "example": "9",
      "type": "string"
     },
     "description": {
      "example": "Wrapped Toncoin",
      "type": "string"
     },
     "image": {
      "example": "https://cache.tonapi.io/images/jetton.jpg",
      "type": "string"
     },
     "name": {
      "example": "Wrapped TON",
      "type": "string"
     },
     "social": {
      "items": {
       "example": [
        "https://t.me/durov_coin",
        "https://twitter.com/durov_coin"
       ],
       "type": "string"
      },
      "type": "array"
     },
     "symbol": {
      "example": "WTON",
      "type": "string"
     },
     "websites": {
      "items": {
       "example": [
        "https://durov.coin",
        "ton://durov-coin.ton"
       ],
       "type": "string"
      },
      "type": "array"
     }
    },
    "required": [
     "address",
     "name",
     "symbol",
     "decimals"
    ],
    "type": "object"
   },
   "JettonPreview": {
    "properties": {
     "address": {
      "example": "0:0BB5A9F69043EEBDDA5AD2E946EB953242BD8F603FE795D90698CEEC6BFC60A0",
      "type": "string"
     },
     "decimals": {
      "example": 9,
      "type": "integer"
     },
     "image": {
      "example": "https://cache.tonapi.io/images/jetton.jpg",
      "type": "string"
     },
     "name": {
      "example": "Wrapped TON",
      "type": "string"
     },
     "symbol": {
      "example": "WTON",
      "type": "string"
     },
     "verification": {
      "$ref": "#/components/schemas/JettonVerificationType"
     }
    },
    "required": [
     "address",
     "name",
     "symbol",
     "decimals",
     "verification",
     "image"
    ],
    "type": "object"
   },
   "JettonQuantity": {
    "properties": {
     "jetton": {
      "$ref": "#/components/schemas/JettonPreview"
     },
     "quantity": {
      "example": 597968399,
      "type": "string"
     },
     "wallet_address": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "quantity",
     "wallet_address",
     "jetton"
    ],
    "type": "object"
   },
   "JettonTransferAction": {
    "properties": {
     "amount": {
      "description": "amount in quanta of tokens",
      "example": 1000000000,
      "type": "string"
     },
     "comment": {
      "example": "Hi! This is your salary. \nFrom accounting with love.",
      "type": "string"
     },
     "jetton": {
      "$ref": "#/components/schemas/JettonPreview"
     },
     "recipient": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "recipients_wallet": {
      "example": "0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B",
      "type": "string"
     },
     "refund": {
      "$ref": "#/components/schemas/Refund"
     },
     "sender": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "senders_wallet": {
      "example": "0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B",
      "type": "string"
     }
    },
    "required": [
     "amount",
     "jetton",
     "senders_wallet",
     "recipients_wallet"
    ],
    "type": "object"
   },
   "JettonVerificationType": {
    "enum": [
     "whitelist",
     "blacklist",
     "none"
    ],
    "type": "string"
   },
   "Jettons": {
    "properties": {
     "jettons": {
      "items": {
       "$ref": "#/components/schemas/JettonInfo"
      },
      "type": "array"
     }
    },
    "required": [
     "jettons"
    ],
    "type": "object"
   },
   "JettonsBalances": {
    "properties": {
     "balances": {
      "items": {
       "$ref": "#/components/schemas/JettonBalance"
      },
      "type": "array"
     }
    },
    "required": [
     "balances"
    ],
    "type": "object"
   },
   "Message": {
    "properties": {
     "bounce": {
      "example": true,
      "type": "boolean"
     },
     "bounced": {
      "example": true,
      "type": "boolean"
     },
     "created_at": {
      "example": 5681002,
      "format": "int64",
      "type": "integer"
     },
     "created_lt": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "decoded_body": {},
     "decoded_op_name": {
      "example": "nft_transfer",
      "type": "string"
     },
     "destination": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "fwd_fee": {
      "example": 5681002,
      "format": "int64",
      "type": "integer"
     },
     "ihr_disabled": {
      "example": true,
      "type": "boolean"
     },
     "ihr_fee": {
      "example": 5681002,
      "format": "int64",
      "type": "integer"
     },
     "import_fee": {
      "example": 5681002,
      "format": "int64",
      "type": "integer"
     },
     "init": {
      "$ref": "#/components/schemas/StateInit"
     },
     "op_code": {
      "example": "0xdeadbeaf",
      "type": "string"
     },
     "raw_body": {
      "description": "hex-encoded BoC with raw message body",
      "example": "B5EE9C7201010101001100001D00048656C6C6F2C20776F726C64218",
      "type": "string"
     },
     "source": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "value": {
      "example": 60000000,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "created_lt",
     "ihr_disabled",
     "bounce",
     "bounced",
     "value",
     "fwd_fee",
     "ihr_fee",
     "import_fee",
     "created_at",
     "decoded_body"
    ],
    "type": "object"
   },
   "MessageConsequences": {
    "properties": {
     "event": {
      "$ref": "#/components/schemas/AccountEvent"
     },
     "risk": {
      "$ref": "#/components/schemas/Risk"
     },
     "trace": {
      "$ref": "#/components/schemas/Trace"
     }
    },
    "required": [
     "trace",
     "risk",
     "event"
    ],
    "type": "object"
   },
   "MethodExecutionResult": {
    "properties": {
     "decoded": {},
     "exit_code": {
      "description": "tvm exit code",
      "example": 0,
      "type": "integer"
     },
     "stack": {
      "items": {
       "$ref": "#/components/schemas/TvmStackRecord"
      },
      "type": "array"
     },
     "success": {
      "example": true,
      "type": "boolean"
     }
    },
    "required": [
     "success",
     "exit_code",
     "stack"
    ],
    "type": "object"
   },
   "NftCollection": {
    "properties": {
     "address": {
      "example": "0:FD595F36B4C1535BEC8461490D38EBB9AE3C38DD6ACE17CA63ABE2C6608BE159",
      "type": "string"
     },
     "metadata": {
      "additionalProperties": true,
      "example": {},
      "type": "object"
     },
     "next_item_index": {
      "example": 1,
      "format": "int64",
      "type": "integer"
     },
     "owner": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "raw_collection_content": {
      "example": "697066733a2f2f516d596e437861746f5178433571584b79773971656768415853626f3544644e6a32387631487669437a47355359",
      "type": "string"
     }
    },
    "required": [
     "address",
     "next_item_index",
     "raw_collection_content"
    ],
    "type": "object"
   },
   "NftCollections": {
    "properties": {
     "nft_collections": {
      "items": {
       "$ref": "#/components/schemas/NftCollection"
      },
      "type": "array"
     }
    },
    "required": [
     "nft_collections"
    ],
    "type": "object"
   },
   "NftItem": {
    "properties": {
     "address": {
      "example": "0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B",
      "type": "string"
     },
     "approved_by": {
      "items": {
       "enum": [
        "getgems",
        "tonkeeper"
       ],
       "example": "getgems",
       "type": "string"
      },
      "type": "array"
     },
     "collection": {
      "properties": {
       "address": {
        "example": "0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B",
        "type": "string"
       },
       "name": {
        "example": "TON Diamonds",
        "type": "string"
       }
      },
      "required": [
       "address",
       "name"
      ],
      "type": "object"
     },
     "dns": {
      "example": "crypto.ton",
      "type": "string"
     },
     "index": {
      "example": 58,
      "format": "int64",
      "type": "integer"
     },
     "metadata": {
      "additionalProperties": true,
      "example": {},
      "type": "object"
     },
     "owner": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "previews": {
      "items": {
       "$ref": "#/components/schemas/ImagePreview"
      },
      "type": "array"
     },
     "sale": {
      "$ref": "#/components/schemas/Sale"
     },
     "verified": {
      "example": true,
      "type": "boolean"
     }
    },
    "required": [
     "address",
     "index",
     "verified",
     "metadata",
     "approved_by"
    ],
    "type": "object"
   },
   "NftItemTransferAction": {
    "properties": {
     "comment": {
      "example": "Hi! This is your salary. \nFrom accounting with love.",
      "type": "string"
     },
     "nft": {
      "example": "",
      "type": "string"
     },
     "payload": {
      "description": "raw hex encoded payload",
      "example": "0234de3e21d21b3ee21f3",
      "type": "string"
     },
     "recipient": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "refund": {
      "$ref": "#/components/schemas/Refund"
     },
     "sender": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "nft"
    ],
    "type": "object"
   },
   "NftItems": {
    "properties": {
     "nft_items": {
      "items": {
       "$ref": "#/components/schemas/NftItem"
      },
      "type": "array"
     }
    },
    "required": [
     "nft_items"
    ],
    "type": "object"
   },
   "NftPurchaseAction": {
    "properties": {
     "amount": {
      "$ref": "#/components/schemas/Price"
     },
     "auction_type": {
      "enum": [
       "DNS.tg",
       "getgems",
       "basic"
      ],
      "type": "string"
     },
     "buyer": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "nft": {
      "$ref": "#/components/schemas/NftItem"
     },
     "seller": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "amount",
     "seller",
     "buyer",
     "auction_type",
     "nft"
    ],
    "type": "object"
   },
   "PoolImplementation": {
    "properties": {
     "description": {
      "example": "Oldest pool with minimal staking amount 50 TON",
      "type": "string"
     },
     "name": {
      "example": "TON Whales",
      "type": "string"
     },
     "url": {
      "example": "https://tonvalidators.org/",
      "type": "string"
     }
    },
    "required": [
     "name",
     "description",
     "url"
    ],
    "type": "object"
   },
   "PoolInfo": {
    "properties": {
     "address": {
      "example": "0:48fb0195a7fc7454512377b9bd704503ded27f6e7c4c4a9d136fdab3ef9ec04c",
      "type": "string"
     },
     "apy": {
      "description": "APY in percent",
      "example": 5.31,
      "type": "number"
     },
     "current_nominators": {
      "description": "current number of nominators",
      "example": 10,
      "type": "integer"
     },
     "cycle_end": {
      "description": "current nomination cycle ending timestamp",
      "example": 1678223064,
      "format": "int64",
      "type": "integer"
     },
     "cycle_start": {
      "description": "current nomination cycle beginning timestamp",
      "example": 1678223064,
      "format": "int64",
      "type": "integer"
     },
     "implementation": {
      "enum": [
       "whales",
       "tf",
       "liquidTF"
      ],
      "type": "string"
     },
     "liquid_jetton_master": {
      "description": "for liquid staking master account of jetton",
      "example": "0:4a91d32d0289bda9813ae00ff7640e6c38fdce76e4583dd6afc463b70c7d767c",
      "type": "string"
     },
     "max_nominators": {
      "description": "maximum number of nominators",
      "example": 100,
      "type": "integer"
     },
     "min_stake": {
      "example": 5000000000,
      "format": "int64",
      "type": "integer"
     },
     "name": {
      "example": "Tonkeeper pool",
      "type": "string"
     },
     "total_amount": {
      "format": "int64",
      "type": "integer"
     },
     "verified": {
      "description": "this pool has verified source code or managed by trusted company",
      "example": true,
      "type": "boolean"
     }
    },
    "required": [
     "address",
     "total_amount",
     "implementation",
     "apy",
     "name",
     "min_stake",
     "cycle_start",
     "cycle_end",
     "verified",
     "current_nominators",
     "max_nominators"
    ],
    "type": "object"
   },
   "Price": {
    "properties": {
     "token_name": {
      "example": "TON",
      "type": "string"
     },
     "value": {
      "example": 123000000000,
      "type": "string"
     }
    },
    "required": [
     "value",
     "token_name"
    ],
    "type": "object"
   },
   "RawAccount": {
    "properties": {
     "address": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     },
     "balance": {
      "example": 123456789,
      "format": "int64",
      "type": "integer"
     },
     "code": {
      "example": "b5ee9c72410104010087000114ff00f4a413f4a0f2c80b0102012002030002d200dfa5ffff76a268698fe9ffe8e42c5267858f90e785ffe4f6aa6467c444ffb365ffc10802faf0807d014035e7a064b87d804077e7857fc10803dfd2407d014035e7a064b86467cd8903a32b9ba4410803ade68afd014035e7a045ea432b6363796103bb7b9363210c678b64b87d807d8040c249b3e4",
      "type": "string"
     },
     "data": {
      "example": "b5ee9c7241010101002600004811fd096c0000000000000000000000000000000000000000000000000000000000000000cb78264d",
      "type": "string"
     },
     "extra_balance": {
      "additionalProperties": {
       "type": "string"
      },
      "type": "object"
     },
     "last_transaction_lt": {
      "example": 123456789,
      "format": "int64",
      "type": "integer"
     },
     "status": {
      "example": "active",
      "type": "string"
     },
     "storage": {
      "$ref": "#/components/schemas/AccountStorageInfo"
     }
    },
    "required": [
     "address",
     "balance",
     "status",
     "last_transaction_lt",
     "storage"
    ],
    "type": "object"
   },
   "RecoverStakeAction": {
    "properties": {
     "amount": {
      "example": 1660050553,
      "format": "int64",
      "type": "integer"
     },
     "staker": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "amount",
     "staker"
    ],
    "type": "object"
   },
   "Refund": {
    "properties": {
     "origin": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     },
     "type": {
      "enum": [
       "DNS.ton",
       "DNS.tg",
       "GetGems"
      ],
      "example": "DNS.ton",
      "type": "string"
     }
    },
    "required": [
     "type",
     "origin"
    ],
    "type": "object"
   },
   "Risk": {
    "description": "Risk specifies assets that could be lost if a message would be sent to a malicious smart contract. It makes sense to understand the risk BEFORE sending a message to the blockchain.",
    "properties": {
     "jettons": {
      "items": {
       "$ref": "#/components/schemas/JettonQuantity"
      },
      "type": "array"
     },
     "nfts": {
      "items": {
       "$ref": "#/components/schemas/NftItem"
      },
      "type": "array"
     },
     "ton": {
      "example": 500,
      "format": "int64",
      "type": "integer"
     },
     "transfer_all_remaining_balance": {
      "description": "transfer all the remaining balance of the wallet.",
      "example": true,
      "type": "boolean"
     }
    },
    "required": [
     "transfer_all_remaining_balance",
     "ton",
     "jettons",
     "nfts"
    ],
    "type": "object"
   },
   "STONfiSwapAction": {
    "properties": {
     "amount_in": {
      "example": "1660050553",
      "type": "string"
     },
     "amount_out": {
      "example": "1660050553",
      "type": "string"
     },
     "jetton_master_in": {
      "$ref": "#/components/schemas/JettonPreview"
     },
     "jetton_master_out": {
      "$ref": "#/components/schemas/JettonPreview"
     },
     "jetton_wallet_in": {
      "example": "0:dea8f638b789172ce36d10a20318125e52c649aa84893cd77858224fe2b9b0ee",
      "type": "string"
     },
     "jetton_wallet_out": {
      "example": "0:dea8f638b789172ce36d10a20318125e52c649aa84893cd77858224fe2b9b0ee",
      "type": "string"
     },
     "stonfi_router": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "user_wallet": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "amount_in",
     "amount_out",
     "user_wallet",
     "stonfi_router",
     "jetton_wallet_in",
     "jetton_master_in",
     "jetton_wallet_out",
     "jetton_master_out"
    ],
    "type": "object"
   },
   "Sale": {
    "properties": {
     "address": {
      "example": "0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365",
      "type": "string"
     },
     "market": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "owner": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "price": {
      "$ref": "#/components/schemas/Price"
     }
    },
    "required": [
     "address",
     "market",
     "price"
    ],
    "type": "object"
   },
   "Seqno": {
    "properties": {
     "seqno": {
      "format": "uint32",
      "type": "integer"
     }
    },
    "required": [
     "seqno"
    ],
    "type": "object"
   },
   "SmartContractAction": {
    "properties": {
     "contract": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "executor": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "operation": {
      "example": "NftTransfer or 0x35d95a12",
      "type": "string"
     },
     "payload": {
      "type": "string"
     },
     "refund": {
      "$ref": "#/components/schemas/Refund"
     },
     "ton_attached": {
      "description": "amount in nanotons",
      "example": 123456789,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "executor",
     "contract",
     "ton_attached",
     "operation"
    ],
    "type": "object"
   },
   "StateInit": {
    "properties": {
     "boc": {
      "example": "te6ccgEBBgEARAABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQAE8jAAONBsIdMfMO1E0NM/MAHAAZekyMs/ye1UkzDyBuIAEaE0MdqJoaZ+YQ==",
      "type": "string"
     }
    },
    "required": [
     "boc"
    ],
    "type": "object"
   },
   "StoragePhase": {
    "properties": {
     "fees_collected": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "fees_due": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "status_change": {
      "$ref": "#/components/schemas/AccStatusChange"
     }
    },
    "required": [
     "fees_collected",
     "status_change"
    ],
    "type": "object"
   },
   "StorageProvider": {
    "properties": {
     "accept_new_contracts": {
      "example": true,
      "type": "boolean"
     },
     "address": {
      "example": "0:FD595F36B4C1535BEC8461490D38EBB9AE3C38DD6ACE17CA63ABE2C6608BE159",
      "type": "string"
     },
     "max_span": {
      "example": 604800,
      "format": "int64",
      "type": "integer"
     },
     "maximal_file_size": {
      "example": 10485760,
      "format": "int64",
      "type": "integer"
     },
     "minimal_file_size": {
      "example": 64,
      "format": "int64",
      "type": "integer"
     },
     "rate_per_mb_day": {
      "example": 50000000,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "address",
     "accept_new_contracts",
     "rate_per_mb_day",
     "max_span",
     "minimal_file_size",
     "maximal_file_size"
    ],
    "type": "object"
   },
   "Subscription": {
    "properties": {
     "address": {
      "example": "0:dea8f638b789172ce36d10a20318125e52c649aa84893cd77858224fe2b9b0ee",
      "type": "string"
     },
     "amount": {
      "example": 1000000000,
      "format": "int64",
      "type": "integer"
     },
     "beneficiary_address": {
      "example": "0:c704dadfabac88eab58e340de03080df81ff76636431f48624ad6e26fb2da0a4",
      "type": "string"
     },
     "failed_attempts": {
      "example": 0,
      "format": "int32",
      "type": "integer"
     },
     "last_payment_time": {
      "example": 1653996834,
      "format": "int64",
      "type": "integer"
     },
     "last_request_time": {
      "example": 0,
      "format": "int64",
      "type": "integer"
     },
     "period": {
      "example": 2592000,
      "format": "int64",
      "type": "integer"
     },
     "start_time": {
      "example": 1653996832,
      "format": "int64",
      "type": "integer"
     },
     "subscription_id": {
      "example": 217477,
      "format": "int64",
      "type": "integer"
     },
     "timeout": {
      "example": 10800,
      "format": "int64",
      "type": "integer"
     },
     "wallet_address": {
      "example": "0:567DE86AF2B6A557D7085807CF7C26338124987A5179344F0D0FA2657EB710F1",
      "type": "string"
     }
    },
    "required": [
     "address",
     "wallet_address",
     "beneficiary_address",
     "amount",
     "period",
     "start_time",
     "timeout",
     "last_payment_time",
     "last_request_time",
     "subscription_id",
     "failed_attempts"
    ],
    "type": "object"
   },
   "SubscriptionAction": {
    "properties": {
     "amount": {
      "example": 1000000000,
      "format": "int64",
      "type": "integer"
     },
     "beneficiary": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "initial": {
      "example": false,
      "type": "boolean"
     },
     "subscriber": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "subscription": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     }
    },
    "required": [
     "subscriber",
     "subscription",
     "beneficiary",
     "amount",
     "initial"
    ],
    "type": "object"
   },
   "Subscriptions": {
    "properties": {
     "subscriptions": {
      "items": {
       "$ref": "#/components/schemas/Subscription"
      },
      "type": "array"
     }
    },
    "required": [
     "subscriptions"
    ],
    "type": "object"
   },
   "TonTransferAction": {
    "properties": {
     "amount": {
      "description": "amount in nanotons",
      "example": 123456789,
      "format": "int64",
      "type": "integer"
     },
     "comment": {
      "example": "Hi! This is your salary. \nFrom accounting with love.",
      "type": "string"
     },
     "recipient": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "refund": {
      "$ref": "#/components/schemas/Refund"
     },
     "sender": {
      "$ref": "#/components/schemas/AccountAddress"
     }
    },
    "required": [
     "sender",
     "recipient",
     "amount"
    ],
    "type": "object"
   },
   "Trace": {
    "properties": {
     "children": {
      "items": {
       "$ref": "#/components/schemas/Trace"
      },
      "type": "array"
     },
     "interfaces": {
      "example": [
       "wallet",
       "tep62_item"
      ],
      "items": {
       "type": "string"
      },
      "type": "array"
     },
     "transaction": {
      "$ref": "#/components/schemas/Transaction"
     }
    },
    "required": [
     "transaction",
     "interfaces"
    ],
    "type": "object"
   },
   "TraceId": {
    "properties": {
     "id": {
      "example": "55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122",
      "type": "string"
     },
     "utime": {
      "example": 1645544908,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "id",
     "utime"
    ],
    "type": "object"
   },
   "TraceIds": {
    "properties": {
     "traces": {
      "items": {
       "$ref": "#/components/schemas/TraceId"
      },
      "type": "array"
     }
    },
    "required": [
     "traces"
    ],
    "type": "object"
   },
   "Transaction": {
    "properties": {
     "aborted": {
      "example": true,
      "type": "boolean"
     },
     "account": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "action_phase": {
      "$ref": "#/components/schemas/ActionPhase"
     },
     "block": {
      "example": "(-1,4234234,8000000000000000)",
      "type": "string"
     },
     "bounce_phase": {
      "$ref": "#/components/schemas/BouncePhaseType"
     },
     "compute_phase": {
      "$ref": "#/components/schemas/ComputePhase"
     },
     "credit_phase": {
      "$ref": "#/components/schemas/CreditPhase"
     },
     "destroyed": {
      "example": true,
      "type": "boolean"
     },
     "end_status": {
      "$ref": "#/components/schemas/AccountStatus"
     },
     "hash": {
      "example": "55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122",
      "type": "string"
     },
     "in_msg": {
      "$ref": "#/components/schemas/Message"
     },
     "lt": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "orig_status": {
      "$ref": "#/components/schemas/AccountStatus"
     },
     "out_msgs": {
      "items": {
       "$ref": "#/components/schemas/Message"
      },
      "type": "array"
     },
     "prev_trans_hash": {
      "example": "55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122",
      "type": "string"
     },
     "prev_trans_lt": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "state_update_new": {
      "example": "55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122",
      "type": "string"
     },
     "state_update_old": {
      "example": "55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122",
      "type": "string"
     },
     "storage_phase": {
      "$ref": "#/components/schemas/StoragePhase"
     },
     "success": {
      "example": true,
      "type": "boolean"
     },
     "total_fees": {
      "example": 25713146000001,
      "format": "int64",
      "type": "integer"
     },
     "transaction_type": {
      "$ref": "#/components/schemas/TransactionType"
     },
     "utime": {
      "example": 1645544908,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "hash",
     "lt",
     "account",
     "success",
     "utime",
     "orig_status",
     "end_status",
     "total_fees",
     "transaction_type",
     "state_update_old",
     "state_update_new",
     "out_msgs",
     "block",
     "aborted",
     "destroyed"
    ],
    "type": "object"
   },
   "TransactionType": {
    "enum": [
     "TransOrd",
     "TransTickTock",
     "TransSplitPrepare",
     "TransSplitInstall",
     "TransMergePrepare",
     "TransMergeInstall",
     "TransStorage"
    ],
    "example": "TransOrd",
    "type": "string"
   },
   "Transactions": {
    "properties": {
     "transactions": {
      "items": {
       "$ref": "#/components/schemas/Transaction"
      },
      "type": "array"
     }
    },
    "required": [
     "transactions"
    ],
    "type": "object"
   },
   "TvmStackRecord": {
    "properties": {
     "cell": {
      "example": "te6cckEBAQEAJAAAQ4ARPeUceMlv4l12d6jdLpIzzbAV6amYXNZeZK2aicQdC/Apj8aJ",
      "type": "string"
     },
     "num": {
      "example": "",
      "type": "string"
     },
     "slice": {
      "example": "",
      "type": "string"
     },
     "tuple": {
      "example": [],
      "items": {
       "$ref": "#/components/schemas/TvmStackRecord"
      },
      "type": "array"
     },
     "type": {
      "enum": [
       "cell",
       "num",
       "nan",
       "null",
       "tuple"
      ],
      "example": "cell",
      "type": "string"
     }
    },
    "required": [
     "type"
    ],
    "type": "object"
   },
   "UnSubscriptionAction": {
    "properties": {
     "beneficiary": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "subscriber": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "subscription": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     }
    },
    "required": [
     "subscriber",
     "subscription",
     "beneficiary"
    ],
    "type": "object"
   },
   "Validator": {
    "properties": {
     "address": {
      "example": "0:55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122",
      "type": "string"
     }
    },
    "required": [
     "address"
    ],
    "type": "object"
   },
   "Validators": {
    "properties": {
     "validators": {
      "items": {
       "$ref": "#/components/schemas/Validator"
      },
      "type": "array"
     }
    },
    "required": [
     "validators"
    ],
    "type": "object"
   },
   "ValidatorsSet": {
    "properties": {
     "list": {
      "items": {
       "properties": {
        "public_key": {
         "type": "string"
        }
       },
       "required": [
        "public_key"
       ],
       "type": "object"
      },
      "type": "array"
     },
     "main": {
      "type": "integer"
     },
     "total": {
      "type": "integer"
     },
     "total_weight": {
      "type": "integer"
     },
     "utime_since": {
      "type": "integer"
     },
     "utime_until": {
      "type": "integer"
     }
    },
    "required": [
     "utime_since",
     "utime_until",
     "total",
     "main",
     "list"
    ],
    "type": "object"
   },
   "ValueFlow": {
    "properties": {
     "account": {
      "$ref": "#/components/schemas/AccountAddress"
     },
     "fees": {
      "example": 10,
      "format": "int64",
      "type": "integer"
     },
     "jettons": {
      "items": {
       "properties": {
        "account": {
         "$ref": "#/components/schemas/AccountAddress"
        },
        "quantity": {
         "example": 10,
         "format": "int64",
         "type": "integer"
        }
       },
       "required": [
        "account",
        "quantity"
       ],
       "type": "object"
      },
      "type": "array"
     },
     "ton": {
      "example": 80,
      "format": "int64",
      "type": "integer"
     }
    },
    "required": [
     "account",
     "ton",
     "fees"
    ],
    "type": "object"
   },
   "WalletDNS": {
    "properties": {
     "address": {
      "example": "0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf",
      "type": "string"
     },
     "has_method_pubkey": {
      "example": true,
      "type": "boolean"
     },
     "has_method_seqno": {
      "example": true,
      "type": "boolean"
     },
     "is_wallet": {
      "example": true,
      "type": "boolean"
     },
     "names": {
      "items": {
       "example": "name",
       "type": "string"
      },
      "type": "array"
     }
    },
    "required": [
     "address",
     "is_wallet",
     "has_method_pubkey",
     "has_method_seqno",
     "names"
    ],
    "type": "object"
   }
  }
 },
 "info": {
  "contact": {
   "email": "support@tonkeeper.com",
   "name": "Support"
  },
  "description": "Provide access to indexed TON blockchain",
  "title": "REST api to TON blockchain explorer",
  "version": "2.0.0"
 },
 "openapi": "3.0.2",
 "paths": {
  "/v2/accounts/_bulk": {
   "post": {
    "description": "Get human-friendly information about several accounts without low-level details.",
    "operationId": "getAccounts",
    "requestBody": {
     "$ref": "#/components/requestBodies/AccountIds"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Accounts"
        }
       }
      },
      "description": "a list of accounts"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/search": {
   "get": {
    "description": "Search for accounts by name. You can find the account by the first characters of the domain.",
    "operationId": "getSearchAccounts",
    "parameters": [
     {
      "in": "query",
      "name": "name",
      "required": true,
      "schema": {
       "maxLength": 15,
       "minLength": 3,
       "type": "string"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/FoundAccounts"
        }
       }
      },
      "description": "found accounts"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}": {
   "get": {
    "description": "Get human-friendly information about an account without low-level details.",
    "operationId": "getAccount",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Account"
        }
       }
      },
      "description": "account"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/dns/backresolve": {
   "get": {
    "description": "Get domains for wallet account",
    "operationId": "dnsBackResolve",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DomainNames"
        }
       }
      },
      "description": "domains for wallet account"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/dns/expiring": {
   "get": {
    "description": "Get expiring .ton dns",
    "operationId": "getDnsExpiring",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/periodQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DnsExpiring"
        }
       }
      },
      "description": "expiring .ton dns"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/events": {
   "get": {
    "description": "Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.",
    "operationId": "getEventsByAccount",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/i18n"
     },
     {
      "description": "filter actions where requested account is not real subject (for example sender or reciver jettons)",
      "in": "query",
      "name": "subject_only",
      "required": false,
      "schema": {
       "default": false,
       "type": "boolean"
      }
     },
     {
      "description": "omit this parameter to get last events",
      "in": "query",
      "name": "before_lt",
      "required": false,
      "schema": {
       "example": 25758317000002,
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "limit",
      "required": true,
      "schema": {
       "example": 1000,
       "maximum": 1000,
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "start_date",
      "required": false,
      "schema": {
       "example": 1668436763,
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "end_date",
      "required": false,
      "schema": {
       "example": 1668436763,
       "format": "int64",
       "type": "integer"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AccountEvents"
        }
       }
      },
      "description": "events"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/events/emulate": {
   "post": {
    "description": "Emulate sending message to blockchain",
    "operationId": "emulateMessageToAccountEvent",
    "parameters": [
     {
      "$ref": "#/components/parameters/i18n"
     },
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/Boc"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AccountEvent"
        }
       }
      },
      "description": "event"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Emulation"
    ]
   }
  },
  "/v2/accounts/{account_id}/jettons": {
   "get": {
    "description": "Get all Jettons balances by owner address",
    "operationId": "getJettonsBalances",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/JettonsBalances"
        }
       }
      },
      "description": "jetton balances"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/jettons/history": {
   "get": {
    "description": "Get the transfer jettons history for account_id",
    "operationId": "getJettonsHistory",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/i18n"
     },
     {
      "description": "omit this parameter to get last events",
      "in": "query",
      "name": "before_lt",
      "required": false,
      "schema": {
       "example": 25758317000002,
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "limit",
      "required": true,
      "schema": {
       "example": 1000,
       "maximum": 1000,
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "start_date",
      "required": false,
      "schema": {
       "example": 1668436763,
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "end_date",
      "required": false,
      "schema": {
       "example": 1668436763,
       "format": "int64",
       "type": "integer"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AccountEvents"
        }
       }
      },
      "description": "jetton history"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/jettons/{jetton_id}/history": {
   "get": {
    "description": "Get the transfer jetton history for account_id and jetton_id",
    "operationId": "getJettonsHistoryByID",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/jettonIdParameter"
     },
     {
      "$ref": "#/components/parameters/i18n"
     },
     {
      "description": "omit this parameter to get last events",
      "in": "query",
      "name": "before_lt",
      "required": false,
      "schema": {
       "example": 25758317000002,
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "limit",
      "required": true,
      "schema": {
       "example": 1000,
       "maximum": 1000,
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "start_date",
      "required": false,
      "schema": {
       "example": 1668436763,
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "end_date",
      "required": false,
      "schema": {
       "example": 1668436763,
       "format": "int64",
       "type": "integer"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AccountEvents"
        }
       }
      },
      "description": "jetton history"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/nfts": {
   "get": {
    "description": "Get all NFT items by owner address",
    "operationId": "getNftItemsByOwner",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/collectionQuery"
     },
     {
      "$ref": "#/components/parameters/limit"
     },
     {
      "$ref": "#/components/parameters/offset"
     },
     {
      "description": "Selling nft items in ton implemented usually via transfer items to special selling account. This option enables including items which owned not directly.",
      "in": "query",
      "name": "indirect_ownership",
      "required": false,
      "schema": {
       "default": false,
       "type": "boolean"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/NftItems"
        }
       }
      },
      "description": "nft items"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/publickey": {
   "get": {
    "description": "Get public key by account id",
    "operationId": "getPublicKeyByAccountID",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "public_key": {
           "example": "NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODQ3...",
           "type": "string"
          }
         },
         "required": [
          "public_key"
         ],
         "type": "object"
        }
       }
      },
      "description": "public key"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/reindex": {
   "post": {
    "description": "Update internal cache for a particular account",
    "operationId": "reindexAccount",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "success"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/subscriptions": {
   "get": {
    "description": "Get all subscriptions by wallet address",
    "operationId": "getSubscriptionsByAccount",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Subscriptions"
        }
       }
      },
      "description": "subscriptions"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/accounts/{account_id}/traces": {
   "get": {
    "description": "Get traces for account",
    "operationId": "getTracesByAccount",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "in": "query",
      "name": "limit",
      "schema": {
       "default": 100,
       "example": 100,
       "format": "int32",
       "maximum": 1000,
       "type": "integer"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/TraceIds"
        }
       }
      },
      "description": "traces"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Accounts"
    ]
   }
  },
  "/v2/blockchain/accounts/{account_id}": {
   "get": {
    "description": "Get low-level information about an account taken directly from the blockchain.",
    "operationId": "getRawAccount",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/RawAccount"
        }
       }
      },
      "description": "raw account"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/accounts/{account_id}/methods/{method_name}": {
   "get": {
    "description": "Execute get method for account",
    "operationId": "execGetMethod",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/methodNameParameter"
     },
     {
      "in": "query",
      "name": "args",
      "required": false,
      "schema": {
       "description": "Supported values: NaN, Null, 10-base digits for tiny int, 0x-prefixed hex digits for int257, all forms of addresses for slice, single-root base64-encoded BOC for cell",
       "example": [
        "0:9a33970f617bcd71acf2cd28357c067aa31859c02820d8f01d74c88063a8f4d8"
       ],
       "items": {
        "type": "string"
       },
       "type": "array"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/MethodExecutionResult"
        }
       }
      },
      "description": "result"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/accounts/{account_id}/transactions": {
   "get": {
    "description": "Get account transactions",
    "operationId": "getAccountTransactions",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "description": "omit this parameter to get last transactions",
      "in": "query",
      "name": "after_lt",
      "schema": {
       "example": "",
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "description": "omit this parameter to get last transactions",
      "in": "query",
      "name": "before_lt",
      "schema": {
       "example": 0,
       "format": "int64",
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "limit",
      "schema": {
       "default": 100,
       "example": 100,
       "format": "int32",
       "maximum": 1000,
       "type": "integer"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Transactions"
        }
       }
      },
      "description": "account transactions"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/blocks/{block_id}": {
   "get": {
    "description": "Get block data",
    "operationId": "getBlock",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Block"
        }
       }
      },
      "description": "block"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/blocks/{block_id}/transactions": {
   "get": {
    "description": "Get transactions from block",
    "operationId": "getBlockTransactions",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Transactions"
        }
       }
      },
      "description": "transactions"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/config": {
   "get": {
    "description": "Get blockchain config",
    "operationId": "getConfig",
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Config"
        }
       }
      },
      "description": "blockchain config"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/masterchain-head": {
   "get": {
    "description": "Get last known masterchain block",
    "operationId": "getMasterchainHead",
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Block"
        }
       }
      },
      "description": "masterchain head"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/message": {
   "post": {
    "description": "Send message to blockchain",
    "operationId": "sendMessage",
    "requestBody": {
     "$ref": "#/components/requestBodies/Boc"
    },
    "responses": {
     "200": {
      "description": "success"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/messages/{msg_id}/transaction": {
   "get": {
    "description": "Get transaction data by message hash",
    "operationId": "getTransactionByMessageHash",
    "parameters": [
     {
      "$ref": "#/components/parameters/messageIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Transaction"
        }
       }
      },
      "description": "transaction"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/transactions/{transaction_id}": {
   "get": {
    "description": "Get transaction data",
    "operationId": "getTransaction",
    "parameters": [
     {
      "$ref": "#/components/parameters/transactionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Transaction"
        }
       }
      },
      "description": "transaction"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/blockchain/validators": {
   "get": {
    "description": "Get validators",
    "operationId": "getValidators",
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Validators"
        }
       }
      },
      "description": "validators"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Blockchain"
    ]
   }
  },
  "/v2/dns/auctions": {
   "get": {
    "description": "Get all auctions",
    "operationId": "getAllAuctions",
    "parameters": [
     {
      "$ref": "#/components/parameters/domainFilterParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Auctions"
        }
       }
      },
      "description": "auctions"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "DNS"
    ]
   }
  },
  "/v2/dns/{domain_name}": {
   "get": {
    "description": "get full information about domain name",
    "operationId": "dnsInfo",
    "parameters": [
     {
      "$ref": "#/components/parameters/domainNameParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DomainInfo"
        }
       }
      },
      "description": "domain info"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "DNS"
    ]
   }
  },
  "/v2/dns/{domain_name}/bids": {
   "get": {
    "description": "Get domain bids",
    "operationId": "getDomainBids",
    "parameters": [
     {
      "$ref": "#/components/parameters/domainNameParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DomainBids"
        }
       }
      },
      "description": "domain bids"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "DNS"
    ]
   }
  },
  "/v2/dns/{domain_name}/resolve": {
   "get": {
    "description": "DNS resolve for domain name",
    "operationId": "dnsResolve",
    "parameters": [
     {
      "$ref": "#/components/parameters/domainNameParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/DnsRecord"
        }
       }
      },
      "description": "dns record"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "DNS"
    ]
   }
  },
  "/v2/events/emulate": {
   "post": {
    "description": "Emulate sending message to blockchain",
    "operationId": "emulateMessageToEvent",
    "parameters": [
     {
      "$ref": "#/components/parameters/i18n"
     }
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/Boc"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Event"
        }
       }
      },
      "description": "event"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Emulation"
    ]
   }
  },
  "/v2/events/{event_id}": {
   "get": {
    "description": "Get an event either by event ID or a hash of any transaction in a trace. An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.",
    "operationId": "getEvent",
    "parameters": [
     {
      "$ref": "#/components/parameters/eventIdParameter"
     },
     {
      "$ref": "#/components/parameters/i18n"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Event"
        }
       }
      },
      "description": "event"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Events"
    ]
   }
  },
  "/v2/jettons": {
   "get": {
    "description": "Get a list of all indexed jetton masters in the blockchain.",
    "operationId": "getJettons",
    "parameters": [
     {
      "in": "query",
      "name": "limit",
      "schema": {
       "default": 100,
       "example": 15,
       "format": "int32",
       "maximum": 1000,
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "offset",
      "schema": {
       "default": 0,
       "example": 10,
       "format": "int32",
       "type": "integer"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Jettons"
        }
       }
      },
      "description": "a list of jettons"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Jettons"
    ]
   }
  },
  "/v2/jettons/{account_id}": {
   "get": {
    "description": "Get jetton metadata by jetton master address",
    "operationId": "getJettonInfo",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/JettonInfo"
        }
       }
      },
      "description": "jetton info"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Jettons"
    ]
   }
  },
  "/v2/liteserver/get_account_state/{account_id}": {
   "get": {
    "description": "Get account state",
    "operationId": "getAccountStateLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "shard_proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "shardblk": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "state": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          }
         },
         "required": [
          "id",
          "shardblk",
          "shard_proof",
          "proof",
          "state"
         ],
         "type": "object"
        }
       }
      },
      "description": "account state"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_all_shards_info/{block_id}": {
   "get": {
    "description": "Get all shards info",
    "operationId": "getAllShardsInfoLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "data": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          }
         },
         "required": [
          "id",
          "proof",
          "data"
         ],
         "type": "object"
        }
       }
      },
      "description": "shards info"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_block/{block_id}": {
   "get": {
    "description": "Get block",
    "operationId": "getBlockLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "data": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          }
         },
         "required": [
          "id",
          "data"
         ],
         "type": "object"
        }
       }
      },
      "description": "block"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_block_header/{block_id}": {
   "get": {
    "description": "Get block header",
    "operationId": "getBlockHeaderLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     },
     {
      "$ref": "#/components/parameters/modeQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "header_proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "mode": {
           "example": 0,
           "format": "uint32",
           "type": "integer"
          }
         },
         "required": [
          "id",
          "mode",
          "header_proof"
         ],
         "type": "object"
        }
       }
      },
      "description": "block header"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_block_proof": {
   "get": {
    "description": "Get block proof",
    "operationId": "getBlockProofLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/knownBlockIdExtQuery"
     },
     {
      "$ref": "#/components/parameters/targetBlockIdExtQuery"
     },
     {
      "$ref": "#/components/parameters/modeQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "complete": {
           "example": true,
           "type": "boolean"
          },
          "from": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "steps": {
           "items": {
            "properties": {
             "lite_server_block_link_back": {
              "properties": {
               "dest_proof": {
                "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
                "type": "string"
               },
               "from": {
                "$ref": "#/components/schemas/BlockRaw"
               },
               "proof": {
                "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
                "type": "string"
               },
               "state_proof": {
                "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
                "type": "string"
               },
               "to": {
                "$ref": "#/components/schemas/BlockRaw"
               },
               "to_key_block": {
                "example": false,
                "type": "boolean"
               }
              },
              "required": [
               "to_key_block",
               "from",
               "to",
               "dest_proof",
               "proof",
               "state_proof"
              ],
              "type": "object"
             },
             "lite_server_block_link_forward": {
              "properties": {
               "config_proof": {
                "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
                "type": "string"
               },
               "dest_proof": {
                "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
                "type": "string"
               },
               "from": {
                "$ref": "#/components/schemas/BlockRaw"
               },
               "signatures": {
                "properties": {
                 "catchain_seqno": {
                  "format": "uint32",
                  "type": "integer"
                 },
                 "signatures": {
                  "items": {
                   "properties": {
                    "node_id_short": {
                     "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
                     "type": "string"
                    },
                    "signature": {
                     "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
                     "type": "string"
                    }
                   },
                   "required": [
                    "node_id_short",
                    "signature"
                   ],
                   "type": "object"
                  },
                  "type": "array"
                 },
                 "validator_set_hash": {
                  "format": "uint32",
                  "type": "integer"
                 }
                },
                "required": [
                 "validator_set_hash",
                 "catchain_seqno",
                 "signatures"
                ],
                "type": "object"
               },
               "to": {
                "$ref": "#/components/schemas/BlockRaw"
               },
               "to_key_block": {
                "example": false,
                "type": "boolean"
               }
              },
              "required": [
               "to_key_block",
               "from",
               "to",
               "dest_proof",
               "config_proof",
               "signatures"
              ],
              "type": "object"
             }
            },
            "required": [
             "lite_server_block_link_back",
             "lite_server_block_link_forward"
            ],
            "type": "object"
           },
           "type": "array"
          },
          "to": {
           "$ref": "#/components/schemas/BlockRaw"
          }
         },
         "required": [
          "complete",
          "from",
          "to",
          "steps"
         ],
         "type": "object"
        }
       }
      },
      "description": "proof"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_config_all/{block_id}": {
   "get": {
    "description": "Get config all",
    "operationId": "getConfigAllLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     },
     {
      "$ref": "#/components/parameters/modeQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "config_proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "mode": {
           "example": 0,
           "format": "uint32",
           "type": "integer"
          },
          "state_proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          }
         },
         "required": [
          "mode",
          "id",
          "state_proof",
          "config_proof"
         ],
         "type": "object"
        }
       }
      },
      "description": "config"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_masterchain_info": {
   "get": {
    "description": "Get masterchain info",
    "operationId": "getMasterchainInfoLiteServer",
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "init": {
           "$ref": "#/components/schemas/InitStateRaw"
          },
          "last": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "state_root_hash": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          }
         },
         "required": [
          "last",
          "state_root_hash",
          "init"
         ],
         "type": "object"
        }
       }
      },
      "description": "masterchain info"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_masterchain_info_ext": {
   "get": {
    "description": "Get masterchain info ext",
    "operationId": "getMasterchainInfoExtLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/modeQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "capabilities": {
           "example": 7,
           "format": "uint64",
           "type": "integer"
          },
          "init": {
           "$ref": "#/components/schemas/InitStateRaw"
          },
          "last": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "last_utime": {
           "example": 1687938199,
           "format": "uint32",
           "type": "integer"
          },
          "mode": {
           "example": 0,
           "format": "uint32",
           "type": "integer"
          },
          "now": {
           "example": 1687938204,
           "format": "uint32",
           "type": "integer"
          },
          "state_root_hash": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "version": {
           "example": 257,
           "format": "uint32",
           "type": "integer"
          }
         },
         "required": [
          "mode",
          "version",
          "capabilities",
          "last",
          "last_utime",
          "now",
          "state_root_hash",
          "init"
         ],
         "type": "object"
        }
       }
      },
      "description": "masterchain info ext"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_shard_block_proof/{block_id}": {
   "get": {
    "description": "Get shard block proof",
    "operationId": "getShardBlockProofLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "links": {
           "items": {
            "properties": {
             "id": {
              "$ref": "#/components/schemas/BlockRaw"
             },
             "proof": {
              "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
              "type": "string"
             }
            },
            "required": [
             "id",
             "proof"
            ],
            "type": "object"
           },
           "type": "array"
          },
          "masterchain_id": {
           "$ref": "#/components/schemas/BlockRaw"
          }
         },
         "required": [
          "masterchain_id",
          "links"
         ],
         "type": "object"
        }
       }
      },
      "description": "shard"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_shard_info/{block_id}": {
   "get": {
    "description": "Get shard info",
    "operationId": "getShardInfoLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     },
     {
      "$ref": "#/components/parameters/workchainQuery"
     },
     {
      "$ref": "#/components/parameters/shardQuery"
     },
     {
      "$ref": "#/components/parameters/exactQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "shard_descr": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "shard_proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "shardblk": {
           "$ref": "#/components/schemas/BlockRaw"
          }
         },
         "required": [
          "id",
          "shardblk",
          "shard_proof",
          "shard_descr"
         ],
         "type": "object"
        }
       }
      },
      "description": "shard info"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_state/{block_id}": {
   "get": {
    "description": "Get block state",
    "operationId": "getStateLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "data": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "file_hash": {
           "example": "A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB",
           "type": "string"
          },
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "root_hash": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          }
         },
         "required": [
          "id",
          "root_hash",
          "file_hash",
          "data"
         ],
         "type": "object"
        }
       }
      },
      "description": "state"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_time": {
   "get": {
    "description": "Get time",
    "operationId": "getTimeLiteServer",
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "time": {
           "example": 1687146728,
           "format": "uint32",
           "type": "integer"
          }
         },
         "required": [
          "time"
         ],
         "type": "object"
        }
       }
      },
      "description": "time"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/get_transactions/{account_id}": {
   "get": {
    "description": "Get transactions",
    "operationId": "getTransactionsLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/countQuery"
     },
     {
      "$ref": "#/components/parameters/ltMustQuery"
     },
     {
      "$ref": "#/components/parameters/hashQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "ids": {
           "items": {
            "$ref": "#/components/schemas/BlockRaw"
           },
           "type": "array"
          },
          "transactions": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          }
         },
         "required": [
          "ids",
          "transactions"
         ],
         "type": "object"
        }
       }
      },
      "description": "transactions"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/list_block_transactions/{block_id}": {
   "get": {
    "description": "Get list block transactions",
    "operationId": "getListBlockTransactionsLiteServer",
    "parameters": [
     {
      "$ref": "#/components/parameters/blockIdExtParameter"
     },
     {
      "$ref": "#/components/parameters/modeQuery"
     },
     {
      "$ref": "#/components/parameters/countQuery"
     },
     {
      "$ref": "#/components/parameters/accountIdQuery"
     },
     {
      "$ref": "#/components/parameters/ltQuery"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "id": {
           "$ref": "#/components/schemas/BlockRaw"
          },
          "ids": {
           "items": {
            "properties": {
             "account": {
              "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
              "type": "string"
             },
             "hash": {
              "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
              "type": "string"
             },
             "lt": {
              "format": "uint64",
              "type": "integer"
             },
             "mode": {
              "example": 0,
              "format": "uint32",
              "type": "integer"
             }
            },
            "required": [
             "mode"
            ],
            "type": "object"
           },
           "type": "array"
          },
          "incomplete": {
           "example": true,
           "type": "boolean"
          },
          "proof": {
           "example": "131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85",
           "type": "string"
          },
          "req_count": {
           "example": 100,
           "format": "uint32",
           "type": "integer"
          }
         },
         "required": [
          "id",
          "req_count",
          "incomplete",
          "ids",
          "proof"
         ],
         "type": "object"
        }
       }
      },
      "description": "list block transactions"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/liteserver/send_message": {
   "post": {
    "description": "Send message",
    "operationId": "sendMessageLiteServer",
    "requestBody": {
     "$ref": "#/components/requestBodies/LiteServerSendMessageRequest"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "code": {
           "example": 200,
           "format": "uint32",
           "type": "integer"
          }
         },
         "required": [
          "code"
         ],
         "type": "object"
        }
       }
      },
      "description": "code"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Lite Server"
    ]
   }
  },
  "/v2/nfts/_bulk": {
   "post": {
    "description": "Get NFT items by their addresses",
    "operationId": "getNftItemsByAddresses",
    "requestBody": {
     "$ref": "#/components/requestBodies/AccountIds"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/NftItems"
        }
       }
      },
      "description": "nft items"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "NFT"
    ]
   }
  },
  "/v2/nfts/collections": {
   "get": {
    "description": "Get NFT collections",
    "operationId": "getNftCollections",
    "parameters": [
     {
      "in": "query",
      "name": "limit",
      "schema": {
       "default": 100,
       "example": 15,
       "format": "int32",
       "maximum": 1000,
       "type": "integer"
      }
     },
     {
      "in": "query",
      "name": "offset",
      "schema": {
       "default": 0,
       "example": 10,
       "format": "int32",
       "type": "integer"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/NftCollections"
        }
       }
      },
      "description": "nft collections"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "NFT"
    ]
   }
  },
  "/v2/nfts/collections/{account_id}": {
   "get": {
    "description": "Get NFT collection by collection address",
    "operationId": "getNftCollection",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/NftCollection"
        }
       }
      },
      "description": "nft collection"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "NFT"
    ]
   }
  },
  "/v2/nfts/collections/{account_id}/items": {
   "get": {
    "description": "Get NFT items from collection by collection address",
    "operationId": "getItemsFromCollection",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/limit"
     },
     {
      "$ref": "#/components/parameters/offset"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/NftItems"
        }
       }
      },
      "description": "nft collection"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "NFT"
    ]
   }
  },
  "/v2/nfts/{account_id}": {
   "get": {
    "description": "Get NFT item by its address",
    "operationId": "getNftItemByAddress",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/NftItem"
        }
       }
      },
      "description": "nft item"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "NFT"
    ]
   }
  },
  "/v2/pubkeys/{public_key}/wallets": {
   "get": {
    "description": "Get wallets by public key",
    "operationId": "getWalletsByPublicKey",
    "parameters": [
     {
      "$ref": "#/components/parameters/publicKeyParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Accounts"
        }
       }
      },
      "description": "a list of wallets"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Wallets"
    ]
   }
  },
  "/v2/rates": {
   "get": {
    "description": "Get the token price to the currency",
    "operationId": "getRates",
    "parameters": [
     {
      "description": "accept ton and jetton master addresses, separated by commas",
      "in": "query",
      "name": "tokens",
      "required": true,
      "schema": {
       "example": "ton",
       "type": "string"
      }
     },
     {
      "description": "accept ton and all possible fiat currencies, separated by commas",
      "in": "query",
      "name": "currencies",
      "required": true,
      "schema": {
       "example": "ton,usd,rub",
       "type": "string"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "rates": {
           "additionalProperties": true,
           "example": {}
          }
         },
         "required": [
          "rates"
         ],
         "type": "object"
        }
       }
      },
      "description": "ton price"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Rates"
    ]
   }
  },
  "/v2/staking/nominator/{account_id}/pools": {
   "get": {
    "description": "All pools where account participates",
    "operationId": "poolsByNominators",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AccountStaking"
        }
       }
      },
      "description": "user pools"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Staking"
    ]
   }
  },
  "/v2/staking/pool/{account_id}": {
   "get": {
    "description": "Pool info",
    "operationId": "stakingPoolInfo",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     },
     {
      "$ref": "#/components/parameters/i18n"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "implementation": {
           "$ref": "#/components/schemas/PoolImplementation"
          },
          "pool": {
           "$ref": "#/components/schemas/PoolInfo"
          }
         },
         "required": [
          "implementation",
          "pool"
         ],
         "type": "object"
        }
       }
      },
      "description": "user pools"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Staking"
    ]
   }
  },
  "/v2/staking/pool/{account_id}/history": {
   "get": {
    "description": "Pool info",
    "operationId": "stakingPoolHistory",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "apy": {
           "items": {
            "$ref": "#/components/schemas/ApyHistory"
           },
           "type": "array"
          }
         },
         "required": [
          "apy"
         ],
         "type": "object"
        }
       }
      },
      "description": "history"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Staking"
    ]
   }
  },
  "/v2/staking/pools": {
   "get": {
    "description": "All pools available in network",
    "operationId": "stakingPools",
    "parameters": [
     {
      "description": "account ID",
      "in": "query",
      "name": "available_for",
      "required": false,
      "schema": {
       "example": "0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621",
       "type": "string"
      }
     },
     {
      "description": "return also pools not from white list - just compatible by interfaces (maybe dangerous!)",
      "in": "query",
      "name": "include_unverified",
      "required": false,
      "schema": {
       "example": false,
       "type": "boolean"
      }
     },
     {
      "$ref": "#/components/parameters/i18n"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "implementations": {
           "additionalProperties": {
            "$ref": "#/components/schemas/PoolImplementation"
           },
           "type": "object"
          },
          "pools": {
           "items": {
            "$ref": "#/components/schemas/PoolInfo"
           },
           "type": "array"
          }
         },
         "required": [
          "pools",
          "implementations"
         ],
         "type": "object"
        }
       }
      },
      "description": "list of pools"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Staking"
    ]
   }
  },
  "/v2/storage/providers": {
   "get": {
    "description": "Get TON storage providers deployed to the blockchain.",
    "operationId": "getStorageProviders",
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "providers": {
           "items": {
            "$ref": "#/components/schemas/StorageProvider"
           },
           "type": "array"
          }
         },
         "required": [
          "providers"
         ],
         "type": "object"
        }
       }
      },
      "description": "list of storage providers"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Storage"
    ]
   }
  },
  "/v2/tonconnect/payload": {
   "get": {
    "description": "Get a payload for further token receipt",
    "operationId": "getTonConnectPayload",
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "payload": {
           "example": "84jHVNLQmZsAAAAAZB0Zryi2wqVJI-KaKNXOvCijEi46YyYzkaSHyJrMPBMOkVZa",
           "type": "string"
          }
         },
         "required": [
          "payload"
         ],
         "type": "object"
        }
       }
      },
      "description": "payload"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Connect"
    ]
   }
  },
  "/v2/tonconnect/stateinit": {
   "post": {
    "description": "Get account info by state init",
    "operationId": "getAccountInfoByStateInit",
    "requestBody": {
     "$ref": "#/components/requestBodies/TonConnectStateInit"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/AccountInfoByStateInit"
        }
       }
      },
      "description": "account info"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Connect"
    ]
   }
  },
  "/v2/traces/emulate": {
   "post": {
    "description": "Emulate sending message to blockchain",
    "operationId": "emulateMessageToTrace",
    "requestBody": {
     "$ref": "#/components/requestBodies/Boc"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Trace"
        }
       }
      },
      "description": "event"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Emulation"
    ]
   }
  },
  "/v2/traces/{trace_id}": {
   "get": {
    "description": "Get the trace by trace ID or hash of any transaction in trace",
    "operationId": "getTrace",
    "parameters": [
     {
      "$ref": "#/components/parameters/traceIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Trace"
        }
       }
      },
      "description": "trace"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "404": {
      "$ref": "#/components/responses/NotFound"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Traces"
    ]
   }
  },
  "/v2/wallet/auth/proof": {
   "post": {
    "description": "Account verification and token issuance",
    "operationId": "tonConnectProof",
    "requestBody": {
     "$ref": "#/components/requestBodies/TonConnectProof"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "token": {
           "example": "NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODQ3...",
           "type": "string"
          }
         },
         "required": [
          "token"
         ],
         "type": "object"
        }
       }
      },
      "description": "token"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Wallet"
    ]
   }
  },
  "/v2/wallet/backup": {
   "get": {
    "description": "Get backup info",
    "operationId": "getWalletBackup",
    "parameters": [
     {
      "in": "header",
      "name": "X-TonConnect-Auth",
      "required": true,
      "schema": {
       "type": "string"
      }
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "properties": {
          "dump": {
           "type": "string"
          }
         },
         "required": [
          "dump"
         ],
         "type": "object"
        }
       }
      },
      "description": "backup"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Wallet"
    ]
   },
   "put": {
    "description": "Set backup info",
    "operationId": "setWalletBackup",
    "parameters": [
     {
      "in": "header",
      "name": "X-TonConnect-Auth",
      "required": true,
      "schema": {
       "type": "string"
      }
     }
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/Backup"
    },
    "responses": {
     "200": {
      "description": "success"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Wallet"
    ]
   }
  },
  "/v2/wallet/emulate": {
   "post": {
    "description": "Emulate sending message to blockchain",
    "operationId": "emulateWalletMessage",
    "parameters": [
     {
      "$ref": "#/components/parameters/i18n"
     }
    ],
    "requestBody": {
     "$ref": "#/components/requestBodies/Boc"
    },
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/MessageConsequences"
        }
       }
      },
      "description": "event"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Emulation"
    ]
   }
  },
  "/v2/wallet/{account_id}/seqno": {
   "get": {
    "description": "Get account seqno",
    "operationId": "getAccountSeqno",
    "parameters": [
     {
      "$ref": "#/components/parameters/accountIdParameter"
     }
    ],
    "responses": {
     "200": {
      "content": {
       "application/json": {
        "schema": {
         "$ref": "#/components/schemas/Seqno"
        }
       }
      },
      "description": "account seqno"
     },
     "400": {
      "$ref": "#/components/responses/BadRequest"
     },
     "401": {
      "$ref": "#/components/responses/UnauthorizedError"
     },
     "500": {
      "$ref": "#/components/responses/InternalError"
     }
    },
    "tags": [
     "Wallets"
    ]
   }
  }
 },
 "servers": [
  {
   "url": "https://tonapi.io"
  },
  {
   "url": "https://testnet.tonapi.io"
  },
  {
   "url": "http://localhost:8081"
  }
 ]
}
