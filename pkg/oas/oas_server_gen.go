// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DnsBackResolve implements dnsBackResolve operation.
	//
	// Get domains for wallet account.
	//
	// GET /v2/accounts/{account_id}/dns/backresolve
	DnsBackResolve(ctx context.Context, params DnsBackResolveParams) (DnsBackResolveRes, error)
	// DnsInfo implements dnsInfo operation.
	//
	// Get full information about domain name.
	//
	// GET /v2/dns/{domain_name}
	DnsInfo(ctx context.Context, params DnsInfoParams) (DnsInfoRes, error)
	// DnsResolve implements dnsResolve operation.
	//
	// DNS resolve for domain name.
	//
	// GET /v2/dns/{domain_name}/resolve
	DnsResolve(ctx context.Context, params DnsResolveParams) (DnsResolveRes, error)
	// EmulateMessageToAccountEvent implements emulateMessageToAccountEvent operation.
	//
	// Emulate sending message to blockchain.
	//
	// POST /v2/accounts/{account_id}/events/emulate
	EmulateMessageToAccountEvent(ctx context.Context, req EmulateMessageToAccountEventReq, params EmulateMessageToAccountEventParams) (EmulateMessageToAccountEventRes, error)
	// EmulateMessageToEvent implements emulateMessageToEvent operation.
	//
	// Emulate sending message to blockchain.
	//
	// POST /v2/events/emulate
	EmulateMessageToEvent(ctx context.Context, req EmulateMessageToEventReq, params EmulateMessageToEventParams) (EmulateMessageToEventRes, error)
	// EmulateMessageToTrace implements emulateMessageToTrace operation.
	//
	// Emulate sending message to blockchain.
	//
	// POST /v2/traces/emulate
	EmulateMessageToTrace(ctx context.Context, req EmulateMessageToTraceReq) (EmulateMessageToTraceRes, error)
	// EmulateWalletMessage implements emulateWalletMessage operation.
	//
	// Emulate sending message to blockchain.
	//
	// POST /v2/wallet/emulate
	EmulateWalletMessage(ctx context.Context, req EmulateWalletMessageReq, params EmulateWalletMessageParams) (EmulateWalletMessageRes, error)
	// ExecGetMethod implements execGetMethod operation.
	//
	// Execute get method for account.
	//
	// GET /v2/blockchain/accounts/{account_id}/methods/{method_name}
	ExecGetMethod(ctx context.Context, params ExecGetMethodParams) (ExecGetMethodRes, error)
	// GetAccount implements getAccount operation.
	//
	// Get human-friendly information about an account without low-level details.
	//
	// GET /v2/accounts/{account_id}
	GetAccount(ctx context.Context, params GetAccountParams) (GetAccountRes, error)
	// GetAccountInfoByStateInit implements getAccountInfoByStateInit operation.
	//
	// Get account info by state init.
	//
	// POST /v2/tonconnect/stateinit
	GetAccountInfoByStateInit(ctx context.Context, req GetAccountInfoByStateInitReq) (GetAccountInfoByStateInitRes, error)
	// GetAccountTransactions implements getAccountTransactions operation.
	//
	// Get account transactions.
	//
	// GET /v2/blockchain/accounts/{account_id}/transactions
	GetAccountTransactions(ctx context.Context, params GetAccountTransactionsParams) (GetAccountTransactionsRes, error)
	// GetAccounts implements getAccounts operation.
	//
	// Get human-friendly information about several accounts without low-level details.
	//
	// POST /v2/accounts/_bulk
	GetAccounts(ctx context.Context, req OptGetAccountsReq) (GetAccountsRes, error)
	// GetAllAuctions implements getAllAuctions operation.
	//
	// Get all auctions.
	//
	// GET /v2/dns/auctions
	GetAllAuctions(ctx context.Context, params GetAllAuctionsParams) (GetAllAuctionsRes, error)
	// GetBlock implements getBlock operation.
	//
	// Get block data.
	//
	// GET /v2/blockchain/blocks/{block_id}
	GetBlock(ctx context.Context, params GetBlockParams) (GetBlockRes, error)
	// GetBlockTransactions implements getBlockTransactions operation.
	//
	// Get transactions from block.
	//
	// GET /v2/blockchain/blocks/{block_id}/transactions
	GetBlockTransactions(ctx context.Context, params GetBlockTransactionsParams) (GetBlockTransactionsRes, error)
	// GetConfig implements getConfig operation.
	//
	// Get blockchain config.
	//
	// GET /v2/blockchain/config
	GetConfig(ctx context.Context) (GetConfigRes, error)
	// GetDnsExpiring implements getDnsExpiring operation.
	//
	// Get expiring .ton dns.
	//
	// GET /v2/accounts/{account_id}/dns/expiring
	GetDnsExpiring(ctx context.Context, params GetDnsExpiringParams) (GetDnsExpiringRes, error)
	// GetDomainBids implements getDomainBids operation.
	//
	// Get domain bids.
	//
	// GET /v2/dns/{domain_name}/bids
	GetDomainBids(ctx context.Context, params GetDomainBidsParams) (GetDomainBidsRes, error)
	// GetEvent implements getEvent operation.
	//
	// Get an event either by event ID or a hash of any transaction in a trace. An event is built on top
	// of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known
	// patterns inside the trace and splits the trace into actions, where a single action represents a
	// meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to
	// be shown to users. It is advised not to build any logic on top of actions because actions can be
	// changed at any time.
	//
	// GET /v2/events/{event_id}
	GetEvent(ctx context.Context, params GetEventParams) (GetEventRes, error)
	// GetEventsByAccount implements getEventsByAccount operation.
	//
	// Get events for an account. Each event is built on top of a trace which is a series of transactions
	// caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the
	// trace into actions, where a single action represents a meaningful high-level operation like a
	// Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not
	// to build any logic on top of actions because actions can be changed at any time.
	//
	// GET /v2/accounts/{account_id}/events
	GetEventsByAccount(ctx context.Context, params GetEventsByAccountParams) (GetEventsByAccountRes, error)
	// GetItemsFromCollection implements getItemsFromCollection operation.
	//
	// Get NFT items from collection by collection address.
	//
	// GET /v2/nfts/collections/{account_id}/items
	GetItemsFromCollection(ctx context.Context, params GetItemsFromCollectionParams) (GetItemsFromCollectionRes, error)
	// GetJettonInfo implements getJettonInfo operation.
	//
	// Get jetton metadata by jetton master address.
	//
	// GET /v2/jettons/{account_id}
	GetJettonInfo(ctx context.Context, params GetJettonInfoParams) (GetJettonInfoRes, error)
	// GetJettons implements getJettons operation.
	//
	// Get a list of all indexed jetton masters in the blockchain.
	//
	// GET /v2/jettons
	GetJettons(ctx context.Context, params GetJettonsParams) (GetJettonsRes, error)
	// GetJettonsBalances implements getJettonsBalances operation.
	//
	// Get all Jettons balances by owner address.
	//
	// GET /v2/accounts/{account_id}/jettons
	GetJettonsBalances(ctx context.Context, params GetJettonsBalancesParams) (GetJettonsBalancesRes, error)
	// GetJettonsHistory implements getJettonsHistory operation.
	//
	// Get the transfer jettons history for account_id.
	//
	// GET /v2/accounts/{account_id}/jettons/history
	GetJettonsHistory(ctx context.Context, params GetJettonsHistoryParams) (GetJettonsHistoryRes, error)
	// GetJettonsHistoryByID implements getJettonsHistoryByID operation.
	//
	// Get the transfer jetton history for account_id and jetton_id.
	//
	// GET /v2/accounts/{account_id}/jettons/{jetton_id}/history
	GetJettonsHistoryByID(ctx context.Context, params GetJettonsHistoryByIDParams) (GetJettonsHistoryByIDRes, error)
	// GetMasterchainHead implements getMasterchainHead operation.
	//
	// Get last known masterchain block.
	//
	// GET /v2/blockchain/masterchain-head
	GetMasterchainHead(ctx context.Context) (GetMasterchainHeadRes, error)
	// GetNftCollection implements getNftCollection operation.
	//
	// Get NFT collection by collection address.
	//
	// GET /v2/nfts/collections/{account_id}
	GetNftCollection(ctx context.Context, params GetNftCollectionParams) (GetNftCollectionRes, error)
	// GetNftCollections implements getNftCollections operation.
	//
	// Get NFT collections.
	//
	// GET /v2/nfts/collections
	GetNftCollections(ctx context.Context, params GetNftCollectionsParams) (GetNftCollectionsRes, error)
	// GetNftItemByAddress implements getNftItemByAddress operation.
	//
	// Get NFT item by its address.
	//
	// GET /v2/nfts/{account_id}
	GetNftItemByAddress(ctx context.Context, params GetNftItemByAddressParams) (GetNftItemByAddressRes, error)
	// GetNftItemsByAddresses implements getNftItemsByAddresses operation.
	//
	// Get NFT items by their addresses.
	//
	// POST /v2/nfts/_bulk
	GetNftItemsByAddresses(ctx context.Context, req OptGetNftItemsByAddressesReq) (GetNftItemsByAddressesRes, error)
	// GetNftItemsByOwner implements getNftItemsByOwner operation.
	//
	// Get all NFT items by owner address.
	//
	// GET /v2/accounts/{account_id}/nfts
	GetNftItemsByOwner(ctx context.Context, params GetNftItemsByOwnerParams) (GetNftItemsByOwnerRes, error)
	// GetPublicKeyByAccountID implements getPublicKeyByAccountID operation.
	//
	// Get public key by account id.
	//
	// GET /v2/accounts/{account_id}/publickey
	GetPublicKeyByAccountID(ctx context.Context, params GetPublicKeyByAccountIDParams) (GetPublicKeyByAccountIDRes, error)
	// GetRates implements getRates operation.
	//
	// Get the token price to the currency.
	//
	// GET /v2/rates
	GetRates(ctx context.Context, params GetRatesParams) (GetRatesRes, error)
	// GetRawAccount implements getRawAccount operation.
	//
	// Get low-level information about an account taken directly from the blockchain.
	//
	// GET /v2/blockchain/accounts/{account_id}
	GetRawAccount(ctx context.Context, params GetRawAccountParams) (GetRawAccountRes, error)
	// GetSearchAccounts implements getSearchAccounts operation.
	//
	// Search for accounts by name. You can find the account by the first characters of the domain.
	//
	// GET /v2/accounts/search
	GetSearchAccounts(ctx context.Context, params GetSearchAccountsParams) (GetSearchAccountsRes, error)
	// GetStorageProviders implements getStorageProviders operation.
	//
	// Get TON storage providers deployed to the blockchain.
	//
	// GET /v2/storage/providers
	GetStorageProviders(ctx context.Context) (GetStorageProvidersRes, error)
	// GetSubscriptionsByAccount implements getSubscriptionsByAccount operation.
	//
	// Get all subscriptions by wallet address.
	//
	// GET /v2/accounts/{account_id}/subscriptions
	GetSubscriptionsByAccount(ctx context.Context, params GetSubscriptionsByAccountParams) (GetSubscriptionsByAccountRes, error)
	// GetTonConnectPayload implements getTonConnectPayload operation.
	//
	// Get a payload for further token receipt.
	//
	// GET /v2/tonconnect/payload
	GetTonConnectPayload(ctx context.Context) (GetTonConnectPayloadRes, error)
	// GetTrace implements getTrace operation.
	//
	// Get the trace by trace ID or hash of any transaction in trace.
	//
	// GET /v2/traces/{trace_id}
	GetTrace(ctx context.Context, params GetTraceParams) (GetTraceRes, error)
	// GetTracesByAccount implements getTracesByAccount operation.
	//
	// Get traces for account.
	//
	// GET /v2/accounts/{account_id}/traces
	GetTracesByAccount(ctx context.Context, params GetTracesByAccountParams) (GetTracesByAccountRes, error)
	// GetTransaction implements getTransaction operation.
	//
	// Get transaction data.
	//
	// GET /v2/blockchain/transactions/{transaction_id}
	GetTransaction(ctx context.Context, params GetTransactionParams) (GetTransactionRes, error)
	// GetValidators implements getValidators operation.
	//
	// Get validators.
	//
	// GET /v2/blockchain/validators
	GetValidators(ctx context.Context) (GetValidatorsRes, error)
	// GetWalletBackup implements getWalletBackup operation.
	//
	// Get backup info.
	//
	// GET /v2/wallet/backup
	GetWalletBackup(ctx context.Context, params GetWalletBackupParams) (GetWalletBackupRes, error)
	// PoolsByNominators implements poolsByNominators operation.
	//
	// All pools where account participates.
	//
	// GET /v2/staking/nominator/{account_id}/pools
	PoolsByNominators(ctx context.Context, params PoolsByNominatorsParams) (PoolsByNominatorsRes, error)
	// ReindexAccount implements reindexAccount operation.
	//
	// Update internal cache for a particular account.
	//
	// POST /v2/accounts/{account_id}/reindex
	ReindexAccount(ctx context.Context, params ReindexAccountParams) (ReindexAccountRes, error)
	// SendMessage implements sendMessage operation.
	//
	// Send message to blockchain.
	//
	// POST /v2/blockchain/message
	SendMessage(ctx context.Context, req SendMessageReq) (SendMessageRes, error)
	// SetWalletBackup implements setWalletBackup operation.
	//
	// Set backup info.
	//
	// PUT /v2/wallet/backup
	SetWalletBackup(ctx context.Context, req SetWalletBackupReq, params SetWalletBackupParams) (SetWalletBackupRes, error)
	// StakingPoolHistory implements stakingPoolHistory operation.
	//
	// Pool info.
	//
	// GET /v2/staking/pool/{account_id}/history
	StakingPoolHistory(ctx context.Context, params StakingPoolHistoryParams) (StakingPoolHistoryRes, error)
	// StakingPoolInfo implements stakingPoolInfo operation.
	//
	// Pool info.
	//
	// GET /v2/staking/pool/{account_id}
	StakingPoolInfo(ctx context.Context, params StakingPoolInfoParams) (StakingPoolInfoRes, error)
	// StakingPools implements stakingPools operation.
	//
	// All pools available in network.
	//
	// GET /v2/staking/pools
	StakingPools(ctx context.Context, params StakingPoolsParams) (StakingPoolsRes, error)
	// TonConnectProof implements tonConnectProof operation.
	//
	// Account verification and token issuance.
	//
	// POST /v2/wallet/auth/proof
	TonConnectProof(ctx context.Context, req TonConnectProofReq) (TonConnectProofRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
