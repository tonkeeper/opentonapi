// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s AccStatusChange) Validate() error {
	switch s {
	case "acst_unchanged":
		return nil
	case "acst_frozen":
		return nil
	case "acst_deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Account) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.GetMethods == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "get_methods",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AccountEvent) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Actions == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Actions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AccountEvents) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Events {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AccountStaking) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Pools == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pools",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AccountStatus) Validate() error {
	switch s {
	case "nonexist":
		return nil
	case "uninit":
		return nil
	case "active":
		return nil
	case "frozen":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Accounts) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Accounts == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Accounts {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "accounts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Action) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.TonTransfer.Set {
			if err := func() error {
				if err := s.TonTransfer.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "TonTransfer",
			Error: err,
		})
	}
	if err := func() error {
		if s.ContractDeploy.Set {
			if err := func() error {
				if err := s.ContractDeploy.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ContractDeploy",
			Error: err,
		})
	}
	if err := func() error {
		if s.JettonTransfer.Set {
			if err := func() error {
				if err := s.JettonTransfer.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "JettonTransfer",
			Error: err,
		})
	}
	if err := func() error {
		if s.NftItemTransfer.Set {
			if err := func() error {
				if err := s.NftItemTransfer.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "NftItemTransfer",
			Error: err,
		})
	}
	if err := func() error {
		if s.AuctionBid.Set {
			if err := func() error {
				if err := s.AuctionBid.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "AuctionBid",
			Error: err,
		})
	}
	if err := func() error {
		if s.NftPurchase.Set {
			if err := func() error {
				if err := s.NftPurchase.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "NftPurchase",
			Error: err,
		})
	}
	if err := func() error {
		if s.STONfiSwap.Set {
			if err := func() error {
				if err := s.STONfiSwap.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "STONfiSwap",
			Error: err,
		})
	}
	if err := func() error {
		if s.SmartContractExec.Set {
			if err := func() error {
				if err := s.SmartContractExec.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SmartContractExec",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.SimplePreview.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "simple_preview",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionSimplePreview) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Accounts == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "accounts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionStatus) Validate() error {
	switch s {
	case "ok":
		return nil
	case "failed":
		return nil
	case "pending":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActionType) Validate() error {
	switch s {
	case "TonTransfer":
		return nil
	case "JettonTransfer":
		return nil
	case "NftItemTransfer":
		return nil
	case "ContractDeploy":
		return nil
	case "Subscribe":
		return nil
	case "UnSubscribe":
		return nil
	case "AuctionBid":
		return nil
	case "NftPurchase":
		return nil
	case "DepositStake":
		return nil
	case "RecoverStake":
		return nil
	case "STONfiSwap":
		return nil
	case "SmartContractExec":
		return nil
	case "Unknown":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ApyHistory) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Apy)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AuctionBidAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuctionType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auction_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Nft.Set {
			if err := func() error {
				if err := s.Nft.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nft",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AuctionBidActionAuctionType) Validate() error {
	switch s {
	case "DNS.ton":
		return nil
	case "DNS.tg":
		return nil
	case "NUMBER.tg":
		return nil
	case "getgems":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Auctions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Data == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Block) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.PrevRefs == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prev_refs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BouncePhaseType) Validate() error {
	switch s {
	case "TrPhaseBounceNegfunds":
		return nil
	case "TrPhaseBounceNofunds":
		return nil
	case "TrPhaseBounceOk":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ComputePhase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SkipReason.Set {
			if err := func() error {
				if err := s.SkipReason.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "skip_reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ComputeSkipReason) Validate() error {
	switch s {
	case "cskip_no_state":
		return nil
	case "cskip_bad_state":
		return nil
	case "cskip_no_gas":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Config) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.R32.Set {
			if err := func() error {
				if err := s.R32.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "32",
			Error: err,
		})
	}
	if err := func() error {
		if s.R33.Set {
			if err := func() error {
				if err := s.R33.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "33",
			Error: err,
		})
	}
	if err := func() error {
		if s.R34.Set {
			if err := func() error {
				if err := s.R34.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "34",
			Error: err,
		})
	}
	if err := func() error {
		if s.R35.Set {
			if err := func() error {
				if err := s.R35.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "35",
			Error: err,
		})
	}
	if err := func() error {
		if s.R36.Set {
			if err := func() error {
				if err := s.R36.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "36",
			Error: err,
		})
	}
	if err := func() error {
		if s.R37.Set {
			if err := func() error {
				if err := s.R37.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "37",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ContractDeployAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Interfaces == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interfaces",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DnsExpiring) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DnsExpiringItemsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.DNSItem.Set {
			if err := func() error {
				if err := s.DNSItem.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dns_item",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DnsRecord) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Wallet.Set {
			if err := func() error {
				if err := s.Wallet.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "wallet",
			Error: err,
		})
	}
	if err := func() error {
		if s.Sites == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sites",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DomainBids) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Data == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DomainInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Item.Set {
			if err := func() error {
				if err := s.Item.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DomainNames) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Domains == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "domains",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Event) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Actions == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Actions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "actions",
			Error: err,
		})
	}
	if err := func() error {
		if s.ValueFlow == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value_flow",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FoundAccounts) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Addresses == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addresses",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetAccountsReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AccountIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetBlockProofLiteServerOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Steps == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Steps {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "steps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetBlockProofLiteServerOKStepsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.LiteServerBlockLinkForward.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lite_server_block_link_forward",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetBlockProofLiteServerOKStepsItemLiteServerBlockLinkForward) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Signatures.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signatures",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetBlockProofLiteServerOKStepsItemLiteServerBlockLinkForwardSignatures) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Signatures == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signatures",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetListBlockTransactionsLiteServerOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Ids == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetNftItemsByAddressesReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AccountIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetShardBlockProofLiteServerOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Links == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "links",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetStorageProvidersOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Providers == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "providers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetTransactionsLiteServerOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Ids == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JettonBalance) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Jetton.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jetton",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JettonInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Verification.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verification",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JettonPreview) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Verification.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verification",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JettonQuantity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Jetton.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jetton",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JettonTransferAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Refund.Set {
			if err := func() error {
				if err := s.Refund.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "refund",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Jetton.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jetton",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JettonVerificationType) Validate() error {
	switch s {
	case "whitelist":
		return nil
	case "blacklist":
		return nil
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Jettons) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Jettons == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Jettons {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jettons",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JettonsBalances) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Balances == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Balances {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "balances",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MessageConsequences) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Trace.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "trace",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Risk.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "risk",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Event.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MethodExecutionResult) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Stack == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Stack {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stack",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NftCollections) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NftCollections == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nft_collections",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NftItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ApprovedBy == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.ApprovedBy {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approved_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NftItemApprovedByItem) Validate() error {
	switch s {
	case "getgems":
		return nil
	case "tonkeeper":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s NftItemTransferAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Refund.Set {
			if err := func() error {
				if err := s.Refund.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "refund",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NftItems) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.NftItems == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.NftItems {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nft_items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NftPurchaseAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuctionType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auction_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Nft.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nft",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NftPurchaseActionAuctionType) Validate() error {
	switch s {
	case "DNS.tg":
		return nil
	case "getgems":
		return nil
	case "basic":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PoolInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Implementation.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "implementation",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Apy)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PoolInfoImplementation) Validate() error {
	switch s {
	case "whales":
		return nil
	case "tf":
		return nil
	case "liquidTF":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Refund) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RefundType) Validate() error {
	switch s {
	case "DNS.ton":
		return nil
	case "DNS.tg":
		return nil
	case "GetGems":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Risk) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Jettons == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Jettons {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jettons",
			Error: err,
		})
	}
	if err := func() error {
		if s.Nfts == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Nfts {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nfts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s STONfiSwapAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.JettonMasterIn.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jetton_master_in",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JettonMasterOut.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jetton_master_out",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SmartContractAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Refund.Set {
			if err := func() error {
				if err := s.Refund.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "refund",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s StakingPoolHistoryOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Apy == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Apy {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s StakingPoolInfoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Pool.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pool",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s StakingPoolsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Pools == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Pools {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pools",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s StoragePhase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.StatusChange.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_change",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Subscriptions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Subscriptions == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscriptions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TonTransferAction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Refund.Set {
			if err := func() error {
				if err := s.Refund.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "refund",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Trace) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Transaction.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction",
			Error: err,
		})
	}
	if err := func() error {
		if s.Interfaces == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interfaces",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Children {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "children",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TraceIds) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Traces == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "traces",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Transaction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.OrigStatus.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "orig_status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.EndStatus.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.TransactionType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.OutMsgs == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "out_msgs",
			Error: err,
		})
	}
	if err := func() error {
		if s.ComputePhase.Set {
			if err := func() error {
				if err := s.ComputePhase.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "compute_phase",
			Error: err,
		})
	}
	if err := func() error {
		if s.StoragePhase.Set {
			if err := func() error {
				if err := s.StoragePhase.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "storage_phase",
			Error: err,
		})
	}
	if err := func() error {
		if s.BouncePhase.Set {
			if err := func() error {
				if err := s.BouncePhase.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bounce_phase",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TransactionType) Validate() error {
	switch s {
	case "TransOrd":
		return nil
	case "TransTickTock":
		return nil
	case "TransSplitPrepare":
		return nil
	case "TransSplitInstall":
		return nil
	case "TransMergePrepare":
		return nil
	case "TransMergeInstall":
		return nil
	case "TransStorage":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Transactions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Transactions == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Transactions {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transactions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TvmStackRecord) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Tuple {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tuple",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TvmStackRecordType) Validate() error {
	switch s {
	case "cell":
		return nil
	case "num":
		return nil
	case "nan":
		return nil
	case "null":
		return nil
	case "tuple":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Validators) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Validators == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "validators",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ValidatorsSet) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.List == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s WalletDNS) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Names == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "names",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
