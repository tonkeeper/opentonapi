// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/AccStatusChange
type AccStatusChange string

const (
	AccStatusChangeAcstUnchanged AccStatusChange = "acst_unchanged"
	AccStatusChangeAcstFrozen    AccStatusChange = "acst_frozen"
	AccStatusChangeAcstDeleted   AccStatusChange = "acst_deleted"
)

// Ref: #/components/schemas/Account
type Account struct {
	Address string `json:"address"`
}

// GetAddress returns the value of Address.
func (s Account) GetAddress() string {
	return s.Address
}

// SetAddress sets the value of Address.
func (s *Account) SetAddress(val string) {
	s.Address = val
}

func (*Account) getAccountRes() {}

// Ref: #/components/schemas/AccountAddress
type AccountAddress struct {
	Address string    `json:"address"`
	Name    OptString `json:"name"`
	IsScam  bool      `json:"is_scam"`
	Icon    OptString `json:"icon"`
}

// GetAddress returns the value of Address.
func (s AccountAddress) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s AccountAddress) GetName() OptString {
	return s.Name
}

// GetIsScam returns the value of IsScam.
func (s AccountAddress) GetIsScam() bool {
	return s.IsScam
}

// GetIcon returns the value of Icon.
func (s AccountAddress) GetIcon() OptString {
	return s.Icon
}

// SetAddress sets the value of Address.
func (s *AccountAddress) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *AccountAddress) SetName(val OptString) {
	s.Name = val
}

// SetIsScam sets the value of IsScam.
func (s *AccountAddress) SetIsScam(val bool) {
	s.IsScam = val
}

// SetIcon sets the value of Icon.
func (s *AccountAddress) SetIcon(val OptString) {
	s.Icon = val
}

// Ref: #/components/schemas/AccountEvent
type AccountEvent struct {
	EventID   string         `json:"event_id"`
	Account   AccountAddress `json:"account"`
	Timestamp int64          `json:"timestamp"`
	Actions   []Action       `json:"actions"`
	Fee       Fee            `json:"fee"`
	// Scam.
	IsScam bool  `json:"is_scam"`
	Lt     int64 `json:"lt"`
	// Event is not finished yet. Transactions still happening.
	InProgress bool `json:"in_progress"`
}

// GetEventID returns the value of EventID.
func (s AccountEvent) GetEventID() string {
	return s.EventID
}

// GetAccount returns the value of Account.
func (s AccountEvent) GetAccount() AccountAddress {
	return s.Account
}

// GetTimestamp returns the value of Timestamp.
func (s AccountEvent) GetTimestamp() int64 {
	return s.Timestamp
}

// GetActions returns the value of Actions.
func (s AccountEvent) GetActions() []Action {
	return s.Actions
}

// GetFee returns the value of Fee.
func (s AccountEvent) GetFee() Fee {
	return s.Fee
}

// GetIsScam returns the value of IsScam.
func (s AccountEvent) GetIsScam() bool {
	return s.IsScam
}

// GetLt returns the value of Lt.
func (s AccountEvent) GetLt() int64 {
	return s.Lt
}

// GetInProgress returns the value of InProgress.
func (s AccountEvent) GetInProgress() bool {
	return s.InProgress
}

// SetEventID sets the value of EventID.
func (s *AccountEvent) SetEventID(val string) {
	s.EventID = val
}

// SetAccount sets the value of Account.
func (s *AccountEvent) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetTimestamp sets the value of Timestamp.
func (s *AccountEvent) SetTimestamp(val int64) {
	s.Timestamp = val
}

// SetActions sets the value of Actions.
func (s *AccountEvent) SetActions(val []Action) {
	s.Actions = val
}

// SetFee sets the value of Fee.
func (s *AccountEvent) SetFee(val Fee) {
	s.Fee = val
}

// SetIsScam sets the value of IsScam.
func (s *AccountEvent) SetIsScam(val bool) {
	s.IsScam = val
}

// SetLt sets the value of Lt.
func (s *AccountEvent) SetLt(val int64) {
	s.Lt = val
}

// SetInProgress sets the value of InProgress.
func (s *AccountEvent) SetInProgress(val bool) {
	s.InProgress = val
}

func (*AccountEvent) emulateMessageRes() {}

// Ref: #/components/schemas/AccountEvents
type AccountEvents struct {
	Events   []AccountEvent `json:"events"`
	NextFrom OptInt64       `json:"next_from"`
}

// GetEvents returns the value of Events.
func (s AccountEvents) GetEvents() []AccountEvent {
	return s.Events
}

// GetNextFrom returns the value of NextFrom.
func (s AccountEvents) GetNextFrom() OptInt64 {
	return s.NextFrom
}

// SetEvents sets the value of Events.
func (s *AccountEvents) SetEvents(val []AccountEvent) {
	s.Events = val
}

// SetNextFrom sets the value of NextFrom.
func (s *AccountEvents) SetNextFrom(val OptInt64) {
	s.NextFrom = val
}

func (*AccountEvents) getEventsByAccountRes() {}

// Ref: #/components/schemas/AccountStacking
type AccountStacking struct {
	Pools []AccountStakingInfo `json:"pools"`
}

// GetPools returns the value of Pools.
func (s AccountStacking) GetPools() []AccountStakingInfo {
	return s.Pools
}

// SetPools sets the value of Pools.
func (s *AccountStacking) SetPools(val []AccountStakingInfo) {
	s.Pools = val
}

func (*AccountStacking) poolsByNominatorsRes() {}

// Ref: #/components/schemas/AccountStakingInfo
type AccountStakingInfo struct {
	Pool            string `json:"pool"`
	Amount          int64  `json:"amount"`
	PendingDeposit  int64  `json:"pending_deposit"`
	PendingWithdraw int64  `json:"pending_withdraw"`
}

// GetPool returns the value of Pool.
func (s AccountStakingInfo) GetPool() string {
	return s.Pool
}

// GetAmount returns the value of Amount.
func (s AccountStakingInfo) GetAmount() int64 {
	return s.Amount
}

// GetPendingDeposit returns the value of PendingDeposit.
func (s AccountStakingInfo) GetPendingDeposit() int64 {
	return s.PendingDeposit
}

// GetPendingWithdraw returns the value of PendingWithdraw.
func (s AccountStakingInfo) GetPendingWithdraw() int64 {
	return s.PendingWithdraw
}

// SetPool sets the value of Pool.
func (s *AccountStakingInfo) SetPool(val string) {
	s.Pool = val
}

// SetAmount sets the value of Amount.
func (s *AccountStakingInfo) SetAmount(val int64) {
	s.Amount = val
}

// SetPendingDeposit sets the value of PendingDeposit.
func (s *AccountStakingInfo) SetPendingDeposit(val int64) {
	s.PendingDeposit = val
}

// SetPendingWithdraw sets the value of PendingWithdraw.
func (s *AccountStakingInfo) SetPendingWithdraw(val int64) {
	s.PendingWithdraw = val
}

// Ref: #/components/schemas/AccountStatus
type AccountStatus string

const (
	AccountStatusNonexist AccountStatus = "nonexist"
	AccountStatusUninit   AccountStatus = "uninit"
	AccountStatusActive   AccountStatus = "active"
	AccountStatusFrozen   AccountStatus = "frozen"
)

// Ref: #/components/schemas/AccountStorageInfo
type AccountStorageInfo struct {
	UsedCells       uint64 `json:"used_cells"`
	UsedBits        uint64 `json:"used_bits"`
	UsedPublicCells uint64 `json:"used_public_cells"`
	LastPaid        int64  `json:"last_paid"`
	DuePayment      int64  `json:"due_payment"`
}

// GetUsedCells returns the value of UsedCells.
func (s AccountStorageInfo) GetUsedCells() uint64 {
	return s.UsedCells
}

// GetUsedBits returns the value of UsedBits.
func (s AccountStorageInfo) GetUsedBits() uint64 {
	return s.UsedBits
}

// GetUsedPublicCells returns the value of UsedPublicCells.
func (s AccountStorageInfo) GetUsedPublicCells() uint64 {
	return s.UsedPublicCells
}

// GetLastPaid returns the value of LastPaid.
func (s AccountStorageInfo) GetLastPaid() int64 {
	return s.LastPaid
}

// GetDuePayment returns the value of DuePayment.
func (s AccountStorageInfo) GetDuePayment() int64 {
	return s.DuePayment
}

// SetUsedCells sets the value of UsedCells.
func (s *AccountStorageInfo) SetUsedCells(val uint64) {
	s.UsedCells = val
}

// SetUsedBits sets the value of UsedBits.
func (s *AccountStorageInfo) SetUsedBits(val uint64) {
	s.UsedBits = val
}

// SetUsedPublicCells sets the value of UsedPublicCells.
func (s *AccountStorageInfo) SetUsedPublicCells(val uint64) {
	s.UsedPublicCells = val
}

// SetLastPaid sets the value of LastPaid.
func (s *AccountStorageInfo) SetLastPaid(val int64) {
	s.LastPaid = val
}

// SetDuePayment sets the value of DuePayment.
func (s *AccountStorageInfo) SetDuePayment(val int64) {
	s.DuePayment = val
}

// Ref: #/components/schemas/Action
type Action struct {
	Type            ActionType               `json:"type"`
	Status          ActionStatus             `json:"status"`
	TonTransfer     OptTonTransferAction     `json:"TonTransfer"`
	ContractDeploy  OptContractDeployAction  `json:"ContractDeploy"`
	JettonTransfer  OptJettonTransferAction  `json:"JettonTransfer"`
	NftItemTransfer OptNftItemTransferAction `json:"NftItemTransfer"`
	Subscribe       OptSubscriptionAction    `json:"Subscribe"`
	UnSubscribe     OptUnSubscriptionAction  `json:"UnSubscribe"`
	AuctionBid      OptAuctionBidAction      `json:"AuctionBid"`
	NftPurchase     OptNftPurchaseAction     `json:"NftPurchase"`
	SimplePreview   ActionSimplePreview      `json:"simple_preview"`
}

// GetType returns the value of Type.
func (s Action) GetType() ActionType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s Action) GetStatus() ActionStatus {
	return s.Status
}

// GetTonTransfer returns the value of TonTransfer.
func (s Action) GetTonTransfer() OptTonTransferAction {
	return s.TonTransfer
}

// GetContractDeploy returns the value of ContractDeploy.
func (s Action) GetContractDeploy() OptContractDeployAction {
	return s.ContractDeploy
}

// GetJettonTransfer returns the value of JettonTransfer.
func (s Action) GetJettonTransfer() OptJettonTransferAction {
	return s.JettonTransfer
}

// GetNftItemTransfer returns the value of NftItemTransfer.
func (s Action) GetNftItemTransfer() OptNftItemTransferAction {
	return s.NftItemTransfer
}

// GetSubscribe returns the value of Subscribe.
func (s Action) GetSubscribe() OptSubscriptionAction {
	return s.Subscribe
}

// GetUnSubscribe returns the value of UnSubscribe.
func (s Action) GetUnSubscribe() OptUnSubscriptionAction {
	return s.UnSubscribe
}

// GetAuctionBid returns the value of AuctionBid.
func (s Action) GetAuctionBid() OptAuctionBidAction {
	return s.AuctionBid
}

// GetNftPurchase returns the value of NftPurchase.
func (s Action) GetNftPurchase() OptNftPurchaseAction {
	return s.NftPurchase
}

// GetSimplePreview returns the value of SimplePreview.
func (s Action) GetSimplePreview() ActionSimplePreview {
	return s.SimplePreview
}

// SetType sets the value of Type.
func (s *Action) SetType(val ActionType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *Action) SetStatus(val ActionStatus) {
	s.Status = val
}

// SetTonTransfer sets the value of TonTransfer.
func (s *Action) SetTonTransfer(val OptTonTransferAction) {
	s.TonTransfer = val
}

// SetContractDeploy sets the value of ContractDeploy.
func (s *Action) SetContractDeploy(val OptContractDeployAction) {
	s.ContractDeploy = val
}

// SetJettonTransfer sets the value of JettonTransfer.
func (s *Action) SetJettonTransfer(val OptJettonTransferAction) {
	s.JettonTransfer = val
}

// SetNftItemTransfer sets the value of NftItemTransfer.
func (s *Action) SetNftItemTransfer(val OptNftItemTransferAction) {
	s.NftItemTransfer = val
}

// SetSubscribe sets the value of Subscribe.
func (s *Action) SetSubscribe(val OptSubscriptionAction) {
	s.Subscribe = val
}

// SetUnSubscribe sets the value of UnSubscribe.
func (s *Action) SetUnSubscribe(val OptUnSubscriptionAction) {
	s.UnSubscribe = val
}

// SetAuctionBid sets the value of AuctionBid.
func (s *Action) SetAuctionBid(val OptAuctionBidAction) {
	s.AuctionBid = val
}

// SetNftPurchase sets the value of NftPurchase.
func (s *Action) SetNftPurchase(val OptNftPurchaseAction) {
	s.NftPurchase = val
}

// SetSimplePreview sets the value of SimplePreview.
func (s *Action) SetSimplePreview(val ActionSimplePreview) {
	s.SimplePreview = val
}

// Ref: #/components/schemas/ActionPhase
type ActionPhase struct {
	Success        bool  `json:"success"`
	TotalActions   int32 `json:"total_actions"`
	SkippedActions int32 `json:"skipped_actions"`
	FwdFees        int64 `json:"fwd_fees"`
	TotalFees      int64 `json:"total_fees"`
}

// GetSuccess returns the value of Success.
func (s ActionPhase) GetSuccess() bool {
	return s.Success
}

// GetTotalActions returns the value of TotalActions.
func (s ActionPhase) GetTotalActions() int32 {
	return s.TotalActions
}

// GetSkippedActions returns the value of SkippedActions.
func (s ActionPhase) GetSkippedActions() int32 {
	return s.SkippedActions
}

// GetFwdFees returns the value of FwdFees.
func (s ActionPhase) GetFwdFees() int64 {
	return s.FwdFees
}

// GetTotalFees returns the value of TotalFees.
func (s ActionPhase) GetTotalFees() int64 {
	return s.TotalFees
}

// SetSuccess sets the value of Success.
func (s *ActionPhase) SetSuccess(val bool) {
	s.Success = val
}

// SetTotalActions sets the value of TotalActions.
func (s *ActionPhase) SetTotalActions(val int32) {
	s.TotalActions = val
}

// SetSkippedActions sets the value of SkippedActions.
func (s *ActionPhase) SetSkippedActions(val int32) {
	s.SkippedActions = val
}

// SetFwdFees sets the value of FwdFees.
func (s *ActionPhase) SetFwdFees(val int64) {
	s.FwdFees = val
}

// SetTotalFees sets the value of TotalFees.
func (s *ActionPhase) SetTotalFees(val int64) {
	s.TotalFees = val
}

// Ref: #/components/schemas/ActionSimplePreview
type ActionSimplePreview struct {
	Name             string    `json:"name"`
	ShortDescription string    `json:"short_description"`
	FullDescription  string    `json:"full_description"`
	Image            OptString `json:"image"`
}

// GetName returns the value of Name.
func (s ActionSimplePreview) GetName() string {
	return s.Name
}

// GetShortDescription returns the value of ShortDescription.
func (s ActionSimplePreview) GetShortDescription() string {
	return s.ShortDescription
}

// GetFullDescription returns the value of FullDescription.
func (s ActionSimplePreview) GetFullDescription() string {
	return s.FullDescription
}

// GetImage returns the value of Image.
func (s ActionSimplePreview) GetImage() OptString {
	return s.Image
}

// SetName sets the value of Name.
func (s *ActionSimplePreview) SetName(val string) {
	s.Name = val
}

// SetShortDescription sets the value of ShortDescription.
func (s *ActionSimplePreview) SetShortDescription(val string) {
	s.ShortDescription = val
}

// SetFullDescription sets the value of FullDescription.
func (s *ActionSimplePreview) SetFullDescription(val string) {
	s.FullDescription = val
}

// SetImage sets the value of Image.
func (s *ActionSimplePreview) SetImage(val OptString) {
	s.Image = val
}

type ActionStatus string

const (
	ActionStatusOk      ActionStatus = "ok"
	ActionStatusFailed  ActionStatus = "failed"
	ActionStatusPending ActionStatus = "pending"
)

type ActionType string

const (
	ActionTypeTonTransfer     ActionType = "TonTransfer"
	ActionTypeJettonTransfer  ActionType = "JettonTransfer"
	ActionTypeNftItemTransfer ActionType = "NftItemTransfer"
	ActionTypeContractDeploy  ActionType = "ContractDeploy"
	ActionTypeSubscribe       ActionType = "Subscribe"
	ActionTypeUnSubscribe     ActionType = "UnSubscribe"
	ActionTypeAuctionBid      ActionType = "AuctionBid"
	ActionTypeNftPurchase     ActionType = "NftPurchase"
	ActionTypeUnknown         ActionType = "Unknown"
)

// Ref: #/components/schemas/Auction
type Auction struct {
	Domain string `json:"domain"`
	Owner  string `json:"owner"`
	Price  int64  `json:"price"`
	Bids   int64  `json:"bids"`
	Date   int64  `json:"date"`
}

// GetDomain returns the value of Domain.
func (s Auction) GetDomain() string {
	return s.Domain
}

// GetOwner returns the value of Owner.
func (s Auction) GetOwner() string {
	return s.Owner
}

// GetPrice returns the value of Price.
func (s Auction) GetPrice() int64 {
	return s.Price
}

// GetBids returns the value of Bids.
func (s Auction) GetBids() int64 {
	return s.Bids
}

// GetDate returns the value of Date.
func (s Auction) GetDate() int64 {
	return s.Date
}

// SetDomain sets the value of Domain.
func (s *Auction) SetDomain(val string) {
	s.Domain = val
}

// SetOwner sets the value of Owner.
func (s *Auction) SetOwner(val string) {
	s.Owner = val
}

// SetPrice sets the value of Price.
func (s *Auction) SetPrice(val int64) {
	s.Price = val
}

// SetBids sets the value of Bids.
func (s *Auction) SetBids(val int64) {
	s.Bids = val
}

// SetDate sets the value of Date.
func (s *Auction) SetDate(val int64) {
	s.Date = val
}

// Ref: #/components/schemas/AuctionBidAction
type AuctionBidAction struct {
	AuctionType AuctionBidActionAuctionType `json:"auction_type"`
	Amount      Price                       `json:"amount"`
	Nft         OptNftItem                  `json:"nft"`
	Beneficiary AccountAddress              `json:"beneficiary"`
	Bidder      AccountAddress              `json:"bidder"`
}

// GetAuctionType returns the value of AuctionType.
func (s AuctionBidAction) GetAuctionType() AuctionBidActionAuctionType {
	return s.AuctionType
}

// GetAmount returns the value of Amount.
func (s AuctionBidAction) GetAmount() Price {
	return s.Amount
}

// GetNft returns the value of Nft.
func (s AuctionBidAction) GetNft() OptNftItem {
	return s.Nft
}

// GetBeneficiary returns the value of Beneficiary.
func (s AuctionBidAction) GetBeneficiary() AccountAddress {
	return s.Beneficiary
}

// GetBidder returns the value of Bidder.
func (s AuctionBidAction) GetBidder() AccountAddress {
	return s.Bidder
}

// SetAuctionType sets the value of AuctionType.
func (s *AuctionBidAction) SetAuctionType(val AuctionBidActionAuctionType) {
	s.AuctionType = val
}

// SetAmount sets the value of Amount.
func (s *AuctionBidAction) SetAmount(val Price) {
	s.Amount = val
}

// SetNft sets the value of Nft.
func (s *AuctionBidAction) SetNft(val OptNftItem) {
	s.Nft = val
}

// SetBeneficiary sets the value of Beneficiary.
func (s *AuctionBidAction) SetBeneficiary(val AccountAddress) {
	s.Beneficiary = val
}

// SetBidder sets the value of Bidder.
func (s *AuctionBidAction) SetBidder(val AccountAddress) {
	s.Bidder = val
}

type AuctionBidActionAuctionType string

const (
	AuctionBidActionAuctionTypeDNSTon   AuctionBidActionAuctionType = "DNS.ton"
	AuctionBidActionAuctionTypeDNSTg    AuctionBidActionAuctionType = "DNS.tg"
	AuctionBidActionAuctionTypeNUMBERTg AuctionBidActionAuctionType = "NUMBER.tg"
	AuctionBidActionAuctionTypeGetgems  AuctionBidActionAuctionType = "getgems"
)

// Ref: #/components/schemas/Auctions
type Auctions struct {
	Data  []Auction `json:"data"`
	Total int64     `json:"total"`
}

// GetData returns the value of Data.
func (s Auctions) GetData() []Auction {
	return s.Data
}

// GetTotal returns the value of Total.
func (s Auctions) GetTotal() int64 {
	return s.Total
}

// SetData sets the value of Data.
func (s *Auctions) SetData(val []Auction) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *Auctions) SetTotal(val int64) {
	s.Total = val
}

func (*Auctions) getAllAuctionsRes() {}

type BadRequest struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s BadRequest) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *BadRequest) SetError(val string) {
	s.Error = val
}

func (*BadRequest) dnsBackResolveRes()            {}
func (*BadRequest) dnsResolveRes()                {}
func (*BadRequest) emulateMessageRes()            {}
func (*BadRequest) execGetMethodRes()             {}
func (*BadRequest) getAccountRes()                {}
func (*BadRequest) getAccountTransactionsRes()    {}
func (*BadRequest) getBlockRes()                  {}
func (*BadRequest) getDomainBidsRes()             {}
func (*BadRequest) getEventRes()                  {}
func (*BadRequest) getEventsByAccountRes()        {}
func (*BadRequest) getJettonInfoRes()             {}
func (*BadRequest) getJettonsBalancesRes()        {}
func (*BadRequest) getNftCollectionRes()          {}
func (*BadRequest) getNftItemsByAddressesRes()    {}
func (*BadRequest) getNftItemsByOwnerRes()        {}
func (*BadRequest) getRawAccountRes()             {}
func (*BadRequest) getSubscriptionsByAccountRes() {}
func (*BadRequest) getTraceRes()                  {}
func (*BadRequest) getTracesByAccountRes()        {}
func (*BadRequest) getTransactionRes()            {}
func (*BadRequest) getTransactionsRes()           {}
func (*BadRequest) poolsByNominatorsRes()         {}
func (*BadRequest) sendMessageRes()               {}
func (*BadRequest) stackingPoolInfoRes()          {}
func (*BadRequest) stackingPoolsRes()             {}

// Ref: #/components/schemas/Block
type Block struct {
	WorkchainID             int32     `json:"workchain_id"`
	Shard                   string    `json:"shard"`
	Seqno                   int32     `json:"seqno"`
	RootHash                string    `json:"root_hash"`
	FileHash                string    `json:"file_hash"`
	GlobalID                int32     `json:"global_id"`
	Version                 int32     `json:"version"`
	AfterMerge              bool      `json:"after_merge"`
	BeforeSplit             bool      `json:"before_split"`
	AfterSplit              bool      `json:"after_split"`
	WantSplit               bool      `json:"want_split"`
	WantMerge               bool      `json:"want_merge"`
	KeyBlock                bool      `json:"key_block"`
	GenUtime                int64     `json:"gen_utime"`
	StartLt                 int64     `json:"start_lt"`
	EndLt                   int64     `json:"end_lt"`
	VertSeqno               int32     `json:"vert_seqno"`
	GenCatchainSeqno        int32     `json:"gen_catchain_seqno"`
	MinRefMcSeqno           int32     `json:"min_ref_mc_seqno"`
	PrevKeyBlockSeqno       int32     `json:"prev_key_block_seqno"`
	GenSoftwareVersion      OptInt32  `json:"gen_software_version"`
	GenSoftwareCapabilities OptInt64  `json:"gen_software_capabilities"`
	MasterRef               OptString `json:"master_ref"`
	PrevRefs                []string  `json:"prev_refs"`
	InMsgDescrLength        int64     `json:"in_msg_descr_length"`
	OutMsgDescrLength       int64     `json:"out_msg_descr_length"`
	RandSeed                string    `json:"rand_seed"`
	CreatedBy               string    `json:"created_by"`
}

// GetWorkchainID returns the value of WorkchainID.
func (s Block) GetWorkchainID() int32 {
	return s.WorkchainID
}

// GetShard returns the value of Shard.
func (s Block) GetShard() string {
	return s.Shard
}

// GetSeqno returns the value of Seqno.
func (s Block) GetSeqno() int32 {
	return s.Seqno
}

// GetRootHash returns the value of RootHash.
func (s Block) GetRootHash() string {
	return s.RootHash
}

// GetFileHash returns the value of FileHash.
func (s Block) GetFileHash() string {
	return s.FileHash
}

// GetGlobalID returns the value of GlobalID.
func (s Block) GetGlobalID() int32 {
	return s.GlobalID
}

// GetVersion returns the value of Version.
func (s Block) GetVersion() int32 {
	return s.Version
}

// GetAfterMerge returns the value of AfterMerge.
func (s Block) GetAfterMerge() bool {
	return s.AfterMerge
}

// GetBeforeSplit returns the value of BeforeSplit.
func (s Block) GetBeforeSplit() bool {
	return s.BeforeSplit
}

// GetAfterSplit returns the value of AfterSplit.
func (s Block) GetAfterSplit() bool {
	return s.AfterSplit
}

// GetWantSplit returns the value of WantSplit.
func (s Block) GetWantSplit() bool {
	return s.WantSplit
}

// GetWantMerge returns the value of WantMerge.
func (s Block) GetWantMerge() bool {
	return s.WantMerge
}

// GetKeyBlock returns the value of KeyBlock.
func (s Block) GetKeyBlock() bool {
	return s.KeyBlock
}

// GetGenUtime returns the value of GenUtime.
func (s Block) GetGenUtime() int64 {
	return s.GenUtime
}

// GetStartLt returns the value of StartLt.
func (s Block) GetStartLt() int64 {
	return s.StartLt
}

// GetEndLt returns the value of EndLt.
func (s Block) GetEndLt() int64 {
	return s.EndLt
}

// GetVertSeqno returns the value of VertSeqno.
func (s Block) GetVertSeqno() int32 {
	return s.VertSeqno
}

// GetGenCatchainSeqno returns the value of GenCatchainSeqno.
func (s Block) GetGenCatchainSeqno() int32 {
	return s.GenCatchainSeqno
}

// GetMinRefMcSeqno returns the value of MinRefMcSeqno.
func (s Block) GetMinRefMcSeqno() int32 {
	return s.MinRefMcSeqno
}

// GetPrevKeyBlockSeqno returns the value of PrevKeyBlockSeqno.
func (s Block) GetPrevKeyBlockSeqno() int32 {
	return s.PrevKeyBlockSeqno
}

// GetGenSoftwareVersion returns the value of GenSoftwareVersion.
func (s Block) GetGenSoftwareVersion() OptInt32 {
	return s.GenSoftwareVersion
}

// GetGenSoftwareCapabilities returns the value of GenSoftwareCapabilities.
func (s Block) GetGenSoftwareCapabilities() OptInt64 {
	return s.GenSoftwareCapabilities
}

// GetMasterRef returns the value of MasterRef.
func (s Block) GetMasterRef() OptString {
	return s.MasterRef
}

// GetPrevRefs returns the value of PrevRefs.
func (s Block) GetPrevRefs() []string {
	return s.PrevRefs
}

// GetInMsgDescrLength returns the value of InMsgDescrLength.
func (s Block) GetInMsgDescrLength() int64 {
	return s.InMsgDescrLength
}

// GetOutMsgDescrLength returns the value of OutMsgDescrLength.
func (s Block) GetOutMsgDescrLength() int64 {
	return s.OutMsgDescrLength
}

// GetRandSeed returns the value of RandSeed.
func (s Block) GetRandSeed() string {
	return s.RandSeed
}

// GetCreatedBy returns the value of CreatedBy.
func (s Block) GetCreatedBy() string {
	return s.CreatedBy
}

// SetWorkchainID sets the value of WorkchainID.
func (s *Block) SetWorkchainID(val int32) {
	s.WorkchainID = val
}

// SetShard sets the value of Shard.
func (s *Block) SetShard(val string) {
	s.Shard = val
}

// SetSeqno sets the value of Seqno.
func (s *Block) SetSeqno(val int32) {
	s.Seqno = val
}

// SetRootHash sets the value of RootHash.
func (s *Block) SetRootHash(val string) {
	s.RootHash = val
}

// SetFileHash sets the value of FileHash.
func (s *Block) SetFileHash(val string) {
	s.FileHash = val
}

// SetGlobalID sets the value of GlobalID.
func (s *Block) SetGlobalID(val int32) {
	s.GlobalID = val
}

// SetVersion sets the value of Version.
func (s *Block) SetVersion(val int32) {
	s.Version = val
}

// SetAfterMerge sets the value of AfterMerge.
func (s *Block) SetAfterMerge(val bool) {
	s.AfterMerge = val
}

// SetBeforeSplit sets the value of BeforeSplit.
func (s *Block) SetBeforeSplit(val bool) {
	s.BeforeSplit = val
}

// SetAfterSplit sets the value of AfterSplit.
func (s *Block) SetAfterSplit(val bool) {
	s.AfterSplit = val
}

// SetWantSplit sets the value of WantSplit.
func (s *Block) SetWantSplit(val bool) {
	s.WantSplit = val
}

// SetWantMerge sets the value of WantMerge.
func (s *Block) SetWantMerge(val bool) {
	s.WantMerge = val
}

// SetKeyBlock sets the value of KeyBlock.
func (s *Block) SetKeyBlock(val bool) {
	s.KeyBlock = val
}

// SetGenUtime sets the value of GenUtime.
func (s *Block) SetGenUtime(val int64) {
	s.GenUtime = val
}

// SetStartLt sets the value of StartLt.
func (s *Block) SetStartLt(val int64) {
	s.StartLt = val
}

// SetEndLt sets the value of EndLt.
func (s *Block) SetEndLt(val int64) {
	s.EndLt = val
}

// SetVertSeqno sets the value of VertSeqno.
func (s *Block) SetVertSeqno(val int32) {
	s.VertSeqno = val
}

// SetGenCatchainSeqno sets the value of GenCatchainSeqno.
func (s *Block) SetGenCatchainSeqno(val int32) {
	s.GenCatchainSeqno = val
}

// SetMinRefMcSeqno sets the value of MinRefMcSeqno.
func (s *Block) SetMinRefMcSeqno(val int32) {
	s.MinRefMcSeqno = val
}

// SetPrevKeyBlockSeqno sets the value of PrevKeyBlockSeqno.
func (s *Block) SetPrevKeyBlockSeqno(val int32) {
	s.PrevKeyBlockSeqno = val
}

// SetGenSoftwareVersion sets the value of GenSoftwareVersion.
func (s *Block) SetGenSoftwareVersion(val OptInt32) {
	s.GenSoftwareVersion = val
}

// SetGenSoftwareCapabilities sets the value of GenSoftwareCapabilities.
func (s *Block) SetGenSoftwareCapabilities(val OptInt64) {
	s.GenSoftwareCapabilities = val
}

// SetMasterRef sets the value of MasterRef.
func (s *Block) SetMasterRef(val OptString) {
	s.MasterRef = val
}

// SetPrevRefs sets the value of PrevRefs.
func (s *Block) SetPrevRefs(val []string) {
	s.PrevRefs = val
}

// SetInMsgDescrLength sets the value of InMsgDescrLength.
func (s *Block) SetInMsgDescrLength(val int64) {
	s.InMsgDescrLength = val
}

// SetOutMsgDescrLength sets the value of OutMsgDescrLength.
func (s *Block) SetOutMsgDescrLength(val int64) {
	s.OutMsgDescrLength = val
}

// SetRandSeed sets the value of RandSeed.
func (s *Block) SetRandSeed(val string) {
	s.RandSeed = val
}

// SetCreatedBy sets the value of CreatedBy.
func (s *Block) SetCreatedBy(val string) {
	s.CreatedBy = val
}

func (*Block) getBlockRes()           {}
func (*Block) getMasterchainHeadRes() {}

// Ref: #/components/schemas/BouncePhaseType
type BouncePhaseType string

const (
	BouncePhaseTypeTrPhaseBounceNegfunds BouncePhaseType = "TrPhaseBounceNegfunds"
	BouncePhaseTypeTrPhaseBounceNofunds  BouncePhaseType = "TrPhaseBounceNofunds"
	BouncePhaseTypeTrPhaseBounceOk       BouncePhaseType = "TrPhaseBounceOk"
)

// Ref: #/components/schemas/ComputePhase
type ComputePhase struct {
	Skipped    bool                 `json:"skipped"`
	SkipReason OptComputeSkipReason `json:"skip_reason"`
	Success    OptBool              `json:"success"`
	GasFees    OptInt64             `json:"gas_fees"`
	GasUsed    OptString            `json:"gas_used"`
	VMSteps    OptInt32             `json:"vm_steps"`
	ExitCode   OptInt32             `json:"exit_code"`
}

// GetSkipped returns the value of Skipped.
func (s ComputePhase) GetSkipped() bool {
	return s.Skipped
}

// GetSkipReason returns the value of SkipReason.
func (s ComputePhase) GetSkipReason() OptComputeSkipReason {
	return s.SkipReason
}

// GetSuccess returns the value of Success.
func (s ComputePhase) GetSuccess() OptBool {
	return s.Success
}

// GetGasFees returns the value of GasFees.
func (s ComputePhase) GetGasFees() OptInt64 {
	return s.GasFees
}

// GetGasUsed returns the value of GasUsed.
func (s ComputePhase) GetGasUsed() OptString {
	return s.GasUsed
}

// GetVMSteps returns the value of VMSteps.
func (s ComputePhase) GetVMSteps() OptInt32 {
	return s.VMSteps
}

// GetExitCode returns the value of ExitCode.
func (s ComputePhase) GetExitCode() OptInt32 {
	return s.ExitCode
}

// SetSkipped sets the value of Skipped.
func (s *ComputePhase) SetSkipped(val bool) {
	s.Skipped = val
}

// SetSkipReason sets the value of SkipReason.
func (s *ComputePhase) SetSkipReason(val OptComputeSkipReason) {
	s.SkipReason = val
}

// SetSuccess sets the value of Success.
func (s *ComputePhase) SetSuccess(val OptBool) {
	s.Success = val
}

// SetGasFees sets the value of GasFees.
func (s *ComputePhase) SetGasFees(val OptInt64) {
	s.GasFees = val
}

// SetGasUsed sets the value of GasUsed.
func (s *ComputePhase) SetGasUsed(val OptString) {
	s.GasUsed = val
}

// SetVMSteps sets the value of VMSteps.
func (s *ComputePhase) SetVMSteps(val OptInt32) {
	s.VMSteps = val
}

// SetExitCode sets the value of ExitCode.
func (s *ComputePhase) SetExitCode(val OptInt32) {
	s.ExitCode = val
}

// Ref: #/components/schemas/ComputeSkipReason
type ComputeSkipReason string

const (
	ComputeSkipReasonCskipNoState  ComputeSkipReason = "cskip_no_state"
	ComputeSkipReasonCskipBadState ComputeSkipReason = "cskip_bad_state"
	ComputeSkipReasonCskipNoGas    ComputeSkipReason = "cskip_no_gas"
)

// Ref: #/components/schemas/Config
type Config struct {
	// Config boc in base64 format.
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s Config) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *Config) SetBoc(val string) {
	s.Boc = val
}

func (*Config) getConfigRes() {}

// Ref: #/components/schemas/ContractDeployAction
type ContractDeployAction struct {
	Address    string         `json:"address"`
	Deployer   AccountAddress `json:"deployer"`
	Interfaces []string       `json:"interfaces"`
}

// GetAddress returns the value of Address.
func (s ContractDeployAction) GetAddress() string {
	return s.Address
}

// GetDeployer returns the value of Deployer.
func (s ContractDeployAction) GetDeployer() AccountAddress {
	return s.Deployer
}

// GetInterfaces returns the value of Interfaces.
func (s ContractDeployAction) GetInterfaces() []string {
	return s.Interfaces
}

// SetAddress sets the value of Address.
func (s *ContractDeployAction) SetAddress(val string) {
	s.Address = val
}

// SetDeployer sets the value of Deployer.
func (s *ContractDeployAction) SetDeployer(val AccountAddress) {
	s.Deployer = val
}

// SetInterfaces sets the value of Interfaces.
func (s *ContractDeployAction) SetInterfaces(val []string) {
	s.Interfaces = val
}

// Ref: #/components/schemas/CreditPhase
type CreditPhase struct {
	FeesCollected int64 `json:"fees_collected"`
	Credit        int64 `json:"credit"`
}

// GetFeesCollected returns the value of FeesCollected.
func (s CreditPhase) GetFeesCollected() int64 {
	return s.FeesCollected
}

// GetCredit returns the value of Credit.
func (s CreditPhase) GetCredit() int64 {
	return s.Credit
}

// SetFeesCollected sets the value of FeesCollected.
func (s *CreditPhase) SetFeesCollected(val int64) {
	s.FeesCollected = val
}

// SetCredit sets the value of Credit.
func (s *CreditPhase) SetCredit(val int64) {
	s.Credit = val
}

// Ref: #/components/schemas/DnsRecord
type DnsRecord struct {
	Wallet       OptWalletDNS `json:"wallet"`
	NextResolver OptString    `json:"next_resolver"`
	Site         []string     `json:"site"`
}

// GetWallet returns the value of Wallet.
func (s DnsRecord) GetWallet() OptWalletDNS {
	return s.Wallet
}

// GetNextResolver returns the value of NextResolver.
func (s DnsRecord) GetNextResolver() OptString {
	return s.NextResolver
}

// GetSite returns the value of Site.
func (s DnsRecord) GetSite() []string {
	return s.Site
}

// SetWallet sets the value of Wallet.
func (s *DnsRecord) SetWallet(val OptWalletDNS) {
	s.Wallet = val
}

// SetNextResolver sets the value of NextResolver.
func (s *DnsRecord) SetNextResolver(val OptString) {
	s.NextResolver = val
}

// SetSite sets the value of Site.
func (s *DnsRecord) SetSite(val []string) {
	s.Site = val
}

func (*DnsRecord) dnsResolveRes() {}

// Ref: #/components/schemas/DomainBid
type DomainBid struct {
	Success bool           `json:"success"`
	Value   uint64         `json:"value"`
	TxTime  int64          `json:"txTime"`
	TxHash  string         `json:"txHash"`
	Bidder  AccountAddress `json:"bidder"`
}

// GetSuccess returns the value of Success.
func (s DomainBid) GetSuccess() bool {
	return s.Success
}

// GetValue returns the value of Value.
func (s DomainBid) GetValue() uint64 {
	return s.Value
}

// GetTxTime returns the value of TxTime.
func (s DomainBid) GetTxTime() int64 {
	return s.TxTime
}

// GetTxHash returns the value of TxHash.
func (s DomainBid) GetTxHash() string {
	return s.TxHash
}

// GetBidder returns the value of Bidder.
func (s DomainBid) GetBidder() AccountAddress {
	return s.Bidder
}

// SetSuccess sets the value of Success.
func (s *DomainBid) SetSuccess(val bool) {
	s.Success = val
}

// SetValue sets the value of Value.
func (s *DomainBid) SetValue(val uint64) {
	s.Value = val
}

// SetTxTime sets the value of TxTime.
func (s *DomainBid) SetTxTime(val int64) {
	s.TxTime = val
}

// SetTxHash sets the value of TxHash.
func (s *DomainBid) SetTxHash(val string) {
	s.TxHash = val
}

// SetBidder sets the value of Bidder.
func (s *DomainBid) SetBidder(val AccountAddress) {
	s.Bidder = val
}

// Ref: #/components/schemas/DomainBids
type DomainBids struct {
	Data []DomainBid `json:"data"`
}

// GetData returns the value of Data.
func (s DomainBids) GetData() []DomainBid {
	return s.Data
}

// SetData sets the value of Data.
func (s *DomainBids) SetData(val []DomainBid) {
	s.Data = val
}

func (*DomainBids) getDomainBidsRes() {}

// Ref: #/components/schemas/DomainNames
type DomainNames struct {
	Domains []string `json:"domains"`
}

// GetDomains returns the value of Domains.
func (s DomainNames) GetDomains() []string {
	return s.Domains
}

// SetDomains sets the value of Domains.
func (s *DomainNames) SetDomains(val []string) {
	s.Domains = val
}

func (*DomainNames) dnsBackResolveRes() {}

type EmulateMessageReq struct {
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s EmulateMessageReq) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *EmulateMessageReq) SetBoc(val string) {
	s.Boc = val
}

// Ref: #/components/schemas/Event
type Event struct {
	EventID   string   `json:"event_id"`
	Timestamp int64    `json:"timestamp"`
	Actions   []Action `json:"actions"`
	Fees      []Fee    `json:"fees"`
	// Scam.
	IsScam bool  `json:"is_scam"`
	Lt     int64 `json:"lt"`
	// Event is not finished yet. Transactions still happening.
	InProgress bool `json:"in_progress"`
}

// GetEventID returns the value of EventID.
func (s Event) GetEventID() string {
	return s.EventID
}

// GetTimestamp returns the value of Timestamp.
func (s Event) GetTimestamp() int64 {
	return s.Timestamp
}

// GetActions returns the value of Actions.
func (s Event) GetActions() []Action {
	return s.Actions
}

// GetFees returns the value of Fees.
func (s Event) GetFees() []Fee {
	return s.Fees
}

// GetIsScam returns the value of IsScam.
func (s Event) GetIsScam() bool {
	return s.IsScam
}

// GetLt returns the value of Lt.
func (s Event) GetLt() int64 {
	return s.Lt
}

// GetInProgress returns the value of InProgress.
func (s Event) GetInProgress() bool {
	return s.InProgress
}

// SetEventID sets the value of EventID.
func (s *Event) SetEventID(val string) {
	s.EventID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Event) SetTimestamp(val int64) {
	s.Timestamp = val
}

// SetActions sets the value of Actions.
func (s *Event) SetActions(val []Action) {
	s.Actions = val
}

// SetFees sets the value of Fees.
func (s *Event) SetFees(val []Fee) {
	s.Fees = val
}

// SetIsScam sets the value of IsScam.
func (s *Event) SetIsScam(val bool) {
	s.IsScam = val
}

// SetLt sets the value of Lt.
func (s *Event) SetLt(val int64) {
	s.Lt = val
}

// SetInProgress sets the value of InProgress.
func (s *Event) SetInProgress(val bool) {
	s.InProgress = val
}

func (*Event) getEventRes() {}

type ExecGetMethodReq struct{}

// Ref: #/components/schemas/Fee
type Fee struct {
	Account AccountAddress `json:"account"`
	// Gas + rent + deposit - refund.
	Total   int64 `json:"total"`
	Gas     int64 `json:"gas"`
	Rent    int64 `json:"rent"`
	Deposit int64 `json:"deposit"`
	Refund  int64 `json:"refund"`
}

// GetAccount returns the value of Account.
func (s Fee) GetAccount() AccountAddress {
	return s.Account
}

// GetTotal returns the value of Total.
func (s Fee) GetTotal() int64 {
	return s.Total
}

// GetGas returns the value of Gas.
func (s Fee) GetGas() int64 {
	return s.Gas
}

// GetRent returns the value of Rent.
func (s Fee) GetRent() int64 {
	return s.Rent
}

// GetDeposit returns the value of Deposit.
func (s Fee) GetDeposit() int64 {
	return s.Deposit
}

// GetRefund returns the value of Refund.
func (s Fee) GetRefund() int64 {
	return s.Refund
}

// SetAccount sets the value of Account.
func (s *Fee) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetTotal sets the value of Total.
func (s *Fee) SetTotal(val int64) {
	s.Total = val
}

// SetGas sets the value of Gas.
func (s *Fee) SetGas(val int64) {
	s.Gas = val
}

// SetRent sets the value of Rent.
func (s *Fee) SetRent(val int64) {
	s.Rent = val
}

// SetDeposit sets the value of Deposit.
func (s *Fee) SetDeposit(val int64) {
	s.Deposit = val
}

// SetRefund sets the value of Refund.
func (s *Fee) SetRefund(val int64) {
	s.Refund = val
}

// Ref: #/components/schemas/ImagePreview
type ImagePreview struct {
	Resolution string `json:"resolution"`
	URL        string `json:"url"`
}

// GetResolution returns the value of Resolution.
func (s ImagePreview) GetResolution() string {
	return s.Resolution
}

// GetURL returns the value of URL.
func (s ImagePreview) GetURL() string {
	return s.URL
}

// SetResolution sets the value of Resolution.
func (s *ImagePreview) SetResolution(val string) {
	s.Resolution = val
}

// SetURL sets the value of URL.
func (s *ImagePreview) SetURL(val string) {
	s.URL = val
}

type InternalError struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s InternalError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *InternalError) SetError(val string) {
	s.Error = val
}

func (*InternalError) dnsBackResolveRes()            {}
func (*InternalError) dnsResolveRes()                {}
func (*InternalError) emulateMessageRes()            {}
func (*InternalError) execGetMethodRes()             {}
func (*InternalError) getAccountRes()                {}
func (*InternalError) getAccountTransactionsRes()    {}
func (*InternalError) getAllAuctionsRes()            {}
func (*InternalError) getBlockRes()                  {}
func (*InternalError) getConfigRes()                 {}
func (*InternalError) getDomainBidsRes()             {}
func (*InternalError) getEventRes()                  {}
func (*InternalError) getEventsByAccountRes()        {}
func (*InternalError) getJettonInfoRes()             {}
func (*InternalError) getJettonsBalancesRes()        {}
func (*InternalError) getMasterchainHeadRes()        {}
func (*InternalError) getNftCollectionRes()          {}
func (*InternalError) getNftCollectionsRes()         {}
func (*InternalError) getNftItemsByAddressesRes()    {}
func (*InternalError) getNftItemsByOwnerRes()        {}
func (*InternalError) getRawAccountRes()             {}
func (*InternalError) getSubscriptionsByAccountRes() {}
func (*InternalError) getTraceRes()                  {}
func (*InternalError) getTracesByAccountRes()        {}
func (*InternalError) getTransactionRes()            {}
func (*InternalError) getTransactionsRes()           {}
func (*InternalError) getValidatorsRes()             {}
func (*InternalError) poolsByNominatorsRes()         {}
func (*InternalError) sendMessageRes()               {}
func (*InternalError) stackingPoolInfoRes()          {}
func (*InternalError) stackingPoolsRes()             {}

// Ref: #/components/schemas/Jetton
type Jetton struct {
	Address      string                    `json:"address"`
	Name         string                    `json:"name"`
	Symbol       string                    `json:"symbol"`
	Decimals     int                       `json:"decimals"`
	Image        OptString                 `json:"image"`
	Verification OptJettonVerificationType `json:"verification"`
}

// GetAddress returns the value of Address.
func (s Jetton) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s Jetton) GetName() string {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s Jetton) GetSymbol() string {
	return s.Symbol
}

// GetDecimals returns the value of Decimals.
func (s Jetton) GetDecimals() int {
	return s.Decimals
}

// GetImage returns the value of Image.
func (s Jetton) GetImage() OptString {
	return s.Image
}

// GetVerification returns the value of Verification.
func (s Jetton) GetVerification() OptJettonVerificationType {
	return s.Verification
}

// SetAddress sets the value of Address.
func (s *Jetton) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *Jetton) SetName(val string) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *Jetton) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimals sets the value of Decimals.
func (s *Jetton) SetDecimals(val int) {
	s.Decimals = val
}

// SetImage sets the value of Image.
func (s *Jetton) SetImage(val OptString) {
	s.Image = val
}

// SetVerification sets the value of Verification.
func (s *Jetton) SetVerification(val OptJettonVerificationType) {
	s.Verification = val
}

// Ref: #/components/schemas/JettonBalance
type JettonBalance struct {
	Verification  JettonVerificationType `json:"verification"`
	Balance       string                 `json:"balance"`
	JettonAddress string                 `json:"jetton_address"`
	WalletAddress AccountAddress         `json:"wallet_address"`
	Metadata      OptJetton              `json:"metadata"`
}

// GetVerification returns the value of Verification.
func (s JettonBalance) GetVerification() JettonVerificationType {
	return s.Verification
}

// GetBalance returns the value of Balance.
func (s JettonBalance) GetBalance() string {
	return s.Balance
}

// GetJettonAddress returns the value of JettonAddress.
func (s JettonBalance) GetJettonAddress() string {
	return s.JettonAddress
}

// GetWalletAddress returns the value of WalletAddress.
func (s JettonBalance) GetWalletAddress() AccountAddress {
	return s.WalletAddress
}

// GetMetadata returns the value of Metadata.
func (s JettonBalance) GetMetadata() OptJetton {
	return s.Metadata
}

// SetVerification sets the value of Verification.
func (s *JettonBalance) SetVerification(val JettonVerificationType) {
	s.Verification = val
}

// SetBalance sets the value of Balance.
func (s *JettonBalance) SetBalance(val string) {
	s.Balance = val
}

// SetJettonAddress sets the value of JettonAddress.
func (s *JettonBalance) SetJettonAddress(val string) {
	s.JettonAddress = val
}

// SetWalletAddress sets the value of WalletAddress.
func (s *JettonBalance) SetWalletAddress(val AccountAddress) {
	s.WalletAddress = val
}

// SetMetadata sets the value of Metadata.
func (s *JettonBalance) SetMetadata(val OptJetton) {
	s.Metadata = val
}

// Ref: #/components/schemas/JettonInfo
type JettonInfo struct {
	Mintable     bool                   `json:"mintable"`
	TotalSupply  string                 `json:"total_supply"`
	Metadata     JettonMetadata         `json:"metadata"`
	Verification JettonVerificationType `json:"verification"`
}

// GetMintable returns the value of Mintable.
func (s JettonInfo) GetMintable() bool {
	return s.Mintable
}

// GetTotalSupply returns the value of TotalSupply.
func (s JettonInfo) GetTotalSupply() string {
	return s.TotalSupply
}

// GetMetadata returns the value of Metadata.
func (s JettonInfo) GetMetadata() JettonMetadata {
	return s.Metadata
}

// GetVerification returns the value of Verification.
func (s JettonInfo) GetVerification() JettonVerificationType {
	return s.Verification
}

// SetMintable sets the value of Mintable.
func (s *JettonInfo) SetMintable(val bool) {
	s.Mintable = val
}

// SetTotalSupply sets the value of TotalSupply.
func (s *JettonInfo) SetTotalSupply(val string) {
	s.TotalSupply = val
}

// SetMetadata sets the value of Metadata.
func (s *JettonInfo) SetMetadata(val JettonMetadata) {
	s.Metadata = val
}

// SetVerification sets the value of Verification.
func (s *JettonInfo) SetVerification(val JettonVerificationType) {
	s.Verification = val
}

func (*JettonInfo) getJettonInfoRes() {}

// Ref: #/components/schemas/JettonMetadata
type JettonMetadata struct {
	Address     string    `json:"address"`
	Name        string    `json:"name"`
	Symbol      string    `json:"symbol"`
	Decimals    int       `json:"decimals"`
	Image       OptString `json:"image"`
	Description OptString `json:"description"`
	Social      []string  `json:"social"`
	Websites    []string  `json:"websites"`
	Catalogs    []string  `json:"catalogs"`
}

// GetAddress returns the value of Address.
func (s JettonMetadata) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s JettonMetadata) GetName() string {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s JettonMetadata) GetSymbol() string {
	return s.Symbol
}

// GetDecimals returns the value of Decimals.
func (s JettonMetadata) GetDecimals() int {
	return s.Decimals
}

// GetImage returns the value of Image.
func (s JettonMetadata) GetImage() OptString {
	return s.Image
}

// GetDescription returns the value of Description.
func (s JettonMetadata) GetDescription() OptString {
	return s.Description
}

// GetSocial returns the value of Social.
func (s JettonMetadata) GetSocial() []string {
	return s.Social
}

// GetWebsites returns the value of Websites.
func (s JettonMetadata) GetWebsites() []string {
	return s.Websites
}

// GetCatalogs returns the value of Catalogs.
func (s JettonMetadata) GetCatalogs() []string {
	return s.Catalogs
}

// SetAddress sets the value of Address.
func (s *JettonMetadata) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *JettonMetadata) SetName(val string) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *JettonMetadata) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimals sets the value of Decimals.
func (s *JettonMetadata) SetDecimals(val int) {
	s.Decimals = val
}

// SetImage sets the value of Image.
func (s *JettonMetadata) SetImage(val OptString) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *JettonMetadata) SetDescription(val OptString) {
	s.Description = val
}

// SetSocial sets the value of Social.
func (s *JettonMetadata) SetSocial(val []string) {
	s.Social = val
}

// SetWebsites sets the value of Websites.
func (s *JettonMetadata) SetWebsites(val []string) {
	s.Websites = val
}

// SetCatalogs sets the value of Catalogs.
func (s *JettonMetadata) SetCatalogs(val []string) {
	s.Catalogs = val
}

// Ref: #/components/schemas/JettonTransferAction
type JettonTransferAction struct {
	Sender           OptAccountAddress `json:"sender"`
	Recipient        OptAccountAddress `json:"recipient"`
	SendersWallet    string            `json:"senders_wallet"`
	RecipientsWallet string            `json:"recipients_wallet"`
	// Amount in quanta of tokens.
	Amount  string    `json:"amount"`
	Comment OptString `json:"comment"`
	Refund  OptRefund `json:"refund"`
	Jetton  Jetton    `json:"jetton"`
}

// GetSender returns the value of Sender.
func (s JettonTransferAction) GetSender() OptAccountAddress {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s JettonTransferAction) GetRecipient() OptAccountAddress {
	return s.Recipient
}

// GetSendersWallet returns the value of SendersWallet.
func (s JettonTransferAction) GetSendersWallet() string {
	return s.SendersWallet
}

// GetRecipientsWallet returns the value of RecipientsWallet.
func (s JettonTransferAction) GetRecipientsWallet() string {
	return s.RecipientsWallet
}

// GetAmount returns the value of Amount.
func (s JettonTransferAction) GetAmount() string {
	return s.Amount
}

// GetComment returns the value of Comment.
func (s JettonTransferAction) GetComment() OptString {
	return s.Comment
}

// GetRefund returns the value of Refund.
func (s JettonTransferAction) GetRefund() OptRefund {
	return s.Refund
}

// GetJetton returns the value of Jetton.
func (s JettonTransferAction) GetJetton() Jetton {
	return s.Jetton
}

// SetSender sets the value of Sender.
func (s *JettonTransferAction) SetSender(val OptAccountAddress) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *JettonTransferAction) SetRecipient(val OptAccountAddress) {
	s.Recipient = val
}

// SetSendersWallet sets the value of SendersWallet.
func (s *JettonTransferAction) SetSendersWallet(val string) {
	s.SendersWallet = val
}

// SetRecipientsWallet sets the value of RecipientsWallet.
func (s *JettonTransferAction) SetRecipientsWallet(val string) {
	s.RecipientsWallet = val
}

// SetAmount sets the value of Amount.
func (s *JettonTransferAction) SetAmount(val string) {
	s.Amount = val
}

// SetComment sets the value of Comment.
func (s *JettonTransferAction) SetComment(val OptString) {
	s.Comment = val
}

// SetRefund sets the value of Refund.
func (s *JettonTransferAction) SetRefund(val OptRefund) {
	s.Refund = val
}

// SetJetton sets the value of Jetton.
func (s *JettonTransferAction) SetJetton(val Jetton) {
	s.Jetton = val
}

// Ref: #/components/schemas/JettonVerificationType
type JettonVerificationType string

const (
	JettonVerificationTypeWhitelist JettonVerificationType = "whitelist"
	JettonVerificationTypeBlacklist JettonVerificationType = "blacklist"
	JettonVerificationTypeNone      JettonVerificationType = "none"
)

// Ref: #/components/schemas/JettonsBalances
type JettonsBalances struct {
	Balances []JettonBalance `json:"balances"`
}

// GetBalances returns the value of Balances.
func (s JettonsBalances) GetBalances() []JettonBalance {
	return s.Balances
}

// SetBalances sets the value of Balances.
func (s *JettonsBalances) SetBalances(val []JettonBalance) {
	s.Balances = val
}

func (*JettonsBalances) getJettonsBalancesRes() {}

// Ref: #/components/schemas/Message
type Message struct {
	CreatedLt     int64              `json:"created_lt"`
	IhrDisabled   bool               `json:"ihr_disabled"`
	Bounce        bool               `json:"bounce"`
	Bounced       bool               `json:"bounced"`
	Value         int64              `json:"value"`
	FwdFee        int64              `json:"fwd_fee"`
	IhrFee        int64              `json:"ihr_fee"`
	Destination   OptAccountAddress  `json:"destination"`
	Source        OptAccountAddress  `json:"source"`
	ImportFee     int64              `json:"import_fee"`
	CreatedAt     int64              `json:"created_at"`
	OpCode        OptString          `json:"op_code"`
	Init          OptStateInit       `json:"init"`
	DecodedOpName OptString          `json:"decoded_op_name"`
	DecodedBody   MessageDecodedBody `json:"decoded_body"`
}

// GetCreatedLt returns the value of CreatedLt.
func (s Message) GetCreatedLt() int64 {
	return s.CreatedLt
}

// GetIhrDisabled returns the value of IhrDisabled.
func (s Message) GetIhrDisabled() bool {
	return s.IhrDisabled
}

// GetBounce returns the value of Bounce.
func (s Message) GetBounce() bool {
	return s.Bounce
}

// GetBounced returns the value of Bounced.
func (s Message) GetBounced() bool {
	return s.Bounced
}

// GetValue returns the value of Value.
func (s Message) GetValue() int64 {
	return s.Value
}

// GetFwdFee returns the value of FwdFee.
func (s Message) GetFwdFee() int64 {
	return s.FwdFee
}

// GetIhrFee returns the value of IhrFee.
func (s Message) GetIhrFee() int64 {
	return s.IhrFee
}

// GetDestination returns the value of Destination.
func (s Message) GetDestination() OptAccountAddress {
	return s.Destination
}

// GetSource returns the value of Source.
func (s Message) GetSource() OptAccountAddress {
	return s.Source
}

// GetImportFee returns the value of ImportFee.
func (s Message) GetImportFee() int64 {
	return s.ImportFee
}

// GetCreatedAt returns the value of CreatedAt.
func (s Message) GetCreatedAt() int64 {
	return s.CreatedAt
}

// GetOpCode returns the value of OpCode.
func (s Message) GetOpCode() OptString {
	return s.OpCode
}

// GetInit returns the value of Init.
func (s Message) GetInit() OptStateInit {
	return s.Init
}

// GetDecodedOpName returns the value of DecodedOpName.
func (s Message) GetDecodedOpName() OptString {
	return s.DecodedOpName
}

// GetDecodedBody returns the value of DecodedBody.
func (s Message) GetDecodedBody() MessageDecodedBody {
	return s.DecodedBody
}

// SetCreatedLt sets the value of CreatedLt.
func (s *Message) SetCreatedLt(val int64) {
	s.CreatedLt = val
}

// SetIhrDisabled sets the value of IhrDisabled.
func (s *Message) SetIhrDisabled(val bool) {
	s.IhrDisabled = val
}

// SetBounce sets the value of Bounce.
func (s *Message) SetBounce(val bool) {
	s.Bounce = val
}

// SetBounced sets the value of Bounced.
func (s *Message) SetBounced(val bool) {
	s.Bounced = val
}

// SetValue sets the value of Value.
func (s *Message) SetValue(val int64) {
	s.Value = val
}

// SetFwdFee sets the value of FwdFee.
func (s *Message) SetFwdFee(val int64) {
	s.FwdFee = val
}

// SetIhrFee sets the value of IhrFee.
func (s *Message) SetIhrFee(val int64) {
	s.IhrFee = val
}

// SetDestination sets the value of Destination.
func (s *Message) SetDestination(val OptAccountAddress) {
	s.Destination = val
}

// SetSource sets the value of Source.
func (s *Message) SetSource(val OptAccountAddress) {
	s.Source = val
}

// SetImportFee sets the value of ImportFee.
func (s *Message) SetImportFee(val int64) {
	s.ImportFee = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Message) SetCreatedAt(val int64) {
	s.CreatedAt = val
}

// SetOpCode sets the value of OpCode.
func (s *Message) SetOpCode(val OptString) {
	s.OpCode = val
}

// SetInit sets the value of Init.
func (s *Message) SetInit(val OptStateInit) {
	s.Init = val
}

// SetDecodedOpName sets the value of DecodedOpName.
func (s *Message) SetDecodedOpName(val OptString) {
	s.DecodedOpName = val
}

// SetDecodedBody sets the value of DecodedBody.
func (s *Message) SetDecodedBody(val MessageDecodedBody) {
	s.DecodedBody = val
}

type MessageDecodedBody map[string]jx.Raw

func (s *MessageDecodedBody) init() MessageDecodedBody {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/MethodExecutionResult
type MethodExecutionResult struct {
	Success bool `json:"success"`
}

// GetSuccess returns the value of Success.
func (s MethodExecutionResult) GetSuccess() bool {
	return s.Success
}

// SetSuccess sets the value of Success.
func (s *MethodExecutionResult) SetSuccess(val bool) {
	s.Success = val
}

func (*MethodExecutionResult) execGetMethodRes() {}

// Ref: #/components/schemas/NftCollection
type NftCollection struct {
	Address              string                   `json:"address"`
	NextItemIndex        int64                    `json:"next_item_index"`
	Owner                OptAccountAddress        `json:"owner"`
	RawCollectionContent string                   `json:"raw_collection_content"`
	Metadata             OptNftCollectionMetadata `json:"metadata"`
}

// GetAddress returns the value of Address.
func (s NftCollection) GetAddress() string {
	return s.Address
}

// GetNextItemIndex returns the value of NextItemIndex.
func (s NftCollection) GetNextItemIndex() int64 {
	return s.NextItemIndex
}

// GetOwner returns the value of Owner.
func (s NftCollection) GetOwner() OptAccountAddress {
	return s.Owner
}

// GetRawCollectionContent returns the value of RawCollectionContent.
func (s NftCollection) GetRawCollectionContent() string {
	return s.RawCollectionContent
}

// GetMetadata returns the value of Metadata.
func (s NftCollection) GetMetadata() OptNftCollectionMetadata {
	return s.Metadata
}

// SetAddress sets the value of Address.
func (s *NftCollection) SetAddress(val string) {
	s.Address = val
}

// SetNextItemIndex sets the value of NextItemIndex.
func (s *NftCollection) SetNextItemIndex(val int64) {
	s.NextItemIndex = val
}

// SetOwner sets the value of Owner.
func (s *NftCollection) SetOwner(val OptAccountAddress) {
	s.Owner = val
}

// SetRawCollectionContent sets the value of RawCollectionContent.
func (s *NftCollection) SetRawCollectionContent(val string) {
	s.RawCollectionContent = val
}

// SetMetadata sets the value of Metadata.
func (s *NftCollection) SetMetadata(val OptNftCollectionMetadata) {
	s.Metadata = val
}

func (*NftCollection) getNftCollectionRes() {}

type NftCollectionMetadata map[string]jx.Raw

func (s *NftCollectionMetadata) init() NftCollectionMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/NftCollections
type NftCollections struct {
	NftCollections []NftCollection `json:"nft_collections"`
}

// GetNftCollections returns the value of NftCollections.
func (s NftCollections) GetNftCollections() []NftCollection {
	return s.NftCollections
}

// SetNftCollections sets the value of NftCollections.
func (s *NftCollections) SetNftCollections(val []NftCollection) {
	s.NftCollections = val
}

func (*NftCollections) getNftCollectionsRes() {}

// Ref: #/components/schemas/NftItem
type NftItem struct {
	Address    string               `json:"address"`
	Index      int64                `json:"index"`
	Owner      OptAccountAddress    `json:"owner"`
	Collection OptNftItemCollection `json:"collection"`
	Verified   bool                 `json:"verified"`
	Metadata   NftItemMetadata      `json:"metadata"`
	Sale       OptSale              `json:"sale"`
	Previews   []ImagePreview       `json:"previews"`
	DNS        OptString            `json:"dns"`
	ApprovedBy []string             `json:"approved_by"`
}

// GetAddress returns the value of Address.
func (s NftItem) GetAddress() string {
	return s.Address
}

// GetIndex returns the value of Index.
func (s NftItem) GetIndex() int64 {
	return s.Index
}

// GetOwner returns the value of Owner.
func (s NftItem) GetOwner() OptAccountAddress {
	return s.Owner
}

// GetCollection returns the value of Collection.
func (s NftItem) GetCollection() OptNftItemCollection {
	return s.Collection
}

// GetVerified returns the value of Verified.
func (s NftItem) GetVerified() bool {
	return s.Verified
}

// GetMetadata returns the value of Metadata.
func (s NftItem) GetMetadata() NftItemMetadata {
	return s.Metadata
}

// GetSale returns the value of Sale.
func (s NftItem) GetSale() OptSale {
	return s.Sale
}

// GetPreviews returns the value of Previews.
func (s NftItem) GetPreviews() []ImagePreview {
	return s.Previews
}

// GetDNS returns the value of DNS.
func (s NftItem) GetDNS() OptString {
	return s.DNS
}

// GetApprovedBy returns the value of ApprovedBy.
func (s NftItem) GetApprovedBy() []string {
	return s.ApprovedBy
}

// SetAddress sets the value of Address.
func (s *NftItem) SetAddress(val string) {
	s.Address = val
}

// SetIndex sets the value of Index.
func (s *NftItem) SetIndex(val int64) {
	s.Index = val
}

// SetOwner sets the value of Owner.
func (s *NftItem) SetOwner(val OptAccountAddress) {
	s.Owner = val
}

// SetCollection sets the value of Collection.
func (s *NftItem) SetCollection(val OptNftItemCollection) {
	s.Collection = val
}

// SetVerified sets the value of Verified.
func (s *NftItem) SetVerified(val bool) {
	s.Verified = val
}

// SetMetadata sets the value of Metadata.
func (s *NftItem) SetMetadata(val NftItemMetadata) {
	s.Metadata = val
}

// SetSale sets the value of Sale.
func (s *NftItem) SetSale(val OptSale) {
	s.Sale = val
}

// SetPreviews sets the value of Previews.
func (s *NftItem) SetPreviews(val []ImagePreview) {
	s.Previews = val
}

// SetDNS sets the value of DNS.
func (s *NftItem) SetDNS(val OptString) {
	s.DNS = val
}

// SetApprovedBy sets the value of ApprovedBy.
func (s *NftItem) SetApprovedBy(val []string) {
	s.ApprovedBy = val
}

type NftItemCollection struct {
	Address string `json:"address"`
	Name    string `json:"name"`
}

// GetAddress returns the value of Address.
func (s NftItemCollection) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s NftItemCollection) GetName() string {
	return s.Name
}

// SetAddress sets the value of Address.
func (s *NftItemCollection) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *NftItemCollection) SetName(val string) {
	s.Name = val
}

type NftItemMetadata map[string]jx.Raw

func (s *NftItemMetadata) init() NftItemMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/NftItemTransferAction
type NftItemTransferAction struct {
	Sender    OptAccountAddress `json:"sender"`
	Recipient OptAccountAddress `json:"recipient"`
	Nft       string            `json:"nft"`
	Comment   OptString         `json:"comment"`
	// Raw hex encoded payload.
	Payload OptString `json:"payload"`
	Refund  OptRefund `json:"refund"`
}

// GetSender returns the value of Sender.
func (s NftItemTransferAction) GetSender() OptAccountAddress {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s NftItemTransferAction) GetRecipient() OptAccountAddress {
	return s.Recipient
}

// GetNft returns the value of Nft.
func (s NftItemTransferAction) GetNft() string {
	return s.Nft
}

// GetComment returns the value of Comment.
func (s NftItemTransferAction) GetComment() OptString {
	return s.Comment
}

// GetPayload returns the value of Payload.
func (s NftItemTransferAction) GetPayload() OptString {
	return s.Payload
}

// GetRefund returns the value of Refund.
func (s NftItemTransferAction) GetRefund() OptRefund {
	return s.Refund
}

// SetSender sets the value of Sender.
func (s *NftItemTransferAction) SetSender(val OptAccountAddress) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *NftItemTransferAction) SetRecipient(val OptAccountAddress) {
	s.Recipient = val
}

// SetNft sets the value of Nft.
func (s *NftItemTransferAction) SetNft(val string) {
	s.Nft = val
}

// SetComment sets the value of Comment.
func (s *NftItemTransferAction) SetComment(val OptString) {
	s.Comment = val
}

// SetPayload sets the value of Payload.
func (s *NftItemTransferAction) SetPayload(val OptString) {
	s.Payload = val
}

// SetRefund sets the value of Refund.
func (s *NftItemTransferAction) SetRefund(val OptRefund) {
	s.Refund = val
}

// Ref: #/components/schemas/NftItems
type NftItems struct {
	NftItems []NftItem `json:"nft_items"`
}

// GetNftItems returns the value of NftItems.
func (s NftItems) GetNftItems() []NftItem {
	return s.NftItems
}

// SetNftItems sets the value of NftItems.
func (s *NftItems) SetNftItems(val []NftItem) {
	s.NftItems = val
}

func (*NftItems) getNftItemsByAddressesRes() {}
func (*NftItems) getNftItemsByOwnerRes()     {}

// Ref: #/components/schemas/NftPurchaseAction
type NftPurchaseAction struct {
	PurchaseType OptNftPurchaseActionPurchaseType `json:"purchase_type"`
	Amount       Price                            `json:"amount"`
	Nft          NftItem                          `json:"nft"`
	Seller       AccountAddress                   `json:"seller"`
	Buyer        AccountAddress                   `json:"buyer"`
}

// GetPurchaseType returns the value of PurchaseType.
func (s NftPurchaseAction) GetPurchaseType() OptNftPurchaseActionPurchaseType {
	return s.PurchaseType
}

// GetAmount returns the value of Amount.
func (s NftPurchaseAction) GetAmount() Price {
	return s.Amount
}

// GetNft returns the value of Nft.
func (s NftPurchaseAction) GetNft() NftItem {
	return s.Nft
}

// GetSeller returns the value of Seller.
func (s NftPurchaseAction) GetSeller() AccountAddress {
	return s.Seller
}

// GetBuyer returns the value of Buyer.
func (s NftPurchaseAction) GetBuyer() AccountAddress {
	return s.Buyer
}

// SetPurchaseType sets the value of PurchaseType.
func (s *NftPurchaseAction) SetPurchaseType(val OptNftPurchaseActionPurchaseType) {
	s.PurchaseType = val
}

// SetAmount sets the value of Amount.
func (s *NftPurchaseAction) SetAmount(val Price) {
	s.Amount = val
}

// SetNft sets the value of Nft.
func (s *NftPurchaseAction) SetNft(val NftItem) {
	s.Nft = val
}

// SetSeller sets the value of Seller.
func (s *NftPurchaseAction) SetSeller(val AccountAddress) {
	s.Seller = val
}

// SetBuyer sets the value of Buyer.
func (s *NftPurchaseAction) SetBuyer(val AccountAddress) {
	s.Buyer = val
}

type NftPurchaseActionPurchaseType string

const (
	NftPurchaseActionPurchaseTypeDNSTg   NftPurchaseActionPurchaseType = "DNS.tg"
	NftPurchaseActionPurchaseTypeGetgems NftPurchaseActionPurchaseType = "getgems"
)

type NotFound struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s NotFound) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *NotFound) SetError(val string) {
	s.Error = val
}

func (*NotFound) dnsBackResolveRes()            {}
func (*NotFound) dnsResolveRes()                {}
func (*NotFound) getAccountRes()                {}
func (*NotFound) getAccountTransactionsRes()    {}
func (*NotFound) getBlockRes()                  {}
func (*NotFound) getDomainBidsRes()             {}
func (*NotFound) getEventRes()                  {}
func (*NotFound) getEventsByAccountRes()        {}
func (*NotFound) getJettonInfoRes()             {}
func (*NotFound) getJettonsBalancesRes()        {}
func (*NotFound) getNftCollectionRes()          {}
func (*NotFound) getNftItemsByAddressesRes()    {}
func (*NotFound) getNftItemsByOwnerRes()        {}
func (*NotFound) getRawAccountRes()             {}
func (*NotFound) getSubscriptionsByAccountRes() {}
func (*NotFound) getTraceRes()                  {}
func (*NotFound) getTracesByAccountRes()        {}
func (*NotFound) getTransactionRes()            {}
func (*NotFound) getTransactionsRes()           {}
func (*NotFound) poolsByNominatorsRes()         {}
func (*NotFound) stackingPoolInfoRes()          {}
func (*NotFound) stackingPoolsRes()             {}

// NewOptAccountAddress returns new OptAccountAddress with value set to v.
func NewOptAccountAddress(v AccountAddress) OptAccountAddress {
	return OptAccountAddress{
		Value: v,
		Set:   true,
	}
}

// OptAccountAddress is optional AccountAddress.
type OptAccountAddress struct {
	Value AccountAddress
	Set   bool
}

// IsSet returns true if OptAccountAddress was set.
func (o OptAccountAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountAddress) Reset() {
	var v AccountAddress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountAddress) SetTo(v AccountAddress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountAddress) Get() (v AccountAddress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountAddress) Or(d AccountAddress) AccountAddress {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionPhase returns new OptActionPhase with value set to v.
func NewOptActionPhase(v ActionPhase) OptActionPhase {
	return OptActionPhase{
		Value: v,
		Set:   true,
	}
}

// OptActionPhase is optional ActionPhase.
type OptActionPhase struct {
	Value ActionPhase
	Set   bool
}

// IsSet returns true if OptActionPhase was set.
func (o OptActionPhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionPhase) Reset() {
	var v ActionPhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionPhase) SetTo(v ActionPhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionPhase) Get() (v ActionPhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionPhase) Or(d ActionPhase) ActionPhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuctionBidAction returns new OptAuctionBidAction with value set to v.
func NewOptAuctionBidAction(v AuctionBidAction) OptAuctionBidAction {
	return OptAuctionBidAction{
		Value: v,
		Set:   true,
	}
}

// OptAuctionBidAction is optional AuctionBidAction.
type OptAuctionBidAction struct {
	Value AuctionBidAction
	Set   bool
}

// IsSet returns true if OptAuctionBidAction was set.
func (o OptAuctionBidAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuctionBidAction) Reset() {
	var v AuctionBidAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuctionBidAction) SetTo(v AuctionBidAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuctionBidAction) Get() (v AuctionBidAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuctionBidAction) Or(d AuctionBidAction) AuctionBidAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBouncePhaseType returns new OptBouncePhaseType with value set to v.
func NewOptBouncePhaseType(v BouncePhaseType) OptBouncePhaseType {
	return OptBouncePhaseType{
		Value: v,
		Set:   true,
	}
}

// OptBouncePhaseType is optional BouncePhaseType.
type OptBouncePhaseType struct {
	Value BouncePhaseType
	Set   bool
}

// IsSet returns true if OptBouncePhaseType was set.
func (o OptBouncePhaseType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBouncePhaseType) Reset() {
	var v BouncePhaseType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBouncePhaseType) SetTo(v BouncePhaseType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBouncePhaseType) Get() (v BouncePhaseType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBouncePhaseType) Or(d BouncePhaseType) BouncePhaseType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptComputePhase returns new OptComputePhase with value set to v.
func NewOptComputePhase(v ComputePhase) OptComputePhase {
	return OptComputePhase{
		Value: v,
		Set:   true,
	}
}

// OptComputePhase is optional ComputePhase.
type OptComputePhase struct {
	Value ComputePhase
	Set   bool
}

// IsSet returns true if OptComputePhase was set.
func (o OptComputePhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptComputePhase) Reset() {
	var v ComputePhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptComputePhase) SetTo(v ComputePhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptComputePhase) Get() (v ComputePhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptComputePhase) Or(d ComputePhase) ComputePhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptComputeSkipReason returns new OptComputeSkipReason with value set to v.
func NewOptComputeSkipReason(v ComputeSkipReason) OptComputeSkipReason {
	return OptComputeSkipReason{
		Value: v,
		Set:   true,
	}
}

// OptComputeSkipReason is optional ComputeSkipReason.
type OptComputeSkipReason struct {
	Value ComputeSkipReason
	Set   bool
}

// IsSet returns true if OptComputeSkipReason was set.
func (o OptComputeSkipReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptComputeSkipReason) Reset() {
	var v ComputeSkipReason
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptComputeSkipReason) SetTo(v ComputeSkipReason) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptComputeSkipReason) Get() (v ComputeSkipReason, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptComputeSkipReason) Or(d ComputeSkipReason) ComputeSkipReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractDeployAction returns new OptContractDeployAction with value set to v.
func NewOptContractDeployAction(v ContractDeployAction) OptContractDeployAction {
	return OptContractDeployAction{
		Value: v,
		Set:   true,
	}
}

// OptContractDeployAction is optional ContractDeployAction.
type OptContractDeployAction struct {
	Value ContractDeployAction
	Set   bool
}

// IsSet returns true if OptContractDeployAction was set.
func (o OptContractDeployAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractDeployAction) Reset() {
	var v ContractDeployAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractDeployAction) SetTo(v ContractDeployAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractDeployAction) Get() (v ContractDeployAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractDeployAction) Or(d ContractDeployAction) ContractDeployAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreditPhase returns new OptCreditPhase with value set to v.
func NewOptCreditPhase(v CreditPhase) OptCreditPhase {
	return OptCreditPhase{
		Value: v,
		Set:   true,
	}
}

// OptCreditPhase is optional CreditPhase.
type OptCreditPhase struct {
	Value CreditPhase
	Set   bool
}

// IsSet returns true if OptCreditPhase was set.
func (o OptCreditPhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreditPhase) Reset() {
	var v CreditPhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreditPhase) SetTo(v CreditPhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreditPhase) Get() (v CreditPhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreditPhase) Or(d CreditPhase) CreditPhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmulateMessageReq returns new OptEmulateMessageReq with value set to v.
func NewOptEmulateMessageReq(v EmulateMessageReq) OptEmulateMessageReq {
	return OptEmulateMessageReq{
		Value: v,
		Set:   true,
	}
}

// OptEmulateMessageReq is optional EmulateMessageReq.
type OptEmulateMessageReq struct {
	Value EmulateMessageReq
	Set   bool
}

// IsSet returns true if OptEmulateMessageReq was set.
func (o OptEmulateMessageReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmulateMessageReq) Reset() {
	var v EmulateMessageReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmulateMessageReq) SetTo(v EmulateMessageReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmulateMessageReq) Get() (v EmulateMessageReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmulateMessageReq) Or(d EmulateMessageReq) EmulateMessageReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJetton returns new OptJetton with value set to v.
func NewOptJetton(v Jetton) OptJetton {
	return OptJetton{
		Value: v,
		Set:   true,
	}
}

// OptJetton is optional Jetton.
type OptJetton struct {
	Value Jetton
	Set   bool
}

// IsSet returns true if OptJetton was set.
func (o OptJetton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJetton) Reset() {
	var v Jetton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJetton) SetTo(v Jetton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJetton) Get() (v Jetton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJetton) Or(d Jetton) Jetton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonTransferAction returns new OptJettonTransferAction with value set to v.
func NewOptJettonTransferAction(v JettonTransferAction) OptJettonTransferAction {
	return OptJettonTransferAction{
		Value: v,
		Set:   true,
	}
}

// OptJettonTransferAction is optional JettonTransferAction.
type OptJettonTransferAction struct {
	Value JettonTransferAction
	Set   bool
}

// IsSet returns true if OptJettonTransferAction was set.
func (o OptJettonTransferAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonTransferAction) Reset() {
	var v JettonTransferAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonTransferAction) SetTo(v JettonTransferAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonTransferAction) Get() (v JettonTransferAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonTransferAction) Or(d JettonTransferAction) JettonTransferAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonVerificationType returns new OptJettonVerificationType with value set to v.
func NewOptJettonVerificationType(v JettonVerificationType) OptJettonVerificationType {
	return OptJettonVerificationType{
		Value: v,
		Set:   true,
	}
}

// OptJettonVerificationType is optional JettonVerificationType.
type OptJettonVerificationType struct {
	Value JettonVerificationType
	Set   bool
}

// IsSet returns true if OptJettonVerificationType was set.
func (o OptJettonVerificationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonVerificationType) Reset() {
	var v JettonVerificationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonVerificationType) SetTo(v JettonVerificationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonVerificationType) Get() (v JettonVerificationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonVerificationType) Or(d JettonVerificationType) JettonVerificationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessage returns new OptMessage with value set to v.
func NewOptMessage(v Message) OptMessage {
	return OptMessage{
		Value: v,
		Set:   true,
	}
}

// OptMessage is optional Message.
type OptMessage struct {
	Value Message
	Set   bool
}

// IsSet returns true if OptMessage was set.
func (o OptMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessage) Reset() {
	var v Message
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessage) SetTo(v Message) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessage) Get() (v Message, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessage) Or(d Message) Message {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftCollectionMetadata returns new OptNftCollectionMetadata with value set to v.
func NewOptNftCollectionMetadata(v NftCollectionMetadata) OptNftCollectionMetadata {
	return OptNftCollectionMetadata{
		Value: v,
		Set:   true,
	}
}

// OptNftCollectionMetadata is optional NftCollectionMetadata.
type OptNftCollectionMetadata struct {
	Value NftCollectionMetadata
	Set   bool
}

// IsSet returns true if OptNftCollectionMetadata was set.
func (o OptNftCollectionMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftCollectionMetadata) Reset() {
	var v NftCollectionMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftCollectionMetadata) SetTo(v NftCollectionMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftCollectionMetadata) Get() (v NftCollectionMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftCollectionMetadata) Or(d NftCollectionMetadata) NftCollectionMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftItem returns new OptNftItem with value set to v.
func NewOptNftItem(v NftItem) OptNftItem {
	return OptNftItem{
		Value: v,
		Set:   true,
	}
}

// OptNftItem is optional NftItem.
type OptNftItem struct {
	Value NftItem
	Set   bool
}

// IsSet returns true if OptNftItem was set.
func (o OptNftItem) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftItem) Reset() {
	var v NftItem
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftItem) SetTo(v NftItem) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftItem) Get() (v NftItem, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftItem) Or(d NftItem) NftItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftItemCollection returns new OptNftItemCollection with value set to v.
func NewOptNftItemCollection(v NftItemCollection) OptNftItemCollection {
	return OptNftItemCollection{
		Value: v,
		Set:   true,
	}
}

// OptNftItemCollection is optional NftItemCollection.
type OptNftItemCollection struct {
	Value NftItemCollection
	Set   bool
}

// IsSet returns true if OptNftItemCollection was set.
func (o OptNftItemCollection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftItemCollection) Reset() {
	var v NftItemCollection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftItemCollection) SetTo(v NftItemCollection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftItemCollection) Get() (v NftItemCollection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftItemCollection) Or(d NftItemCollection) NftItemCollection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftItemTransferAction returns new OptNftItemTransferAction with value set to v.
func NewOptNftItemTransferAction(v NftItemTransferAction) OptNftItemTransferAction {
	return OptNftItemTransferAction{
		Value: v,
		Set:   true,
	}
}

// OptNftItemTransferAction is optional NftItemTransferAction.
type OptNftItemTransferAction struct {
	Value NftItemTransferAction
	Set   bool
}

// IsSet returns true if OptNftItemTransferAction was set.
func (o OptNftItemTransferAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftItemTransferAction) Reset() {
	var v NftItemTransferAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftItemTransferAction) SetTo(v NftItemTransferAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftItemTransferAction) Get() (v NftItemTransferAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftItemTransferAction) Or(d NftItemTransferAction) NftItemTransferAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftPurchaseAction returns new OptNftPurchaseAction with value set to v.
func NewOptNftPurchaseAction(v NftPurchaseAction) OptNftPurchaseAction {
	return OptNftPurchaseAction{
		Value: v,
		Set:   true,
	}
}

// OptNftPurchaseAction is optional NftPurchaseAction.
type OptNftPurchaseAction struct {
	Value NftPurchaseAction
	Set   bool
}

// IsSet returns true if OptNftPurchaseAction was set.
func (o OptNftPurchaseAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftPurchaseAction) Reset() {
	var v NftPurchaseAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftPurchaseAction) SetTo(v NftPurchaseAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftPurchaseAction) Get() (v NftPurchaseAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftPurchaseAction) Or(d NftPurchaseAction) NftPurchaseAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftPurchaseActionPurchaseType returns new OptNftPurchaseActionPurchaseType with value set to v.
func NewOptNftPurchaseActionPurchaseType(v NftPurchaseActionPurchaseType) OptNftPurchaseActionPurchaseType {
	return OptNftPurchaseActionPurchaseType{
		Value: v,
		Set:   true,
	}
}

// OptNftPurchaseActionPurchaseType is optional NftPurchaseActionPurchaseType.
type OptNftPurchaseActionPurchaseType struct {
	Value NftPurchaseActionPurchaseType
	Set   bool
}

// IsSet returns true if OptNftPurchaseActionPurchaseType was set.
func (o OptNftPurchaseActionPurchaseType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftPurchaseActionPurchaseType) Reset() {
	var v NftPurchaseActionPurchaseType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftPurchaseActionPurchaseType) SetTo(v NftPurchaseActionPurchaseType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftPurchaseActionPurchaseType) Get() (v NftPurchaseActionPurchaseType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftPurchaseActionPurchaseType) Or(d NftPurchaseActionPurchaseType) NftPurchaseActionPurchaseType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRefund returns new OptRefund with value set to v.
func NewOptRefund(v Refund) OptRefund {
	return OptRefund{
		Value: v,
		Set:   true,
	}
}

// OptRefund is optional Refund.
type OptRefund struct {
	Value Refund
	Set   bool
}

// IsSet returns true if OptRefund was set.
func (o OptRefund) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRefund) Reset() {
	var v Refund
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRefund) SetTo(v Refund) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRefund) Get() (v Refund, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRefund) Or(d Refund) Refund {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSale returns new OptSale with value set to v.
func NewOptSale(v Sale) OptSale {
	return OptSale{
		Value: v,
		Set:   true,
	}
}

// OptSale is optional Sale.
type OptSale struct {
	Value Sale
	Set   bool
}

// IsSet returns true if OptSale was set.
func (o OptSale) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSale) Reset() {
	var v Sale
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSale) SetTo(v Sale) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSale) Get() (v Sale, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSale) Or(d Sale) Sale {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSendMessageReq returns new OptSendMessageReq with value set to v.
func NewOptSendMessageReq(v SendMessageReq) OptSendMessageReq {
	return OptSendMessageReq{
		Value: v,
		Set:   true,
	}
}

// OptSendMessageReq is optional SendMessageReq.
type OptSendMessageReq struct {
	Value SendMessageReq
	Set   bool
}

// IsSet returns true if OptSendMessageReq was set.
func (o OptSendMessageReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSendMessageReq) Reset() {
	var v SendMessageReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSendMessageReq) SetTo(v SendMessageReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSendMessageReq) Get() (v SendMessageReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSendMessageReq) Or(d SendMessageReq) SendMessageReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStateInit returns new OptStateInit with value set to v.
func NewOptStateInit(v StateInit) OptStateInit {
	return OptStateInit{
		Value: v,
		Set:   true,
	}
}

// OptStateInit is optional StateInit.
type OptStateInit struct {
	Value StateInit
	Set   bool
}

// IsSet returns true if OptStateInit was set.
func (o OptStateInit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStateInit) Reset() {
	var v StateInit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStateInit) SetTo(v StateInit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStateInit) Get() (v StateInit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStateInit) Or(d StateInit) StateInit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStoragePhase returns new OptStoragePhase with value set to v.
func NewOptStoragePhase(v StoragePhase) OptStoragePhase {
	return OptStoragePhase{
		Value: v,
		Set:   true,
	}
}

// OptStoragePhase is optional StoragePhase.
type OptStoragePhase struct {
	Value StoragePhase
	Set   bool
}

// IsSet returns true if OptStoragePhase was set.
func (o OptStoragePhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStoragePhase) Reset() {
	var v StoragePhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStoragePhase) SetTo(v StoragePhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStoragePhase) Get() (v StoragePhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStoragePhase) Or(d StoragePhase) StoragePhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionAction returns new OptSubscriptionAction with value set to v.
func NewOptSubscriptionAction(v SubscriptionAction) OptSubscriptionAction {
	return OptSubscriptionAction{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionAction is optional SubscriptionAction.
type OptSubscriptionAction struct {
	Value SubscriptionAction
	Set   bool
}

// IsSet returns true if OptSubscriptionAction was set.
func (o OptSubscriptionAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionAction) Reset() {
	var v SubscriptionAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionAction) SetTo(v SubscriptionAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionAction) Get() (v SubscriptionAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionAction) Or(d SubscriptionAction) SubscriptionAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTonTransferAction returns new OptTonTransferAction with value set to v.
func NewOptTonTransferAction(v TonTransferAction) OptTonTransferAction {
	return OptTonTransferAction{
		Value: v,
		Set:   true,
	}
}

// OptTonTransferAction is optional TonTransferAction.
type OptTonTransferAction struct {
	Value TonTransferAction
	Set   bool
}

// IsSet returns true if OptTonTransferAction was set.
func (o OptTonTransferAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTonTransferAction) Reset() {
	var v TonTransferAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTonTransferAction) SetTo(v TonTransferAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTonTransferAction) Get() (v TonTransferAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTonTransferAction) Or(d TonTransferAction) TonTransferAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnSubscriptionAction returns new OptUnSubscriptionAction with value set to v.
func NewOptUnSubscriptionAction(v UnSubscriptionAction) OptUnSubscriptionAction {
	return OptUnSubscriptionAction{
		Value: v,
		Set:   true,
	}
}

// OptUnSubscriptionAction is optional UnSubscriptionAction.
type OptUnSubscriptionAction struct {
	Value UnSubscriptionAction
	Set   bool
}

// IsSet returns true if OptUnSubscriptionAction was set.
func (o OptUnSubscriptionAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnSubscriptionAction) Reset() {
	var v UnSubscriptionAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnSubscriptionAction) SetTo(v UnSubscriptionAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnSubscriptionAction) Get() (v UnSubscriptionAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnSubscriptionAction) Or(d UnSubscriptionAction) UnSubscriptionAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWalletDNS returns new OptWalletDNS with value set to v.
func NewOptWalletDNS(v WalletDNS) OptWalletDNS {
	return OptWalletDNS{
		Value: v,
		Set:   true,
	}
}

// OptWalletDNS is optional WalletDNS.
type OptWalletDNS struct {
	Value WalletDNS
	Set   bool
}

// IsSet returns true if OptWalletDNS was set.
func (o OptWalletDNS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWalletDNS) Reset() {
	var v WalletDNS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWalletDNS) SetTo(v WalletDNS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWalletDNS) Get() (v WalletDNS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWalletDNS) Or(d WalletDNS) WalletDNS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PoolInfo
type PoolInfo struct {
	Address        string                 `json:"address"`
	Name           string                 `json:"name"`
	TotalAmount    int64                  `json:"totalAmount"`
	Implementation PoolInfoImplementation `json:"implementation"`
	// APY in percent.
	Apy      float64 `json:"apy"`
	MinStake int64   `json:"min_stake"`
	// Current nomination cycle beginning timestamp.
	CycleStart int64 `json:"cycle_start"`
	// Current nomination cycle ending timestamp.
	CycleEnd int64 `json:"cycle_end"`
}

// GetAddress returns the value of Address.
func (s PoolInfo) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s PoolInfo) GetName() string {
	return s.Name
}

// GetTotalAmount returns the value of TotalAmount.
func (s PoolInfo) GetTotalAmount() int64 {
	return s.TotalAmount
}

// GetImplementation returns the value of Implementation.
func (s PoolInfo) GetImplementation() PoolInfoImplementation {
	return s.Implementation
}

// GetApy returns the value of Apy.
func (s PoolInfo) GetApy() float64 {
	return s.Apy
}

// GetMinStake returns the value of MinStake.
func (s PoolInfo) GetMinStake() int64 {
	return s.MinStake
}

// GetCycleStart returns the value of CycleStart.
func (s PoolInfo) GetCycleStart() int64 {
	return s.CycleStart
}

// GetCycleEnd returns the value of CycleEnd.
func (s PoolInfo) GetCycleEnd() int64 {
	return s.CycleEnd
}

// SetAddress sets the value of Address.
func (s *PoolInfo) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *PoolInfo) SetName(val string) {
	s.Name = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PoolInfo) SetTotalAmount(val int64) {
	s.TotalAmount = val
}

// SetImplementation sets the value of Implementation.
func (s *PoolInfo) SetImplementation(val PoolInfoImplementation) {
	s.Implementation = val
}

// SetApy sets the value of Apy.
func (s *PoolInfo) SetApy(val float64) {
	s.Apy = val
}

// SetMinStake sets the value of MinStake.
func (s *PoolInfo) SetMinStake(val int64) {
	s.MinStake = val
}

// SetCycleStart sets the value of CycleStart.
func (s *PoolInfo) SetCycleStart(val int64) {
	s.CycleStart = val
}

// SetCycleEnd sets the value of CycleEnd.
func (s *PoolInfo) SetCycleEnd(val int64) {
	s.CycleEnd = val
}

func (*PoolInfo) stackingPoolInfoRes() {}

type PoolInfoImplementation string

const (
	PoolInfoImplementationWhales PoolInfoImplementation = "whales"
	PoolInfoImplementationTf     PoolInfoImplementation = "tf"
)

// Ref: #/components/schemas/Price
type Price struct {
	Value     string `json:"value"`
	TokenName string `json:"token_name"`
}

// GetValue returns the value of Value.
func (s Price) GetValue() string {
	return s.Value
}

// GetTokenName returns the value of TokenName.
func (s Price) GetTokenName() string {
	return s.TokenName
}

// SetValue sets the value of Value.
func (s *Price) SetValue(val string) {
	s.Value = val
}

// SetTokenName sets the value of TokenName.
func (s *Price) SetTokenName(val string) {
	s.TokenName = val
}

// Ref: #/components/schemas/RawAccount
type RawAccount struct {
	Address           string             `json:"address"`
	Balance           int64              `json:"balance"`
	Code              OptString          `json:"code"`
	Data              OptString          `json:"data"`
	LastTransactionLt uint64             `json:"last_transaction_lt"`
	Status            string             `json:"status"`
	Storage           AccountStorageInfo `json:"storage"`
}

// GetAddress returns the value of Address.
func (s RawAccount) GetAddress() string {
	return s.Address
}

// GetBalance returns the value of Balance.
func (s RawAccount) GetBalance() int64 {
	return s.Balance
}

// GetCode returns the value of Code.
func (s RawAccount) GetCode() OptString {
	return s.Code
}

// GetData returns the value of Data.
func (s RawAccount) GetData() OptString {
	return s.Data
}

// GetLastTransactionLt returns the value of LastTransactionLt.
func (s RawAccount) GetLastTransactionLt() uint64 {
	return s.LastTransactionLt
}

// GetStatus returns the value of Status.
func (s RawAccount) GetStatus() string {
	return s.Status
}

// GetStorage returns the value of Storage.
func (s RawAccount) GetStorage() AccountStorageInfo {
	return s.Storage
}

// SetAddress sets the value of Address.
func (s *RawAccount) SetAddress(val string) {
	s.Address = val
}

// SetBalance sets the value of Balance.
func (s *RawAccount) SetBalance(val int64) {
	s.Balance = val
}

// SetCode sets the value of Code.
func (s *RawAccount) SetCode(val OptString) {
	s.Code = val
}

// SetData sets the value of Data.
func (s *RawAccount) SetData(val OptString) {
	s.Data = val
}

// SetLastTransactionLt sets the value of LastTransactionLt.
func (s *RawAccount) SetLastTransactionLt(val uint64) {
	s.LastTransactionLt = val
}

// SetStatus sets the value of Status.
func (s *RawAccount) SetStatus(val string) {
	s.Status = val
}

// SetStorage sets the value of Storage.
func (s *RawAccount) SetStorage(val AccountStorageInfo) {
	s.Storage = val
}

func (*RawAccount) getRawAccountRes() {}

// Ref: #/components/schemas/Refund
type Refund struct {
	Type   RefundType `json:"type"`
	Origin string     `json:"origin"`
}

// GetType returns the value of Type.
func (s Refund) GetType() RefundType {
	return s.Type
}

// GetOrigin returns the value of Origin.
func (s Refund) GetOrigin() string {
	return s.Origin
}

// SetType sets the value of Type.
func (s *Refund) SetType(val RefundType) {
	s.Type = val
}

// SetOrigin sets the value of Origin.
func (s *Refund) SetOrigin(val string) {
	s.Origin = val
}

type RefundType string

const (
	RefundTypeDNSTon  RefundType = "DNS.ton"
	RefundTypeDNSTg   RefundType = "DNS.tg"
	RefundTypeGetGems RefundType = "GetGems"
)

// Ref: #/components/schemas/Sale
type Sale struct {
	Address string            `json:"address"`
	Market  AccountAddress    `json:"market"`
	Owner   OptAccountAddress `json:"owner"`
	Price   Price             `json:"price"`
}

// GetAddress returns the value of Address.
func (s Sale) GetAddress() string {
	return s.Address
}

// GetMarket returns the value of Market.
func (s Sale) GetMarket() AccountAddress {
	return s.Market
}

// GetOwner returns the value of Owner.
func (s Sale) GetOwner() OptAccountAddress {
	return s.Owner
}

// GetPrice returns the value of Price.
func (s Sale) GetPrice() Price {
	return s.Price
}

// SetAddress sets the value of Address.
func (s *Sale) SetAddress(val string) {
	s.Address = val
}

// SetMarket sets the value of Market.
func (s *Sale) SetMarket(val AccountAddress) {
	s.Market = val
}

// SetOwner sets the value of Owner.
func (s *Sale) SetOwner(val OptAccountAddress) {
	s.Owner = val
}

// SetPrice sets the value of Price.
func (s *Sale) SetPrice(val Price) {
	s.Price = val
}

// SendMessageOK is response for SendMessage operation.
type SendMessageOK struct{}

func (*SendMessageOK) sendMessageRes() {}

type SendMessageReq struct {
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s SendMessageReq) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *SendMessageReq) SetBoc(val string) {
	s.Boc = val
}

type StackingPoolsOK struct {
	Pools []PoolInfo `json:"pools"`
}

// GetPools returns the value of Pools.
func (s StackingPoolsOK) GetPools() []PoolInfo {
	return s.Pools
}

// SetPools sets the value of Pools.
func (s *StackingPoolsOK) SetPools(val []PoolInfo) {
	s.Pools = val
}

func (*StackingPoolsOK) stackingPoolsRes() {}

// Ref: #/components/schemas/StateInit
type StateInit struct {
	Code    OptString        `json:"code"`
	Data    OptString        `json:"data"`
	Library StateInitLibrary `json:"library"`
}

// GetCode returns the value of Code.
func (s StateInit) GetCode() OptString {
	return s.Code
}

// GetData returns the value of Data.
func (s StateInit) GetData() OptString {
	return s.Data
}

// GetLibrary returns the value of Library.
func (s StateInit) GetLibrary() StateInitLibrary {
	return s.Library
}

// SetCode sets the value of Code.
func (s *StateInit) SetCode(val OptString) {
	s.Code = val
}

// SetData sets the value of Data.
func (s *StateInit) SetData(val OptString) {
	s.Data = val
}

// SetLibrary sets the value of Library.
func (s *StateInit) SetLibrary(val StateInitLibrary) {
	s.Library = val
}

type StateInitLibrary map[string]string

func (s *StateInitLibrary) init() StateInitLibrary {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StoragePhase
type StoragePhase struct {
	FeesCollected int64           `json:"fees_collected"`
	FeesDue       OptInt64        `json:"fees_due"`
	StatusChange  AccStatusChange `json:"status_change"`
}

// GetFeesCollected returns the value of FeesCollected.
func (s StoragePhase) GetFeesCollected() int64 {
	return s.FeesCollected
}

// GetFeesDue returns the value of FeesDue.
func (s StoragePhase) GetFeesDue() OptInt64 {
	return s.FeesDue
}

// GetStatusChange returns the value of StatusChange.
func (s StoragePhase) GetStatusChange() AccStatusChange {
	return s.StatusChange
}

// SetFeesCollected sets the value of FeesCollected.
func (s *StoragePhase) SetFeesCollected(val int64) {
	s.FeesCollected = val
}

// SetFeesDue sets the value of FeesDue.
func (s *StoragePhase) SetFeesDue(val OptInt64) {
	s.FeesDue = val
}

// SetStatusChange sets the value of StatusChange.
func (s *StoragePhase) SetStatusChange(val AccStatusChange) {
	s.StatusChange = val
}

// Ref: #/components/schemas/Subscription
type Subscription struct {
	Address            string `json:"address"`
	WalletAddress      string `json:"wallet_address"`
	BeneficiaryAddress string `json:"beneficiary_address"`
	Amount             int64  `json:"amount"`
	Period             int64  `json:"period"`
	StartTime          int64  `json:"start_time"`
	Timeout            int64  `json:"timeout"`
	LastPaymentTime    int64  `json:"last_payment_time"`
	LastRequestTime    int64  `json:"last_request_time"`
	SubscriptionID     int64  `json:"subscription_id"`
	FailedAttempts     int32  `json:"failed_attempts"`
}

// GetAddress returns the value of Address.
func (s Subscription) GetAddress() string {
	return s.Address
}

// GetWalletAddress returns the value of WalletAddress.
func (s Subscription) GetWalletAddress() string {
	return s.WalletAddress
}

// GetBeneficiaryAddress returns the value of BeneficiaryAddress.
func (s Subscription) GetBeneficiaryAddress() string {
	return s.BeneficiaryAddress
}

// GetAmount returns the value of Amount.
func (s Subscription) GetAmount() int64 {
	return s.Amount
}

// GetPeriod returns the value of Period.
func (s Subscription) GetPeriod() int64 {
	return s.Period
}

// GetStartTime returns the value of StartTime.
func (s Subscription) GetStartTime() int64 {
	return s.StartTime
}

// GetTimeout returns the value of Timeout.
func (s Subscription) GetTimeout() int64 {
	return s.Timeout
}

// GetLastPaymentTime returns the value of LastPaymentTime.
func (s Subscription) GetLastPaymentTime() int64 {
	return s.LastPaymentTime
}

// GetLastRequestTime returns the value of LastRequestTime.
func (s Subscription) GetLastRequestTime() int64 {
	return s.LastRequestTime
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s Subscription) GetSubscriptionID() int64 {
	return s.SubscriptionID
}

// GetFailedAttempts returns the value of FailedAttempts.
func (s Subscription) GetFailedAttempts() int32 {
	return s.FailedAttempts
}

// SetAddress sets the value of Address.
func (s *Subscription) SetAddress(val string) {
	s.Address = val
}

// SetWalletAddress sets the value of WalletAddress.
func (s *Subscription) SetWalletAddress(val string) {
	s.WalletAddress = val
}

// SetBeneficiaryAddress sets the value of BeneficiaryAddress.
func (s *Subscription) SetBeneficiaryAddress(val string) {
	s.BeneficiaryAddress = val
}

// SetAmount sets the value of Amount.
func (s *Subscription) SetAmount(val int64) {
	s.Amount = val
}

// SetPeriod sets the value of Period.
func (s *Subscription) SetPeriod(val int64) {
	s.Period = val
}

// SetStartTime sets the value of StartTime.
func (s *Subscription) SetStartTime(val int64) {
	s.StartTime = val
}

// SetTimeout sets the value of Timeout.
func (s *Subscription) SetTimeout(val int64) {
	s.Timeout = val
}

// SetLastPaymentTime sets the value of LastPaymentTime.
func (s *Subscription) SetLastPaymentTime(val int64) {
	s.LastPaymentTime = val
}

// SetLastRequestTime sets the value of LastRequestTime.
func (s *Subscription) SetLastRequestTime(val int64) {
	s.LastRequestTime = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *Subscription) SetSubscriptionID(val int64) {
	s.SubscriptionID = val
}

// SetFailedAttempts sets the value of FailedAttempts.
func (s *Subscription) SetFailedAttempts(val int32) {
	s.FailedAttempts = val
}

// Ref: #/components/schemas/SubscriptionAction
type SubscriptionAction struct {
	Subscriber   AccountAddress `json:"subscriber"`
	Subscription string         `json:"subscription"`
	Beneficiary  AccountAddress `json:"beneficiary"`
	Amount       int64          `json:"amount"`
	Initial      bool           `json:"initial"`
}

// GetSubscriber returns the value of Subscriber.
func (s SubscriptionAction) GetSubscriber() AccountAddress {
	return s.Subscriber
}

// GetSubscription returns the value of Subscription.
func (s SubscriptionAction) GetSubscription() string {
	return s.Subscription
}

// GetBeneficiary returns the value of Beneficiary.
func (s SubscriptionAction) GetBeneficiary() AccountAddress {
	return s.Beneficiary
}

// GetAmount returns the value of Amount.
func (s SubscriptionAction) GetAmount() int64 {
	return s.Amount
}

// GetInitial returns the value of Initial.
func (s SubscriptionAction) GetInitial() bool {
	return s.Initial
}

// SetSubscriber sets the value of Subscriber.
func (s *SubscriptionAction) SetSubscriber(val AccountAddress) {
	s.Subscriber = val
}

// SetSubscription sets the value of Subscription.
func (s *SubscriptionAction) SetSubscription(val string) {
	s.Subscription = val
}

// SetBeneficiary sets the value of Beneficiary.
func (s *SubscriptionAction) SetBeneficiary(val AccountAddress) {
	s.Beneficiary = val
}

// SetAmount sets the value of Amount.
func (s *SubscriptionAction) SetAmount(val int64) {
	s.Amount = val
}

// SetInitial sets the value of Initial.
func (s *SubscriptionAction) SetInitial(val bool) {
	s.Initial = val
}

// Ref: #/components/schemas/Subscriptions
type Subscriptions struct {
	Subscriptions []Subscription `json:"subscriptions"`
}

// GetSubscriptions returns the value of Subscriptions.
func (s Subscriptions) GetSubscriptions() []Subscription {
	return s.Subscriptions
}

// SetSubscriptions sets the value of Subscriptions.
func (s *Subscriptions) SetSubscriptions(val []Subscription) {
	s.Subscriptions = val
}

func (*Subscriptions) getSubscriptionsByAccountRes() {}

// Ref: #/components/schemas/TonTransferAction
type TonTransferAction struct {
	Sender    AccountAddress `json:"sender"`
	Recipient AccountAddress `json:"recipient"`
	// Amount in nanotons.
	Amount  int64     `json:"amount"`
	Comment OptString `json:"comment"`
	// Raw hex encoded payload.
	Payload OptString `json:"payload"`
	Refund  OptRefund `json:"refund"`
}

// GetSender returns the value of Sender.
func (s TonTransferAction) GetSender() AccountAddress {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s TonTransferAction) GetRecipient() AccountAddress {
	return s.Recipient
}

// GetAmount returns the value of Amount.
func (s TonTransferAction) GetAmount() int64 {
	return s.Amount
}

// GetComment returns the value of Comment.
func (s TonTransferAction) GetComment() OptString {
	return s.Comment
}

// GetPayload returns the value of Payload.
func (s TonTransferAction) GetPayload() OptString {
	return s.Payload
}

// GetRefund returns the value of Refund.
func (s TonTransferAction) GetRefund() OptRefund {
	return s.Refund
}

// SetSender sets the value of Sender.
func (s *TonTransferAction) SetSender(val AccountAddress) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *TonTransferAction) SetRecipient(val AccountAddress) {
	s.Recipient = val
}

// SetAmount sets the value of Amount.
func (s *TonTransferAction) SetAmount(val int64) {
	s.Amount = val
}

// SetComment sets the value of Comment.
func (s *TonTransferAction) SetComment(val OptString) {
	s.Comment = val
}

// SetPayload sets the value of Payload.
func (s *TonTransferAction) SetPayload(val OptString) {
	s.Payload = val
}

// SetRefund sets the value of Refund.
func (s *TonTransferAction) SetRefund(val OptRefund) {
	s.Refund = val
}

// Ref: #/components/schemas/Trace
type Trace struct {
	Transaction Transaction `json:"transaction"`
	Children    []Trace     `json:"children"`
}

// GetTransaction returns the value of Transaction.
func (s Trace) GetTransaction() Transaction {
	return s.Transaction
}

// GetChildren returns the value of Children.
func (s Trace) GetChildren() []Trace {
	return s.Children
}

// SetTransaction sets the value of Transaction.
func (s *Trace) SetTransaction(val Transaction) {
	s.Transaction = val
}

// SetChildren sets the value of Children.
func (s *Trace) SetChildren(val []Trace) {
	s.Children = val
}

func (*Trace) getTraceRes() {}

// Ref: #/components/schemas/TraceId
type TraceId struct {
	ID    string `json:"id"`
	Utime int64  `json:"utime"`
}

// GetID returns the value of ID.
func (s TraceId) GetID() string {
	return s.ID
}

// GetUtime returns the value of Utime.
func (s TraceId) GetUtime() int64 {
	return s.Utime
}

// SetID sets the value of ID.
func (s *TraceId) SetID(val string) {
	s.ID = val
}

// SetUtime sets the value of Utime.
func (s *TraceId) SetUtime(val int64) {
	s.Utime = val
}

// Ref: #/components/schemas/TraceIds
type TraceIds struct {
	Traces []TraceId `json:"traces"`
}

// GetTraces returns the value of Traces.
func (s TraceIds) GetTraces() []TraceId {
	return s.Traces
}

// SetTraces sets the value of Traces.
func (s *TraceIds) SetTraces(val []TraceId) {
	s.Traces = val
}

func (*TraceIds) getTracesByAccountRes() {}

// Ref: #/components/schemas/Transaction
type Transaction struct {
	Hash            string             `json:"hash"`
	Lt              int64              `json:"lt"`
	Account         AccountAddress     `json:"account"`
	Success         bool               `json:"success"`
	Utime           int64              `json:"utime"`
	OrigStatus      AccountStatus      `json:"orig_status"`
	EndStatus       AccountStatus      `json:"end_status"`
	TotalFees       int64              `json:"total_fees"`
	TransactionType TransactionType    `json:"transaction_type"`
	StateUpdateOld  string             `json:"state_update_old"`
	StateUpdateNew  string             `json:"state_update_new"`
	InMsg           OptMessage         `json:"in_msg"`
	OutMsgs         []Message          `json:"out_msgs"`
	Block           string             `json:"block"`
	PrevTransHash   OptString          `json:"prev_trans_hash"`
	PrevTransLt     OptInt64           `json:"prev_trans_lt"`
	ComputePhase    OptComputePhase    `json:"compute_phase"`
	StoragePhase    OptStoragePhase    `json:"storage_phase"`
	CreditPhase     OptCreditPhase     `json:"credit_phase"`
	ActionPhase     OptActionPhase     `json:"action_phase"`
	BouncePhase     OptBouncePhaseType `json:"bounce_phase"`
	Aborted         bool               `json:"aborted"`
	Destroyed       bool               `json:"destroyed"`
}

// GetHash returns the value of Hash.
func (s Transaction) GetHash() string {
	return s.Hash
}

// GetLt returns the value of Lt.
func (s Transaction) GetLt() int64 {
	return s.Lt
}

// GetAccount returns the value of Account.
func (s Transaction) GetAccount() AccountAddress {
	return s.Account
}

// GetSuccess returns the value of Success.
func (s Transaction) GetSuccess() bool {
	return s.Success
}

// GetUtime returns the value of Utime.
func (s Transaction) GetUtime() int64 {
	return s.Utime
}

// GetOrigStatus returns the value of OrigStatus.
func (s Transaction) GetOrigStatus() AccountStatus {
	return s.OrigStatus
}

// GetEndStatus returns the value of EndStatus.
func (s Transaction) GetEndStatus() AccountStatus {
	return s.EndStatus
}

// GetTotalFees returns the value of TotalFees.
func (s Transaction) GetTotalFees() int64 {
	return s.TotalFees
}

// GetTransactionType returns the value of TransactionType.
func (s Transaction) GetTransactionType() TransactionType {
	return s.TransactionType
}

// GetStateUpdateOld returns the value of StateUpdateOld.
func (s Transaction) GetStateUpdateOld() string {
	return s.StateUpdateOld
}

// GetStateUpdateNew returns the value of StateUpdateNew.
func (s Transaction) GetStateUpdateNew() string {
	return s.StateUpdateNew
}

// GetInMsg returns the value of InMsg.
func (s Transaction) GetInMsg() OptMessage {
	return s.InMsg
}

// GetOutMsgs returns the value of OutMsgs.
func (s Transaction) GetOutMsgs() []Message {
	return s.OutMsgs
}

// GetBlock returns the value of Block.
func (s Transaction) GetBlock() string {
	return s.Block
}

// GetPrevTransHash returns the value of PrevTransHash.
func (s Transaction) GetPrevTransHash() OptString {
	return s.PrevTransHash
}

// GetPrevTransLt returns the value of PrevTransLt.
func (s Transaction) GetPrevTransLt() OptInt64 {
	return s.PrevTransLt
}

// GetComputePhase returns the value of ComputePhase.
func (s Transaction) GetComputePhase() OptComputePhase {
	return s.ComputePhase
}

// GetStoragePhase returns the value of StoragePhase.
func (s Transaction) GetStoragePhase() OptStoragePhase {
	return s.StoragePhase
}

// GetCreditPhase returns the value of CreditPhase.
func (s Transaction) GetCreditPhase() OptCreditPhase {
	return s.CreditPhase
}

// GetActionPhase returns the value of ActionPhase.
func (s Transaction) GetActionPhase() OptActionPhase {
	return s.ActionPhase
}

// GetBouncePhase returns the value of BouncePhase.
func (s Transaction) GetBouncePhase() OptBouncePhaseType {
	return s.BouncePhase
}

// GetAborted returns the value of Aborted.
func (s Transaction) GetAborted() bool {
	return s.Aborted
}

// GetDestroyed returns the value of Destroyed.
func (s Transaction) GetDestroyed() bool {
	return s.Destroyed
}

// SetHash sets the value of Hash.
func (s *Transaction) SetHash(val string) {
	s.Hash = val
}

// SetLt sets the value of Lt.
func (s *Transaction) SetLt(val int64) {
	s.Lt = val
}

// SetAccount sets the value of Account.
func (s *Transaction) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetSuccess sets the value of Success.
func (s *Transaction) SetSuccess(val bool) {
	s.Success = val
}

// SetUtime sets the value of Utime.
func (s *Transaction) SetUtime(val int64) {
	s.Utime = val
}

// SetOrigStatus sets the value of OrigStatus.
func (s *Transaction) SetOrigStatus(val AccountStatus) {
	s.OrigStatus = val
}

// SetEndStatus sets the value of EndStatus.
func (s *Transaction) SetEndStatus(val AccountStatus) {
	s.EndStatus = val
}

// SetTotalFees sets the value of TotalFees.
func (s *Transaction) SetTotalFees(val int64) {
	s.TotalFees = val
}

// SetTransactionType sets the value of TransactionType.
func (s *Transaction) SetTransactionType(val TransactionType) {
	s.TransactionType = val
}

// SetStateUpdateOld sets the value of StateUpdateOld.
func (s *Transaction) SetStateUpdateOld(val string) {
	s.StateUpdateOld = val
}

// SetStateUpdateNew sets the value of StateUpdateNew.
func (s *Transaction) SetStateUpdateNew(val string) {
	s.StateUpdateNew = val
}

// SetInMsg sets the value of InMsg.
func (s *Transaction) SetInMsg(val OptMessage) {
	s.InMsg = val
}

// SetOutMsgs sets the value of OutMsgs.
func (s *Transaction) SetOutMsgs(val []Message) {
	s.OutMsgs = val
}

// SetBlock sets the value of Block.
func (s *Transaction) SetBlock(val string) {
	s.Block = val
}

// SetPrevTransHash sets the value of PrevTransHash.
func (s *Transaction) SetPrevTransHash(val OptString) {
	s.PrevTransHash = val
}

// SetPrevTransLt sets the value of PrevTransLt.
func (s *Transaction) SetPrevTransLt(val OptInt64) {
	s.PrevTransLt = val
}

// SetComputePhase sets the value of ComputePhase.
func (s *Transaction) SetComputePhase(val OptComputePhase) {
	s.ComputePhase = val
}

// SetStoragePhase sets the value of StoragePhase.
func (s *Transaction) SetStoragePhase(val OptStoragePhase) {
	s.StoragePhase = val
}

// SetCreditPhase sets the value of CreditPhase.
func (s *Transaction) SetCreditPhase(val OptCreditPhase) {
	s.CreditPhase = val
}

// SetActionPhase sets the value of ActionPhase.
func (s *Transaction) SetActionPhase(val OptActionPhase) {
	s.ActionPhase = val
}

// SetBouncePhase sets the value of BouncePhase.
func (s *Transaction) SetBouncePhase(val OptBouncePhaseType) {
	s.BouncePhase = val
}

// SetAborted sets the value of Aborted.
func (s *Transaction) SetAborted(val bool) {
	s.Aborted = val
}

// SetDestroyed sets the value of Destroyed.
func (s *Transaction) SetDestroyed(val bool) {
	s.Destroyed = val
}

func (*Transaction) getTransactionRes() {}

// Ref: #/components/schemas/TransactionType
type TransactionType string

const (
	TransactionTypeTransOrd          TransactionType = "TransOrd"
	TransactionTypeTransTickTock     TransactionType = "TransTickTock"
	TransactionTypeTransSplitPrepare TransactionType = "TransSplitPrepare"
	TransactionTypeTransSplitInstall TransactionType = "TransSplitInstall"
	TransactionTypeTransMergePrepare TransactionType = "TransMergePrepare"
	TransactionTypeTransMergeInstall TransactionType = "TransMergeInstall"
	TransactionTypeTransStorage      TransactionType = "TransStorage"
)

// Ref: #/components/schemas/Transactions
type Transactions struct {
	Transactions []Transaction `json:"transactions"`
}

// GetTransactions returns the value of Transactions.
func (s Transactions) GetTransactions() []Transaction {
	return s.Transactions
}

// SetTransactions sets the value of Transactions.
func (s *Transactions) SetTransactions(val []Transaction) {
	s.Transactions = val
}

func (*Transactions) getAccountTransactionsRes() {}
func (*Transactions) getTransactionsRes()        {}

// Ref: #/components/schemas/UnSubscriptionAction
type UnSubscriptionAction struct {
	Subscriber   AccountAddress `json:"subscriber"`
	Subscription string         `json:"subscription"`
	Beneficiary  AccountAddress `json:"beneficiary"`
}

// GetSubscriber returns the value of Subscriber.
func (s UnSubscriptionAction) GetSubscriber() AccountAddress {
	return s.Subscriber
}

// GetSubscription returns the value of Subscription.
func (s UnSubscriptionAction) GetSubscription() string {
	return s.Subscription
}

// GetBeneficiary returns the value of Beneficiary.
func (s UnSubscriptionAction) GetBeneficiary() AccountAddress {
	return s.Beneficiary
}

// SetSubscriber sets the value of Subscriber.
func (s *UnSubscriptionAction) SetSubscriber(val AccountAddress) {
	s.Subscriber = val
}

// SetSubscription sets the value of Subscription.
func (s *UnSubscriptionAction) SetSubscription(val string) {
	s.Subscription = val
}

// SetBeneficiary sets the value of Beneficiary.
func (s *UnSubscriptionAction) SetBeneficiary(val AccountAddress) {
	s.Beneficiary = val
}

type UnauthorizedError struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s UnauthorizedError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnauthorizedError) SetError(val string) {
	s.Error = val
}

func (*UnauthorizedError) dnsBackResolveRes()            {}
func (*UnauthorizedError) dnsResolveRes()                {}
func (*UnauthorizedError) emulateMessageRes()            {}
func (*UnauthorizedError) execGetMethodRes()             {}
func (*UnauthorizedError) getAccountRes()                {}
func (*UnauthorizedError) getAccountTransactionsRes()    {}
func (*UnauthorizedError) getAllAuctionsRes()            {}
func (*UnauthorizedError) getBlockRes()                  {}
func (*UnauthorizedError) getConfigRes()                 {}
func (*UnauthorizedError) getDomainBidsRes()             {}
func (*UnauthorizedError) getEventRes()                  {}
func (*UnauthorizedError) getEventsByAccountRes()        {}
func (*UnauthorizedError) getJettonInfoRes()             {}
func (*UnauthorizedError) getJettonsBalancesRes()        {}
func (*UnauthorizedError) getMasterchainHeadRes()        {}
func (*UnauthorizedError) getNftCollectionRes()          {}
func (*UnauthorizedError) getNftCollectionsRes()         {}
func (*UnauthorizedError) getNftItemsByAddressesRes()    {}
func (*UnauthorizedError) getNftItemsByOwnerRes()        {}
func (*UnauthorizedError) getRawAccountRes()             {}
func (*UnauthorizedError) getSubscriptionsByAccountRes() {}
func (*UnauthorizedError) getTraceRes()                  {}
func (*UnauthorizedError) getTracesByAccountRes()        {}
func (*UnauthorizedError) getTransactionRes()            {}
func (*UnauthorizedError) getTransactionsRes()           {}
func (*UnauthorizedError) getValidatorsRes()             {}
func (*UnauthorizedError) poolsByNominatorsRes()         {}
func (*UnauthorizedError) sendMessageRes()               {}
func (*UnauthorizedError) stackingPoolInfoRes()          {}
func (*UnauthorizedError) stackingPoolsRes()             {}

// Ref: #/components/schemas/Validator
type Validator struct {
	Address string `json:"address"`
}

// GetAddress returns the value of Address.
func (s Validator) GetAddress() string {
	return s.Address
}

// SetAddress sets the value of Address.
func (s *Validator) SetAddress(val string) {
	s.Address = val
}

// Ref: #/components/schemas/Validators
type Validators struct {
	Transactions []Validator `json:"transactions"`
}

// GetTransactions returns the value of Transactions.
func (s Validators) GetTransactions() []Validator {
	return s.Transactions
}

// SetTransactions sets the value of Transactions.
func (s *Validators) SetTransactions(val []Validator) {
	s.Transactions = val
}

func (*Validators) getValidatorsRes() {}

// Ref: #/components/schemas/WalletDNS
type WalletDNS struct {
	Address         string   `json:"address"`
	IsWallet        bool     `json:"is_wallet"`
	HasMethodPubkey bool     `json:"has_method_pubkey"`
	HasMethodSeqno  bool     `json:"has_method_seqno"`
	Names           []string `json:"names"`
}

// GetAddress returns the value of Address.
func (s WalletDNS) GetAddress() string {
	return s.Address
}

// GetIsWallet returns the value of IsWallet.
func (s WalletDNS) GetIsWallet() bool {
	return s.IsWallet
}

// GetHasMethodPubkey returns the value of HasMethodPubkey.
func (s WalletDNS) GetHasMethodPubkey() bool {
	return s.HasMethodPubkey
}

// GetHasMethodSeqno returns the value of HasMethodSeqno.
func (s WalletDNS) GetHasMethodSeqno() bool {
	return s.HasMethodSeqno
}

// GetNames returns the value of Names.
func (s WalletDNS) GetNames() []string {
	return s.Names
}

// SetAddress sets the value of Address.
func (s *WalletDNS) SetAddress(val string) {
	s.Address = val
}

// SetIsWallet sets the value of IsWallet.
func (s *WalletDNS) SetIsWallet(val bool) {
	s.IsWallet = val
}

// SetHasMethodPubkey sets the value of HasMethodPubkey.
func (s *WalletDNS) SetHasMethodPubkey(val bool) {
	s.HasMethodPubkey = val
}

// SetHasMethodSeqno sets the value of HasMethodSeqno.
func (s *WalletDNS) SetHasMethodSeqno(val bool) {
	s.HasMethodSeqno = val
}

// SetNames sets the value of Names.
func (s *WalletDNS) SetNames(val []string) {
	s.Names = val
}
