// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AccStatusChange
type AccStatusChange string

const (
	AccStatusChangeAcstUnchanged AccStatusChange = "acst_unchanged"
	AccStatusChangeAcstFrozen    AccStatusChange = "acst_frozen"
	AccStatusChangeAcstDeleted   AccStatusChange = "acst_deleted"
)

// AllValues returns all AccStatusChange values.
func (AccStatusChange) AllValues() []AccStatusChange {
	return []AccStatusChange{
		AccStatusChangeAcstUnchanged,
		AccStatusChangeAcstFrozen,
		AccStatusChangeAcstDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccStatusChange) MarshalText() ([]byte, error) {
	switch s {
	case AccStatusChangeAcstUnchanged:
		return []byte(s), nil
	case AccStatusChangeAcstFrozen:
		return []byte(s), nil
	case AccStatusChangeAcstDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccStatusChange) UnmarshalText(data []byte) error {
	switch AccStatusChange(data) {
	case AccStatusChangeAcstUnchanged:
		*s = AccStatusChangeAcstUnchanged
		return nil
	case AccStatusChangeAcstFrozen:
		*s = AccStatusChangeAcstFrozen
		return nil
	case AccStatusChangeAcstDeleted:
		*s = AccStatusChangeAcstDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Account
type Account struct {
	Address string `json:"address"`
	Balance int64  `json:"balance"`
	// Unix timestamp.
	LastActivity int64         `json:"last_activity"`
	Status       AccountStatus `json:"status"`
	Interfaces   []string      `json:"interfaces"`
	Name         OptString     `json:"name"`
	IsScam       OptBool       `json:"is_scam"`
	Icon         OptString     `json:"icon"`
	MemoRequired OptBool       `json:"memo_required"`
	GetMethods   []string      `json:"get_methods"`
	IsSuspended  OptBool       `json:"is_suspended"`
	IsWallet     bool          `json:"is_wallet"`
}

// GetAddress returns the value of Address.
func (s *Account) GetAddress() string {
	return s.Address
}

// GetBalance returns the value of Balance.
func (s *Account) GetBalance() int64 {
	return s.Balance
}

// GetLastActivity returns the value of LastActivity.
func (s *Account) GetLastActivity() int64 {
	return s.LastActivity
}

// GetStatus returns the value of Status.
func (s *Account) GetStatus() AccountStatus {
	return s.Status
}

// GetInterfaces returns the value of Interfaces.
func (s *Account) GetInterfaces() []string {
	return s.Interfaces
}

// GetName returns the value of Name.
func (s *Account) GetName() OptString {
	return s.Name
}

// GetIsScam returns the value of IsScam.
func (s *Account) GetIsScam() OptBool {
	return s.IsScam
}

// GetIcon returns the value of Icon.
func (s *Account) GetIcon() OptString {
	return s.Icon
}

// GetMemoRequired returns the value of MemoRequired.
func (s *Account) GetMemoRequired() OptBool {
	return s.MemoRequired
}

// GetGetMethods returns the value of GetMethods.
func (s *Account) GetGetMethods() []string {
	return s.GetMethods
}

// GetIsSuspended returns the value of IsSuspended.
func (s *Account) GetIsSuspended() OptBool {
	return s.IsSuspended
}

// GetIsWallet returns the value of IsWallet.
func (s *Account) GetIsWallet() bool {
	return s.IsWallet
}

// SetAddress sets the value of Address.
func (s *Account) SetAddress(val string) {
	s.Address = val
}

// SetBalance sets the value of Balance.
func (s *Account) SetBalance(val int64) {
	s.Balance = val
}

// SetLastActivity sets the value of LastActivity.
func (s *Account) SetLastActivity(val int64) {
	s.LastActivity = val
}

// SetStatus sets the value of Status.
func (s *Account) SetStatus(val AccountStatus) {
	s.Status = val
}

// SetInterfaces sets the value of Interfaces.
func (s *Account) SetInterfaces(val []string) {
	s.Interfaces = val
}

// SetName sets the value of Name.
func (s *Account) SetName(val OptString) {
	s.Name = val
}

// SetIsScam sets the value of IsScam.
func (s *Account) SetIsScam(val OptBool) {
	s.IsScam = val
}

// SetIcon sets the value of Icon.
func (s *Account) SetIcon(val OptString) {
	s.Icon = val
}

// SetMemoRequired sets the value of MemoRequired.
func (s *Account) SetMemoRequired(val OptBool) {
	s.MemoRequired = val
}

// SetGetMethods sets the value of GetMethods.
func (s *Account) SetGetMethods(val []string) {
	s.GetMethods = val
}

// SetIsSuspended sets the value of IsSuspended.
func (s *Account) SetIsSuspended(val OptBool) {
	s.IsSuspended = val
}

// SetIsWallet sets the value of IsWallet.
func (s *Account) SetIsWallet(val bool) {
	s.IsWallet = val
}

// Ref: #/components/schemas/AccountAddress
type AccountAddress struct {
	Address string `json:"address"`
	// Display name. Data collected from different sources like moderation lists, dns, collections names
	// and over.
	Name OptString `json:"name"`
	// Is this account was marked as part of scammers activity.
	IsScam   bool      `json:"is_scam"`
	Icon     OptString `json:"icon"`
	IsWallet bool      `json:"is_wallet"`
}

// GetAddress returns the value of Address.
func (s *AccountAddress) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s *AccountAddress) GetName() OptString {
	return s.Name
}

// GetIsScam returns the value of IsScam.
func (s *AccountAddress) GetIsScam() bool {
	return s.IsScam
}

// GetIcon returns the value of Icon.
func (s *AccountAddress) GetIcon() OptString {
	return s.Icon
}

// GetIsWallet returns the value of IsWallet.
func (s *AccountAddress) GetIsWallet() bool {
	return s.IsWallet
}

// SetAddress sets the value of Address.
func (s *AccountAddress) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *AccountAddress) SetName(val OptString) {
	s.Name = val
}

// SetIsScam sets the value of IsScam.
func (s *AccountAddress) SetIsScam(val bool) {
	s.IsScam = val
}

// SetIcon sets the value of Icon.
func (s *AccountAddress) SetIcon(val OptString) {
	s.Icon = val
}

// SetIsWallet sets the value of IsWallet.
func (s *AccountAddress) SetIsWallet(val bool) {
	s.IsWallet = val
}

// An event is built on top of a trace which is a series of transactions caused by one inbound
// message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where
// a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT
// Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top
// of actions because actions can be changed at any time.
// Ref: #/components/schemas/AccountEvent
type AccountEvent struct {
	EventID   string         `json:"event_id"`
	Account   AccountAddress `json:"account"`
	Timestamp int64          `json:"timestamp"`
	Actions   []Action       `json:"actions"`
	// Scam.
	IsScam bool  `json:"is_scam"`
	Lt     int64 `json:"lt"`
	// Event is not finished yet. Transactions still happening.
	InProgress bool `json:"in_progress"`
	// TODO.
	Extra int64 `json:"extra"`
}

// GetEventID returns the value of EventID.
func (s *AccountEvent) GetEventID() string {
	return s.EventID
}

// GetAccount returns the value of Account.
func (s *AccountEvent) GetAccount() AccountAddress {
	return s.Account
}

// GetTimestamp returns the value of Timestamp.
func (s *AccountEvent) GetTimestamp() int64 {
	return s.Timestamp
}

// GetActions returns the value of Actions.
func (s *AccountEvent) GetActions() []Action {
	return s.Actions
}

// GetIsScam returns the value of IsScam.
func (s *AccountEvent) GetIsScam() bool {
	return s.IsScam
}

// GetLt returns the value of Lt.
func (s *AccountEvent) GetLt() int64 {
	return s.Lt
}

// GetInProgress returns the value of InProgress.
func (s *AccountEvent) GetInProgress() bool {
	return s.InProgress
}

// GetExtra returns the value of Extra.
func (s *AccountEvent) GetExtra() int64 {
	return s.Extra
}

// SetEventID sets the value of EventID.
func (s *AccountEvent) SetEventID(val string) {
	s.EventID = val
}

// SetAccount sets the value of Account.
func (s *AccountEvent) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetTimestamp sets the value of Timestamp.
func (s *AccountEvent) SetTimestamp(val int64) {
	s.Timestamp = val
}

// SetActions sets the value of Actions.
func (s *AccountEvent) SetActions(val []Action) {
	s.Actions = val
}

// SetIsScam sets the value of IsScam.
func (s *AccountEvent) SetIsScam(val bool) {
	s.IsScam = val
}

// SetLt sets the value of Lt.
func (s *AccountEvent) SetLt(val int64) {
	s.Lt = val
}

// SetInProgress sets the value of InProgress.
func (s *AccountEvent) SetInProgress(val bool) {
	s.InProgress = val
}

// SetExtra sets the value of Extra.
func (s *AccountEvent) SetExtra(val int64) {
	s.Extra = val
}

// Ref: #/components/schemas/AccountEvents
type AccountEvents struct {
	Events   []AccountEvent `json:"events"`
	NextFrom int64          `json:"next_from"`
}

// GetEvents returns the value of Events.
func (s *AccountEvents) GetEvents() []AccountEvent {
	return s.Events
}

// GetNextFrom returns the value of NextFrom.
func (s *AccountEvents) GetNextFrom() int64 {
	return s.NextFrom
}

// SetEvents sets the value of Events.
func (s *AccountEvents) SetEvents(val []AccountEvent) {
	s.Events = val
}

// SetNextFrom sets the value of NextFrom.
func (s *AccountEvents) SetNextFrom(val int64) {
	s.NextFrom = val
}

// Ref: #/components/schemas/AccountInfoByStateInit
type AccountInfoByStateInit struct {
	PublicKey string `json:"public_key"`
	Address   string `json:"address"`
}

// GetPublicKey returns the value of PublicKey.
func (s *AccountInfoByStateInit) GetPublicKey() string {
	return s.PublicKey
}

// GetAddress returns the value of Address.
func (s *AccountInfoByStateInit) GetAddress() string {
	return s.Address
}

// SetPublicKey sets the value of PublicKey.
func (s *AccountInfoByStateInit) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetAddress sets the value of Address.
func (s *AccountInfoByStateInit) SetAddress(val string) {
	s.Address = val
}

// Ref: #/components/schemas/AccountStaking
type AccountStaking struct {
	Pools []AccountStakingInfo `json:"pools"`
}

// GetPools returns the value of Pools.
func (s *AccountStaking) GetPools() []AccountStakingInfo {
	return s.Pools
}

// SetPools sets the value of Pools.
func (s *AccountStaking) SetPools(val []AccountStakingInfo) {
	s.Pools = val
}

// Ref: #/components/schemas/AccountStakingInfo
type AccountStakingInfo struct {
	Pool            string `json:"pool"`
	Amount          int64  `json:"amount"`
	PendingDeposit  int64  `json:"pending_deposit"`
	PendingWithdraw int64  `json:"pending_withdraw"`
	ReadyWithdraw   int64  `json:"ready_withdraw"`
}

// GetPool returns the value of Pool.
func (s *AccountStakingInfo) GetPool() string {
	return s.Pool
}

// GetAmount returns the value of Amount.
func (s *AccountStakingInfo) GetAmount() int64 {
	return s.Amount
}

// GetPendingDeposit returns the value of PendingDeposit.
func (s *AccountStakingInfo) GetPendingDeposit() int64 {
	return s.PendingDeposit
}

// GetPendingWithdraw returns the value of PendingWithdraw.
func (s *AccountStakingInfo) GetPendingWithdraw() int64 {
	return s.PendingWithdraw
}

// GetReadyWithdraw returns the value of ReadyWithdraw.
func (s *AccountStakingInfo) GetReadyWithdraw() int64 {
	return s.ReadyWithdraw
}

// SetPool sets the value of Pool.
func (s *AccountStakingInfo) SetPool(val string) {
	s.Pool = val
}

// SetAmount sets the value of Amount.
func (s *AccountStakingInfo) SetAmount(val int64) {
	s.Amount = val
}

// SetPendingDeposit sets the value of PendingDeposit.
func (s *AccountStakingInfo) SetPendingDeposit(val int64) {
	s.PendingDeposit = val
}

// SetPendingWithdraw sets the value of PendingWithdraw.
func (s *AccountStakingInfo) SetPendingWithdraw(val int64) {
	s.PendingWithdraw = val
}

// SetReadyWithdraw sets the value of ReadyWithdraw.
func (s *AccountStakingInfo) SetReadyWithdraw(val int64) {
	s.ReadyWithdraw = val
}

// Ref: #/components/schemas/AccountStatus
type AccountStatus string

const (
	AccountStatusNonexist AccountStatus = "nonexist"
	AccountStatusUninit   AccountStatus = "uninit"
	AccountStatusActive   AccountStatus = "active"
	AccountStatusFrozen   AccountStatus = "frozen"
)

// AllValues returns all AccountStatus values.
func (AccountStatus) AllValues() []AccountStatus {
	return []AccountStatus{
		AccountStatusNonexist,
		AccountStatusUninit,
		AccountStatusActive,
		AccountStatusFrozen,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountStatus) MarshalText() ([]byte, error) {
	switch s {
	case AccountStatusNonexist:
		return []byte(s), nil
	case AccountStatusUninit:
		return []byte(s), nil
	case AccountStatusActive:
		return []byte(s), nil
	case AccountStatusFrozen:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountStatus) UnmarshalText(data []byte) error {
	switch AccountStatus(data) {
	case AccountStatusNonexist:
		*s = AccountStatusNonexist
		return nil
	case AccountStatusUninit:
		*s = AccountStatusUninit
		return nil
	case AccountStatusActive:
		*s = AccountStatusActive
		return nil
	case AccountStatusFrozen:
		*s = AccountStatusFrozen
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AccountStorageInfo
type AccountStorageInfo struct {
	UsedCells       int64 `json:"used_cells"`
	UsedBits        int64 `json:"used_bits"`
	UsedPublicCells int64 `json:"used_public_cells"`
	LastPaid        int64 `json:"last_paid"`
	DuePayment      int64 `json:"due_payment"`
}

// GetUsedCells returns the value of UsedCells.
func (s *AccountStorageInfo) GetUsedCells() int64 {
	return s.UsedCells
}

// GetUsedBits returns the value of UsedBits.
func (s *AccountStorageInfo) GetUsedBits() int64 {
	return s.UsedBits
}

// GetUsedPublicCells returns the value of UsedPublicCells.
func (s *AccountStorageInfo) GetUsedPublicCells() int64 {
	return s.UsedPublicCells
}

// GetLastPaid returns the value of LastPaid.
func (s *AccountStorageInfo) GetLastPaid() int64 {
	return s.LastPaid
}

// GetDuePayment returns the value of DuePayment.
func (s *AccountStorageInfo) GetDuePayment() int64 {
	return s.DuePayment
}

// SetUsedCells sets the value of UsedCells.
func (s *AccountStorageInfo) SetUsedCells(val int64) {
	s.UsedCells = val
}

// SetUsedBits sets the value of UsedBits.
func (s *AccountStorageInfo) SetUsedBits(val int64) {
	s.UsedBits = val
}

// SetUsedPublicCells sets the value of UsedPublicCells.
func (s *AccountStorageInfo) SetUsedPublicCells(val int64) {
	s.UsedPublicCells = val
}

// SetLastPaid sets the value of LastPaid.
func (s *AccountStorageInfo) SetLastPaid(val int64) {
	s.LastPaid = val
}

// SetDuePayment sets the value of DuePayment.
func (s *AccountStorageInfo) SetDuePayment(val int64) {
	s.DuePayment = val
}

// Ref: #/components/schemas/Accounts
type Accounts struct {
	Accounts []Account `json:"accounts"`
}

// GetAccounts returns the value of Accounts.
func (s *Accounts) GetAccounts() []Account {
	return s.Accounts
}

// SetAccounts sets the value of Accounts.
func (s *Accounts) SetAccounts(val []Account) {
	s.Accounts = val
}

// Ref: #/components/schemas/Action
type Action struct {
	Type                  ActionType                     `json:"type"`
	Status                ActionStatus                   `json:"status"`
	TonTransfer           OptTonTransferAction           `json:"TonTransfer"`
	ContractDeploy        OptContractDeployAction        `json:"ContractDeploy"`
	JettonTransfer        OptJettonTransferAction        `json:"JettonTransfer"`
	JettonBurn            OptJettonBurnAction            `json:"JettonBurn"`
	JettonMint            OptJettonMintAction            `json:"JettonMint"`
	NftItemTransfer       OptNftItemTransferAction       `json:"NftItemTransfer"`
	Subscribe             OptSubscriptionAction          `json:"Subscribe"`
	UnSubscribe           OptUnSubscriptionAction        `json:"UnSubscribe"`
	AuctionBid            OptAuctionBidAction            `json:"AuctionBid"`
	NftPurchase           OptNftPurchaseAction           `json:"NftPurchase"`
	DepositStake          OptDepositStakeAction          `json:"DepositStake"`
	WithdrawStake         OptWithdrawStakeAction         `json:"WithdrawStake"`
	WithdrawStakeRequest  OptWithdrawStakeRequestAction  `json:"WithdrawStakeRequest"`
	ElectionsDepositStake OptElectionsDepositStakeAction `json:"ElectionsDepositStake"`
	ElectionsRecoverStake OptElectionsRecoverStakeAction `json:"ElectionsRecoverStake"`
	JettonSwap            OptJettonSwapAction            `json:"JettonSwap"`
	SmartContractExec     OptSmartContractAction         `json:"SmartContractExec"`
	DomainRenew           OptDomainRenewAction           `json:"DomainRenew"`
	InscriptionTransfer   OptInscriptionTransferAction   `json:"InscriptionTransfer"`
	InscriptionMint       OptInscriptionMintAction       `json:"InscriptionMint"`
	SimplePreview         ActionSimplePreview            `json:"simple_preview"`
	BaseTransactions      []string                       `json:"base_transactions"`
}

// GetType returns the value of Type.
func (s *Action) GetType() ActionType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *Action) GetStatus() ActionStatus {
	return s.Status
}

// GetTonTransfer returns the value of TonTransfer.
func (s *Action) GetTonTransfer() OptTonTransferAction {
	return s.TonTransfer
}

// GetContractDeploy returns the value of ContractDeploy.
func (s *Action) GetContractDeploy() OptContractDeployAction {
	return s.ContractDeploy
}

// GetJettonTransfer returns the value of JettonTransfer.
func (s *Action) GetJettonTransfer() OptJettonTransferAction {
	return s.JettonTransfer
}

// GetJettonBurn returns the value of JettonBurn.
func (s *Action) GetJettonBurn() OptJettonBurnAction {
	return s.JettonBurn
}

// GetJettonMint returns the value of JettonMint.
func (s *Action) GetJettonMint() OptJettonMintAction {
	return s.JettonMint
}

// GetNftItemTransfer returns the value of NftItemTransfer.
func (s *Action) GetNftItemTransfer() OptNftItemTransferAction {
	return s.NftItemTransfer
}

// GetSubscribe returns the value of Subscribe.
func (s *Action) GetSubscribe() OptSubscriptionAction {
	return s.Subscribe
}

// GetUnSubscribe returns the value of UnSubscribe.
func (s *Action) GetUnSubscribe() OptUnSubscriptionAction {
	return s.UnSubscribe
}

// GetAuctionBid returns the value of AuctionBid.
func (s *Action) GetAuctionBid() OptAuctionBidAction {
	return s.AuctionBid
}

// GetNftPurchase returns the value of NftPurchase.
func (s *Action) GetNftPurchase() OptNftPurchaseAction {
	return s.NftPurchase
}

// GetDepositStake returns the value of DepositStake.
func (s *Action) GetDepositStake() OptDepositStakeAction {
	return s.DepositStake
}

// GetWithdrawStake returns the value of WithdrawStake.
func (s *Action) GetWithdrawStake() OptWithdrawStakeAction {
	return s.WithdrawStake
}

// GetWithdrawStakeRequest returns the value of WithdrawStakeRequest.
func (s *Action) GetWithdrawStakeRequest() OptWithdrawStakeRequestAction {
	return s.WithdrawStakeRequest
}

// GetElectionsDepositStake returns the value of ElectionsDepositStake.
func (s *Action) GetElectionsDepositStake() OptElectionsDepositStakeAction {
	return s.ElectionsDepositStake
}

// GetElectionsRecoverStake returns the value of ElectionsRecoverStake.
func (s *Action) GetElectionsRecoverStake() OptElectionsRecoverStakeAction {
	return s.ElectionsRecoverStake
}

// GetJettonSwap returns the value of JettonSwap.
func (s *Action) GetJettonSwap() OptJettonSwapAction {
	return s.JettonSwap
}

// GetSmartContractExec returns the value of SmartContractExec.
func (s *Action) GetSmartContractExec() OptSmartContractAction {
	return s.SmartContractExec
}

// GetDomainRenew returns the value of DomainRenew.
func (s *Action) GetDomainRenew() OptDomainRenewAction {
	return s.DomainRenew
}

// GetInscriptionTransfer returns the value of InscriptionTransfer.
func (s *Action) GetInscriptionTransfer() OptInscriptionTransferAction {
	return s.InscriptionTransfer
}

// GetInscriptionMint returns the value of InscriptionMint.
func (s *Action) GetInscriptionMint() OptInscriptionMintAction {
	return s.InscriptionMint
}

// GetSimplePreview returns the value of SimplePreview.
func (s *Action) GetSimplePreview() ActionSimplePreview {
	return s.SimplePreview
}

// GetBaseTransactions returns the value of BaseTransactions.
func (s *Action) GetBaseTransactions() []string {
	return s.BaseTransactions
}

// SetType sets the value of Type.
func (s *Action) SetType(val ActionType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *Action) SetStatus(val ActionStatus) {
	s.Status = val
}

// SetTonTransfer sets the value of TonTransfer.
func (s *Action) SetTonTransfer(val OptTonTransferAction) {
	s.TonTransfer = val
}

// SetContractDeploy sets the value of ContractDeploy.
func (s *Action) SetContractDeploy(val OptContractDeployAction) {
	s.ContractDeploy = val
}

// SetJettonTransfer sets the value of JettonTransfer.
func (s *Action) SetJettonTransfer(val OptJettonTransferAction) {
	s.JettonTransfer = val
}

// SetJettonBurn sets the value of JettonBurn.
func (s *Action) SetJettonBurn(val OptJettonBurnAction) {
	s.JettonBurn = val
}

// SetJettonMint sets the value of JettonMint.
func (s *Action) SetJettonMint(val OptJettonMintAction) {
	s.JettonMint = val
}

// SetNftItemTransfer sets the value of NftItemTransfer.
func (s *Action) SetNftItemTransfer(val OptNftItemTransferAction) {
	s.NftItemTransfer = val
}

// SetSubscribe sets the value of Subscribe.
func (s *Action) SetSubscribe(val OptSubscriptionAction) {
	s.Subscribe = val
}

// SetUnSubscribe sets the value of UnSubscribe.
func (s *Action) SetUnSubscribe(val OptUnSubscriptionAction) {
	s.UnSubscribe = val
}

// SetAuctionBid sets the value of AuctionBid.
func (s *Action) SetAuctionBid(val OptAuctionBidAction) {
	s.AuctionBid = val
}

// SetNftPurchase sets the value of NftPurchase.
func (s *Action) SetNftPurchase(val OptNftPurchaseAction) {
	s.NftPurchase = val
}

// SetDepositStake sets the value of DepositStake.
func (s *Action) SetDepositStake(val OptDepositStakeAction) {
	s.DepositStake = val
}

// SetWithdrawStake sets the value of WithdrawStake.
func (s *Action) SetWithdrawStake(val OptWithdrawStakeAction) {
	s.WithdrawStake = val
}

// SetWithdrawStakeRequest sets the value of WithdrawStakeRequest.
func (s *Action) SetWithdrawStakeRequest(val OptWithdrawStakeRequestAction) {
	s.WithdrawStakeRequest = val
}

// SetElectionsDepositStake sets the value of ElectionsDepositStake.
func (s *Action) SetElectionsDepositStake(val OptElectionsDepositStakeAction) {
	s.ElectionsDepositStake = val
}

// SetElectionsRecoverStake sets the value of ElectionsRecoverStake.
func (s *Action) SetElectionsRecoverStake(val OptElectionsRecoverStakeAction) {
	s.ElectionsRecoverStake = val
}

// SetJettonSwap sets the value of JettonSwap.
func (s *Action) SetJettonSwap(val OptJettonSwapAction) {
	s.JettonSwap = val
}

// SetSmartContractExec sets the value of SmartContractExec.
func (s *Action) SetSmartContractExec(val OptSmartContractAction) {
	s.SmartContractExec = val
}

// SetDomainRenew sets the value of DomainRenew.
func (s *Action) SetDomainRenew(val OptDomainRenewAction) {
	s.DomainRenew = val
}

// SetInscriptionTransfer sets the value of InscriptionTransfer.
func (s *Action) SetInscriptionTransfer(val OptInscriptionTransferAction) {
	s.InscriptionTransfer = val
}

// SetInscriptionMint sets the value of InscriptionMint.
func (s *Action) SetInscriptionMint(val OptInscriptionMintAction) {
	s.InscriptionMint = val
}

// SetSimplePreview sets the value of SimplePreview.
func (s *Action) SetSimplePreview(val ActionSimplePreview) {
	s.SimplePreview = val
}

// SetBaseTransactions sets the value of BaseTransactions.
func (s *Action) SetBaseTransactions(val []string) {
	s.BaseTransactions = val
}

// Ref: #/components/schemas/ActionPhase
type ActionPhase struct {
	Success               bool      `json:"success"`
	ResultCode            int32     `json:"result_code"`
	TotalActions          int32     `json:"total_actions"`
	SkippedActions        int32     `json:"skipped_actions"`
	FwdFees               int64     `json:"fwd_fees"`
	TotalFees             int64     `json:"total_fees"`
	ResultCodeDescription OptString `json:"result_code_description"`
}

// GetSuccess returns the value of Success.
func (s *ActionPhase) GetSuccess() bool {
	return s.Success
}

// GetResultCode returns the value of ResultCode.
func (s *ActionPhase) GetResultCode() int32 {
	return s.ResultCode
}

// GetTotalActions returns the value of TotalActions.
func (s *ActionPhase) GetTotalActions() int32 {
	return s.TotalActions
}

// GetSkippedActions returns the value of SkippedActions.
func (s *ActionPhase) GetSkippedActions() int32 {
	return s.SkippedActions
}

// GetFwdFees returns the value of FwdFees.
func (s *ActionPhase) GetFwdFees() int64 {
	return s.FwdFees
}

// GetTotalFees returns the value of TotalFees.
func (s *ActionPhase) GetTotalFees() int64 {
	return s.TotalFees
}

// GetResultCodeDescription returns the value of ResultCodeDescription.
func (s *ActionPhase) GetResultCodeDescription() OptString {
	return s.ResultCodeDescription
}

// SetSuccess sets the value of Success.
func (s *ActionPhase) SetSuccess(val bool) {
	s.Success = val
}

// SetResultCode sets the value of ResultCode.
func (s *ActionPhase) SetResultCode(val int32) {
	s.ResultCode = val
}

// SetTotalActions sets the value of TotalActions.
func (s *ActionPhase) SetTotalActions(val int32) {
	s.TotalActions = val
}

// SetSkippedActions sets the value of SkippedActions.
func (s *ActionPhase) SetSkippedActions(val int32) {
	s.SkippedActions = val
}

// SetFwdFees sets the value of FwdFees.
func (s *ActionPhase) SetFwdFees(val int64) {
	s.FwdFees = val
}

// SetTotalFees sets the value of TotalFees.
func (s *ActionPhase) SetTotalFees(val int64) {
	s.TotalFees = val
}

// SetResultCodeDescription sets the value of ResultCodeDescription.
func (s *ActionPhase) SetResultCodeDescription(val OptString) {
	s.ResultCodeDescription = val
}

// Shortly describes what this action is about.
// Ref: #/components/schemas/ActionSimplePreview
type ActionSimplePreview struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	// A link to an image for this particular action.
	ActionImage OptString `json:"action_image"`
	Value       OptString `json:"value"`
	// A link to an image that depicts this action's asset.
	ValueImage OptString        `json:"value_image"`
	Accounts   []AccountAddress `json:"accounts"`
}

// GetName returns the value of Name.
func (s *ActionSimplePreview) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ActionSimplePreview) GetDescription() string {
	return s.Description
}

// GetActionImage returns the value of ActionImage.
func (s *ActionSimplePreview) GetActionImage() OptString {
	return s.ActionImage
}

// GetValue returns the value of Value.
func (s *ActionSimplePreview) GetValue() OptString {
	return s.Value
}

// GetValueImage returns the value of ValueImage.
func (s *ActionSimplePreview) GetValueImage() OptString {
	return s.ValueImage
}

// GetAccounts returns the value of Accounts.
func (s *ActionSimplePreview) GetAccounts() []AccountAddress {
	return s.Accounts
}

// SetName sets the value of Name.
func (s *ActionSimplePreview) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ActionSimplePreview) SetDescription(val string) {
	s.Description = val
}

// SetActionImage sets the value of ActionImage.
func (s *ActionSimplePreview) SetActionImage(val OptString) {
	s.ActionImage = val
}

// SetValue sets the value of Value.
func (s *ActionSimplePreview) SetValue(val OptString) {
	s.Value = val
}

// SetValueImage sets the value of ValueImage.
func (s *ActionSimplePreview) SetValueImage(val OptString) {
	s.ValueImage = val
}

// SetAccounts sets the value of Accounts.
func (s *ActionSimplePreview) SetAccounts(val []AccountAddress) {
	s.Accounts = val
}

type ActionStatus string

const (
	ActionStatusOk     ActionStatus = "ok"
	ActionStatusFailed ActionStatus = "failed"
)

// AllValues returns all ActionStatus values.
func (ActionStatus) AllValues() []ActionStatus {
	return []ActionStatus{
		ActionStatusOk,
		ActionStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActionStatus) MarshalText() ([]byte, error) {
	switch s {
	case ActionStatusOk:
		return []byte(s), nil
	case ActionStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionStatus) UnmarshalText(data []byte) error {
	switch ActionStatus(data) {
	case ActionStatusOk:
		*s = ActionStatusOk
		return nil
	case ActionStatusFailed:
		*s = ActionStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActionType string

const (
	ActionTypeTonTransfer           ActionType = "TonTransfer"
	ActionTypeJettonTransfer        ActionType = "JettonTransfer"
	ActionTypeJettonBurn            ActionType = "JettonBurn"
	ActionTypeJettonMint            ActionType = "JettonMint"
	ActionTypeNftItemTransfer       ActionType = "NftItemTransfer"
	ActionTypeContractDeploy        ActionType = "ContractDeploy"
	ActionTypeSubscribe             ActionType = "Subscribe"
	ActionTypeUnSubscribe           ActionType = "UnSubscribe"
	ActionTypeAuctionBid            ActionType = "AuctionBid"
	ActionTypeNftPurchase           ActionType = "NftPurchase"
	ActionTypeDepositStake          ActionType = "DepositStake"
	ActionTypeWithdrawStake         ActionType = "WithdrawStake"
	ActionTypeWithdrawStakeRequest  ActionType = "WithdrawStakeRequest"
	ActionTypeJettonSwap            ActionType = "JettonSwap"
	ActionTypeSmartContractExec     ActionType = "SmartContractExec"
	ActionTypeElectionsRecoverStake ActionType = "ElectionsRecoverStake"
	ActionTypeElectionsDepositStake ActionType = "ElectionsDepositStake"
	ActionTypeDomainRenew           ActionType = "DomainRenew"
	ActionTypeInscriptionTransfer   ActionType = "InscriptionTransfer"
	ActionTypeInscriptionMint       ActionType = "InscriptionMint"
	ActionTypeUnknown               ActionType = "Unknown"
)

// AllValues returns all ActionType values.
func (ActionType) AllValues() []ActionType {
	return []ActionType{
		ActionTypeTonTransfer,
		ActionTypeJettonTransfer,
		ActionTypeJettonBurn,
		ActionTypeJettonMint,
		ActionTypeNftItemTransfer,
		ActionTypeContractDeploy,
		ActionTypeSubscribe,
		ActionTypeUnSubscribe,
		ActionTypeAuctionBid,
		ActionTypeNftPurchase,
		ActionTypeDepositStake,
		ActionTypeWithdrawStake,
		ActionTypeWithdrawStakeRequest,
		ActionTypeJettonSwap,
		ActionTypeSmartContractExec,
		ActionTypeElectionsRecoverStake,
		ActionTypeElectionsDepositStake,
		ActionTypeDomainRenew,
		ActionTypeInscriptionTransfer,
		ActionTypeInscriptionMint,
		ActionTypeUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActionType) MarshalText() ([]byte, error) {
	switch s {
	case ActionTypeTonTransfer:
		return []byte(s), nil
	case ActionTypeJettonTransfer:
		return []byte(s), nil
	case ActionTypeJettonBurn:
		return []byte(s), nil
	case ActionTypeJettonMint:
		return []byte(s), nil
	case ActionTypeNftItemTransfer:
		return []byte(s), nil
	case ActionTypeContractDeploy:
		return []byte(s), nil
	case ActionTypeSubscribe:
		return []byte(s), nil
	case ActionTypeUnSubscribe:
		return []byte(s), nil
	case ActionTypeAuctionBid:
		return []byte(s), nil
	case ActionTypeNftPurchase:
		return []byte(s), nil
	case ActionTypeDepositStake:
		return []byte(s), nil
	case ActionTypeWithdrawStake:
		return []byte(s), nil
	case ActionTypeWithdrawStakeRequest:
		return []byte(s), nil
	case ActionTypeJettonSwap:
		return []byte(s), nil
	case ActionTypeSmartContractExec:
		return []byte(s), nil
	case ActionTypeElectionsRecoverStake:
		return []byte(s), nil
	case ActionTypeElectionsDepositStake:
		return []byte(s), nil
	case ActionTypeDomainRenew:
		return []byte(s), nil
	case ActionTypeInscriptionTransfer:
		return []byte(s), nil
	case ActionTypeInscriptionMint:
		return []byte(s), nil
	case ActionTypeUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionType) UnmarshalText(data []byte) error {
	switch ActionType(data) {
	case ActionTypeTonTransfer:
		*s = ActionTypeTonTransfer
		return nil
	case ActionTypeJettonTransfer:
		*s = ActionTypeJettonTransfer
		return nil
	case ActionTypeJettonBurn:
		*s = ActionTypeJettonBurn
		return nil
	case ActionTypeJettonMint:
		*s = ActionTypeJettonMint
		return nil
	case ActionTypeNftItemTransfer:
		*s = ActionTypeNftItemTransfer
		return nil
	case ActionTypeContractDeploy:
		*s = ActionTypeContractDeploy
		return nil
	case ActionTypeSubscribe:
		*s = ActionTypeSubscribe
		return nil
	case ActionTypeUnSubscribe:
		*s = ActionTypeUnSubscribe
		return nil
	case ActionTypeAuctionBid:
		*s = ActionTypeAuctionBid
		return nil
	case ActionTypeNftPurchase:
		*s = ActionTypeNftPurchase
		return nil
	case ActionTypeDepositStake:
		*s = ActionTypeDepositStake
		return nil
	case ActionTypeWithdrawStake:
		*s = ActionTypeWithdrawStake
		return nil
	case ActionTypeWithdrawStakeRequest:
		*s = ActionTypeWithdrawStakeRequest
		return nil
	case ActionTypeJettonSwap:
		*s = ActionTypeJettonSwap
		return nil
	case ActionTypeSmartContractExec:
		*s = ActionTypeSmartContractExec
		return nil
	case ActionTypeElectionsRecoverStake:
		*s = ActionTypeElectionsRecoverStake
		return nil
	case ActionTypeElectionsDepositStake:
		*s = ActionTypeElectionsDepositStake
		return nil
	case ActionTypeDomainRenew:
		*s = ActionTypeDomainRenew
		return nil
	case ActionTypeInscriptionTransfer:
		*s = ActionTypeInscriptionTransfer
		return nil
	case ActionTypeInscriptionMint:
		*s = ActionTypeInscriptionMint
		return nil
	case ActionTypeUnknown:
		*s = ActionTypeUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AddressParseOK struct {
	RawForm       string                      `json:"raw_form"`
	Bounceable    AddressParseOKBounceable    `json:"bounceable"`
	NonBounceable AddressParseOKNonBounceable `json:"non_bounceable"`
	GivenType     string                      `json:"given_type"`
	TestOnly      bool                        `json:"test_only"`
}

// GetRawForm returns the value of RawForm.
func (s *AddressParseOK) GetRawForm() string {
	return s.RawForm
}

// GetBounceable returns the value of Bounceable.
func (s *AddressParseOK) GetBounceable() AddressParseOKBounceable {
	return s.Bounceable
}

// GetNonBounceable returns the value of NonBounceable.
func (s *AddressParseOK) GetNonBounceable() AddressParseOKNonBounceable {
	return s.NonBounceable
}

// GetGivenType returns the value of GivenType.
func (s *AddressParseOK) GetGivenType() string {
	return s.GivenType
}

// GetTestOnly returns the value of TestOnly.
func (s *AddressParseOK) GetTestOnly() bool {
	return s.TestOnly
}

// SetRawForm sets the value of RawForm.
func (s *AddressParseOK) SetRawForm(val string) {
	s.RawForm = val
}

// SetBounceable sets the value of Bounceable.
func (s *AddressParseOK) SetBounceable(val AddressParseOKBounceable) {
	s.Bounceable = val
}

// SetNonBounceable sets the value of NonBounceable.
func (s *AddressParseOK) SetNonBounceable(val AddressParseOKNonBounceable) {
	s.NonBounceable = val
}

// SetGivenType sets the value of GivenType.
func (s *AddressParseOK) SetGivenType(val string) {
	s.GivenType = val
}

// SetTestOnly sets the value of TestOnly.
func (s *AddressParseOK) SetTestOnly(val bool) {
	s.TestOnly = val
}

type AddressParseOKBounceable struct {
	B64    string `json:"b64"`
	B64url string `json:"b64url"`
}

// GetB64 returns the value of B64.
func (s *AddressParseOKBounceable) GetB64() string {
	return s.B64
}

// GetB64url returns the value of B64url.
func (s *AddressParseOKBounceable) GetB64url() string {
	return s.B64url
}

// SetB64 sets the value of B64.
func (s *AddressParseOKBounceable) SetB64(val string) {
	s.B64 = val
}

// SetB64url sets the value of B64url.
func (s *AddressParseOKBounceable) SetB64url(val string) {
	s.B64url = val
}

type AddressParseOKNonBounceable struct {
	B64    string `json:"b64"`
	B64url string `json:"b64url"`
}

// GetB64 returns the value of B64.
func (s *AddressParseOKNonBounceable) GetB64() string {
	return s.B64
}

// GetB64url returns the value of B64url.
func (s *AddressParseOKNonBounceable) GetB64url() string {
	return s.B64url
}

// SetB64 sets the value of B64.
func (s *AddressParseOKNonBounceable) SetB64(val string) {
	s.B64 = val
}

// SetB64url sets the value of B64url.
func (s *AddressParseOKNonBounceable) SetB64url(val string) {
	s.B64url = val
}

// Ref: #/components/schemas/ApyHistory
type ApyHistory struct {
	Apy  float64 `json:"apy"`
	Time int     `json:"time"`
}

// GetApy returns the value of Apy.
func (s *ApyHistory) GetApy() float64 {
	return s.Apy
}

// GetTime returns the value of Time.
func (s *ApyHistory) GetTime() int {
	return s.Time
}

// SetApy sets the value of Apy.
func (s *ApyHistory) SetApy(val float64) {
	s.Apy = val
}

// SetTime sets the value of Time.
func (s *ApyHistory) SetTime(val int) {
	s.Time = val
}

// Ref: #/components/schemas/Auction
type Auction struct {
	Domain string `json:"domain"`
	Owner  string `json:"owner"`
	Price  int64  `json:"price"`
	Bids   int64  `json:"bids"`
	Date   int64  `json:"date"`
}

// GetDomain returns the value of Domain.
func (s *Auction) GetDomain() string {
	return s.Domain
}

// GetOwner returns the value of Owner.
func (s *Auction) GetOwner() string {
	return s.Owner
}

// GetPrice returns the value of Price.
func (s *Auction) GetPrice() int64 {
	return s.Price
}

// GetBids returns the value of Bids.
func (s *Auction) GetBids() int64 {
	return s.Bids
}

// GetDate returns the value of Date.
func (s *Auction) GetDate() int64 {
	return s.Date
}

// SetDomain sets the value of Domain.
func (s *Auction) SetDomain(val string) {
	s.Domain = val
}

// SetOwner sets the value of Owner.
func (s *Auction) SetOwner(val string) {
	s.Owner = val
}

// SetPrice sets the value of Price.
func (s *Auction) SetPrice(val int64) {
	s.Price = val
}

// SetBids sets the value of Bids.
func (s *Auction) SetBids(val int64) {
	s.Bids = val
}

// SetDate sets the value of Date.
func (s *Auction) SetDate(val int64) {
	s.Date = val
}

// Ref: #/components/schemas/AuctionBidAction
type AuctionBidAction struct {
	AuctionType AuctionBidActionAuctionType `json:"auction_type"`
	Amount      Price                       `json:"amount"`
	Nft         OptNftItem                  `json:"nft"`
	Bidder      AccountAddress              `json:"bidder"`
	Auction     AccountAddress              `json:"auction"`
}

// GetAuctionType returns the value of AuctionType.
func (s *AuctionBidAction) GetAuctionType() AuctionBidActionAuctionType {
	return s.AuctionType
}

// GetAmount returns the value of Amount.
func (s *AuctionBidAction) GetAmount() Price {
	return s.Amount
}

// GetNft returns the value of Nft.
func (s *AuctionBidAction) GetNft() OptNftItem {
	return s.Nft
}

// GetBidder returns the value of Bidder.
func (s *AuctionBidAction) GetBidder() AccountAddress {
	return s.Bidder
}

// GetAuction returns the value of Auction.
func (s *AuctionBidAction) GetAuction() AccountAddress {
	return s.Auction
}

// SetAuctionType sets the value of AuctionType.
func (s *AuctionBidAction) SetAuctionType(val AuctionBidActionAuctionType) {
	s.AuctionType = val
}

// SetAmount sets the value of Amount.
func (s *AuctionBidAction) SetAmount(val Price) {
	s.Amount = val
}

// SetNft sets the value of Nft.
func (s *AuctionBidAction) SetNft(val OptNftItem) {
	s.Nft = val
}

// SetBidder sets the value of Bidder.
func (s *AuctionBidAction) SetBidder(val AccountAddress) {
	s.Bidder = val
}

// SetAuction sets the value of Auction.
func (s *AuctionBidAction) SetAuction(val AccountAddress) {
	s.Auction = val
}

type AuctionBidActionAuctionType string

const (
	AuctionBidActionAuctionTypeDNSTon   AuctionBidActionAuctionType = "DNS.ton"
	AuctionBidActionAuctionTypeDNSTg    AuctionBidActionAuctionType = "DNS.tg"
	AuctionBidActionAuctionTypeNUMBERTg AuctionBidActionAuctionType = "NUMBER.tg"
	AuctionBidActionAuctionTypeGetgems  AuctionBidActionAuctionType = "getgems"
)

// AllValues returns all AuctionBidActionAuctionType values.
func (AuctionBidActionAuctionType) AllValues() []AuctionBidActionAuctionType {
	return []AuctionBidActionAuctionType{
		AuctionBidActionAuctionTypeDNSTon,
		AuctionBidActionAuctionTypeDNSTg,
		AuctionBidActionAuctionTypeNUMBERTg,
		AuctionBidActionAuctionTypeGetgems,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuctionBidActionAuctionType) MarshalText() ([]byte, error) {
	switch s {
	case AuctionBidActionAuctionTypeDNSTon:
		return []byte(s), nil
	case AuctionBidActionAuctionTypeDNSTg:
		return []byte(s), nil
	case AuctionBidActionAuctionTypeNUMBERTg:
		return []byte(s), nil
	case AuctionBidActionAuctionTypeGetgems:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuctionBidActionAuctionType) UnmarshalText(data []byte) error {
	switch AuctionBidActionAuctionType(data) {
	case AuctionBidActionAuctionTypeDNSTon:
		*s = AuctionBidActionAuctionTypeDNSTon
		return nil
	case AuctionBidActionAuctionTypeDNSTg:
		*s = AuctionBidActionAuctionTypeDNSTg
		return nil
	case AuctionBidActionAuctionTypeNUMBERTg:
		*s = AuctionBidActionAuctionTypeNUMBERTg
		return nil
	case AuctionBidActionAuctionTypeGetgems:
		*s = AuctionBidActionAuctionTypeGetgems
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Auctions
type Auctions struct {
	Data  []Auction `json:"data"`
	Total int64     `json:"total"`
}

// GetData returns the value of Data.
func (s *Auctions) GetData() []Auction {
	return s.Data
}

// GetTotal returns the value of Total.
func (s *Auctions) GetTotal() int64 {
	return s.Total
}

// SetData sets the value of Data.
func (s *Auctions) SetData(val []Auction) {
	s.Data = val
}

// SetTotal sets the value of Total.
func (s *Auctions) SetTotal(val int64) {
	s.Total = val
}

// Ref: #/components/schemas/BlockCurrencyCollection
type BlockCurrencyCollection struct {
	Grams int64                              `json:"grams"`
	Other []BlockCurrencyCollectionOtherItem `json:"other"`
}

// GetGrams returns the value of Grams.
func (s *BlockCurrencyCollection) GetGrams() int64 {
	return s.Grams
}

// GetOther returns the value of Other.
func (s *BlockCurrencyCollection) GetOther() []BlockCurrencyCollectionOtherItem {
	return s.Other
}

// SetGrams sets the value of Grams.
func (s *BlockCurrencyCollection) SetGrams(val int64) {
	s.Grams = val
}

// SetOther sets the value of Other.
func (s *BlockCurrencyCollection) SetOther(val []BlockCurrencyCollectionOtherItem) {
	s.Other = val
}

type BlockCurrencyCollectionOtherItem struct {
	ID    int64  `json:"id"`
	Value string `json:"value"`
}

// GetID returns the value of ID.
func (s *BlockCurrencyCollectionOtherItem) GetID() int64 {
	return s.ID
}

// GetValue returns the value of Value.
func (s *BlockCurrencyCollectionOtherItem) GetValue() string {
	return s.Value
}

// SetID sets the value of ID.
func (s *BlockCurrencyCollectionOtherItem) SetID(val int64) {
	s.ID = val
}

// SetValue sets the value of Value.
func (s *BlockCurrencyCollectionOtherItem) SetValue(val string) {
	s.Value = val
}

// Ref: #/components/schemas/BlockLimits
type BlockLimits struct {
	Bytes   BlockParamLimits `json:"bytes"`
	Gas     BlockParamLimits `json:"gas"`
	LtDelta BlockParamLimits `json:"lt_delta"`
}

// GetBytes returns the value of Bytes.
func (s *BlockLimits) GetBytes() BlockParamLimits {
	return s.Bytes
}

// GetGas returns the value of Gas.
func (s *BlockLimits) GetGas() BlockParamLimits {
	return s.Gas
}

// GetLtDelta returns the value of LtDelta.
func (s *BlockLimits) GetLtDelta() BlockParamLimits {
	return s.LtDelta
}

// SetBytes sets the value of Bytes.
func (s *BlockLimits) SetBytes(val BlockParamLimits) {
	s.Bytes = val
}

// SetGas sets the value of Gas.
func (s *BlockLimits) SetGas(val BlockParamLimits) {
	s.Gas = val
}

// SetLtDelta sets the value of LtDelta.
func (s *BlockLimits) SetLtDelta(val BlockParamLimits) {
	s.LtDelta = val
}

// Ref: #/components/schemas/BlockParamLimits
type BlockParamLimits struct {
	Underload int64 `json:"underload"`
	SoftLimit int64 `json:"soft_limit"`
	HardLimit int64 `json:"hard_limit"`
}

// GetUnderload returns the value of Underload.
func (s *BlockParamLimits) GetUnderload() int64 {
	return s.Underload
}

// GetSoftLimit returns the value of SoftLimit.
func (s *BlockParamLimits) GetSoftLimit() int64 {
	return s.SoftLimit
}

// GetHardLimit returns the value of HardLimit.
func (s *BlockParamLimits) GetHardLimit() int64 {
	return s.HardLimit
}

// SetUnderload sets the value of Underload.
func (s *BlockParamLimits) SetUnderload(val int64) {
	s.Underload = val
}

// SetSoftLimit sets the value of SoftLimit.
func (s *BlockParamLimits) SetSoftLimit(val int64) {
	s.SoftLimit = val
}

// SetHardLimit sets the value of HardLimit.
func (s *BlockParamLimits) SetHardLimit(val int64) {
	s.HardLimit = val
}

// Ref: #/components/schemas/BlockRaw
type BlockRaw struct {
	Workchain int32  `json:"workchain"`
	Shard     string `json:"shard"`
	Seqno     int32  `json:"seqno"`
	RootHash  string `json:"root_hash"`
	FileHash  string `json:"file_hash"`
}

// GetWorkchain returns the value of Workchain.
func (s *BlockRaw) GetWorkchain() int32 {
	return s.Workchain
}

// GetShard returns the value of Shard.
func (s *BlockRaw) GetShard() string {
	return s.Shard
}

// GetSeqno returns the value of Seqno.
func (s *BlockRaw) GetSeqno() int32 {
	return s.Seqno
}

// GetRootHash returns the value of RootHash.
func (s *BlockRaw) GetRootHash() string {
	return s.RootHash
}

// GetFileHash returns the value of FileHash.
func (s *BlockRaw) GetFileHash() string {
	return s.FileHash
}

// SetWorkchain sets the value of Workchain.
func (s *BlockRaw) SetWorkchain(val int32) {
	s.Workchain = val
}

// SetShard sets the value of Shard.
func (s *BlockRaw) SetShard(val string) {
	s.Shard = val
}

// SetSeqno sets the value of Seqno.
func (s *BlockRaw) SetSeqno(val int32) {
	s.Seqno = val
}

// SetRootHash sets the value of RootHash.
func (s *BlockRaw) SetRootHash(val string) {
	s.RootHash = val
}

// SetFileHash sets the value of FileHash.
func (s *BlockRaw) SetFileHash(val string) {
	s.FileHash = val
}

// Ref: #/components/schemas/BlockValueFlow
type BlockValueFlow struct {
	FromPrevBlk   BlockCurrencyCollection    `json:"from_prev_blk"`
	ToNextBlk     BlockCurrencyCollection    `json:"to_next_blk"`
	Imported      BlockCurrencyCollection    `json:"imported"`
	Exported      BlockCurrencyCollection    `json:"exported"`
	FeesCollected BlockCurrencyCollection    `json:"fees_collected"`
	Burned        OptBlockCurrencyCollection `json:"burned"`
	FeesImported  BlockCurrencyCollection    `json:"fees_imported"`
	Recovered     BlockCurrencyCollection    `json:"recovered"`
	Created       BlockCurrencyCollection    `json:"created"`
	Minted        BlockCurrencyCollection    `json:"minted"`
}

// GetFromPrevBlk returns the value of FromPrevBlk.
func (s *BlockValueFlow) GetFromPrevBlk() BlockCurrencyCollection {
	return s.FromPrevBlk
}

// GetToNextBlk returns the value of ToNextBlk.
func (s *BlockValueFlow) GetToNextBlk() BlockCurrencyCollection {
	return s.ToNextBlk
}

// GetImported returns the value of Imported.
func (s *BlockValueFlow) GetImported() BlockCurrencyCollection {
	return s.Imported
}

// GetExported returns the value of Exported.
func (s *BlockValueFlow) GetExported() BlockCurrencyCollection {
	return s.Exported
}

// GetFeesCollected returns the value of FeesCollected.
func (s *BlockValueFlow) GetFeesCollected() BlockCurrencyCollection {
	return s.FeesCollected
}

// GetBurned returns the value of Burned.
func (s *BlockValueFlow) GetBurned() OptBlockCurrencyCollection {
	return s.Burned
}

// GetFeesImported returns the value of FeesImported.
func (s *BlockValueFlow) GetFeesImported() BlockCurrencyCollection {
	return s.FeesImported
}

// GetRecovered returns the value of Recovered.
func (s *BlockValueFlow) GetRecovered() BlockCurrencyCollection {
	return s.Recovered
}

// GetCreated returns the value of Created.
func (s *BlockValueFlow) GetCreated() BlockCurrencyCollection {
	return s.Created
}

// GetMinted returns the value of Minted.
func (s *BlockValueFlow) GetMinted() BlockCurrencyCollection {
	return s.Minted
}

// SetFromPrevBlk sets the value of FromPrevBlk.
func (s *BlockValueFlow) SetFromPrevBlk(val BlockCurrencyCollection) {
	s.FromPrevBlk = val
}

// SetToNextBlk sets the value of ToNextBlk.
func (s *BlockValueFlow) SetToNextBlk(val BlockCurrencyCollection) {
	s.ToNextBlk = val
}

// SetImported sets the value of Imported.
func (s *BlockValueFlow) SetImported(val BlockCurrencyCollection) {
	s.Imported = val
}

// SetExported sets the value of Exported.
func (s *BlockValueFlow) SetExported(val BlockCurrencyCollection) {
	s.Exported = val
}

// SetFeesCollected sets the value of FeesCollected.
func (s *BlockValueFlow) SetFeesCollected(val BlockCurrencyCollection) {
	s.FeesCollected = val
}

// SetBurned sets the value of Burned.
func (s *BlockValueFlow) SetBurned(val OptBlockCurrencyCollection) {
	s.Burned = val
}

// SetFeesImported sets the value of FeesImported.
func (s *BlockValueFlow) SetFeesImported(val BlockCurrencyCollection) {
	s.FeesImported = val
}

// SetRecovered sets the value of Recovered.
func (s *BlockValueFlow) SetRecovered(val BlockCurrencyCollection) {
	s.Recovered = val
}

// SetCreated sets the value of Created.
func (s *BlockValueFlow) SetCreated(val BlockCurrencyCollection) {
	s.Created = val
}

// SetMinted sets the value of Minted.
func (s *BlockValueFlow) SetMinted(val BlockCurrencyCollection) {
	s.Minted = val
}

// Ref: #/components/schemas/BlockchainAccountInspect
type BlockchainAccountInspect struct {
	Code     string                                `json:"code"`
	CodeHash string                                `json:"code_hash"`
	Methods  []BlockchainAccountInspectMethodsItem `json:"methods"`
	Compiler OptBlockchainAccountInspectCompiler   `json:"compiler"`
}

// GetCode returns the value of Code.
func (s *BlockchainAccountInspect) GetCode() string {
	return s.Code
}

// GetCodeHash returns the value of CodeHash.
func (s *BlockchainAccountInspect) GetCodeHash() string {
	return s.CodeHash
}

// GetMethods returns the value of Methods.
func (s *BlockchainAccountInspect) GetMethods() []BlockchainAccountInspectMethodsItem {
	return s.Methods
}

// GetCompiler returns the value of Compiler.
func (s *BlockchainAccountInspect) GetCompiler() OptBlockchainAccountInspectCompiler {
	return s.Compiler
}

// SetCode sets the value of Code.
func (s *BlockchainAccountInspect) SetCode(val string) {
	s.Code = val
}

// SetCodeHash sets the value of CodeHash.
func (s *BlockchainAccountInspect) SetCodeHash(val string) {
	s.CodeHash = val
}

// SetMethods sets the value of Methods.
func (s *BlockchainAccountInspect) SetMethods(val []BlockchainAccountInspectMethodsItem) {
	s.Methods = val
}

// SetCompiler sets the value of Compiler.
func (s *BlockchainAccountInspect) SetCompiler(val OptBlockchainAccountInspectCompiler) {
	s.Compiler = val
}

type BlockchainAccountInspectCompiler string

const (
	BlockchainAccountInspectCompilerFunc BlockchainAccountInspectCompiler = "func"
)

// AllValues returns all BlockchainAccountInspectCompiler values.
func (BlockchainAccountInspectCompiler) AllValues() []BlockchainAccountInspectCompiler {
	return []BlockchainAccountInspectCompiler{
		BlockchainAccountInspectCompilerFunc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BlockchainAccountInspectCompiler) MarshalText() ([]byte, error) {
	switch s {
	case BlockchainAccountInspectCompilerFunc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BlockchainAccountInspectCompiler) UnmarshalText(data []byte) error {
	switch BlockchainAccountInspectCompiler(data) {
	case BlockchainAccountInspectCompilerFunc:
		*s = BlockchainAccountInspectCompilerFunc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BlockchainAccountInspectMethodsItem struct {
	ID     int64  `json:"id"`
	Method string `json:"method"`
}

// GetID returns the value of ID.
func (s *BlockchainAccountInspectMethodsItem) GetID() int64 {
	return s.ID
}

// GetMethod returns the value of Method.
func (s *BlockchainAccountInspectMethodsItem) GetMethod() string {
	return s.Method
}

// SetID sets the value of ID.
func (s *BlockchainAccountInspectMethodsItem) SetID(val int64) {
	s.ID = val
}

// SetMethod sets the value of Method.
func (s *BlockchainAccountInspectMethodsItem) SetMethod(val string) {
	s.Method = val
}

// Ref: #/components/schemas/BlockchainBlock
type BlockchainBlock struct {
	TxQuantity              int            `json:"tx_quantity"`
	ValueFlow               BlockValueFlow `json:"value_flow"`
	WorkchainID             int32          `json:"workchain_id"`
	Shard                   string         `json:"shard"`
	Seqno                   int32          `json:"seqno"`
	RootHash                string         `json:"root_hash"`
	FileHash                string         `json:"file_hash"`
	GlobalID                int32          `json:"global_id"`
	Version                 int32          `json:"version"`
	AfterMerge              bool           `json:"after_merge"`
	BeforeSplit             bool           `json:"before_split"`
	AfterSplit              bool           `json:"after_split"`
	WantSplit               bool           `json:"want_split"`
	WantMerge               bool           `json:"want_merge"`
	KeyBlock                bool           `json:"key_block"`
	GenUtime                int64          `json:"gen_utime"`
	StartLt                 int64          `json:"start_lt"`
	EndLt                   int64          `json:"end_lt"`
	VertSeqno               int32          `json:"vert_seqno"`
	GenCatchainSeqno        int32          `json:"gen_catchain_seqno"`
	MinRefMcSeqno           int32          `json:"min_ref_mc_seqno"`
	PrevKeyBlockSeqno       int32          `json:"prev_key_block_seqno"`
	GenSoftwareVersion      OptInt32       `json:"gen_software_version"`
	GenSoftwareCapabilities OptInt64       `json:"gen_software_capabilities"`
	MasterRef               OptString      `json:"master_ref"`
	PrevRefs                []string       `json:"prev_refs"`
	InMsgDescrLength        int64          `json:"in_msg_descr_length"`
	OutMsgDescrLength       int64          `json:"out_msg_descr_length"`
	RandSeed                string         `json:"rand_seed"`
	CreatedBy               string         `json:"created_by"`
}

// GetTxQuantity returns the value of TxQuantity.
func (s *BlockchainBlock) GetTxQuantity() int {
	return s.TxQuantity
}

// GetValueFlow returns the value of ValueFlow.
func (s *BlockchainBlock) GetValueFlow() BlockValueFlow {
	return s.ValueFlow
}

// GetWorkchainID returns the value of WorkchainID.
func (s *BlockchainBlock) GetWorkchainID() int32 {
	return s.WorkchainID
}

// GetShard returns the value of Shard.
func (s *BlockchainBlock) GetShard() string {
	return s.Shard
}

// GetSeqno returns the value of Seqno.
func (s *BlockchainBlock) GetSeqno() int32 {
	return s.Seqno
}

// GetRootHash returns the value of RootHash.
func (s *BlockchainBlock) GetRootHash() string {
	return s.RootHash
}

// GetFileHash returns the value of FileHash.
func (s *BlockchainBlock) GetFileHash() string {
	return s.FileHash
}

// GetGlobalID returns the value of GlobalID.
func (s *BlockchainBlock) GetGlobalID() int32 {
	return s.GlobalID
}

// GetVersion returns the value of Version.
func (s *BlockchainBlock) GetVersion() int32 {
	return s.Version
}

// GetAfterMerge returns the value of AfterMerge.
func (s *BlockchainBlock) GetAfterMerge() bool {
	return s.AfterMerge
}

// GetBeforeSplit returns the value of BeforeSplit.
func (s *BlockchainBlock) GetBeforeSplit() bool {
	return s.BeforeSplit
}

// GetAfterSplit returns the value of AfterSplit.
func (s *BlockchainBlock) GetAfterSplit() bool {
	return s.AfterSplit
}

// GetWantSplit returns the value of WantSplit.
func (s *BlockchainBlock) GetWantSplit() bool {
	return s.WantSplit
}

// GetWantMerge returns the value of WantMerge.
func (s *BlockchainBlock) GetWantMerge() bool {
	return s.WantMerge
}

// GetKeyBlock returns the value of KeyBlock.
func (s *BlockchainBlock) GetKeyBlock() bool {
	return s.KeyBlock
}

// GetGenUtime returns the value of GenUtime.
func (s *BlockchainBlock) GetGenUtime() int64 {
	return s.GenUtime
}

// GetStartLt returns the value of StartLt.
func (s *BlockchainBlock) GetStartLt() int64 {
	return s.StartLt
}

// GetEndLt returns the value of EndLt.
func (s *BlockchainBlock) GetEndLt() int64 {
	return s.EndLt
}

// GetVertSeqno returns the value of VertSeqno.
func (s *BlockchainBlock) GetVertSeqno() int32 {
	return s.VertSeqno
}

// GetGenCatchainSeqno returns the value of GenCatchainSeqno.
func (s *BlockchainBlock) GetGenCatchainSeqno() int32 {
	return s.GenCatchainSeqno
}

// GetMinRefMcSeqno returns the value of MinRefMcSeqno.
func (s *BlockchainBlock) GetMinRefMcSeqno() int32 {
	return s.MinRefMcSeqno
}

// GetPrevKeyBlockSeqno returns the value of PrevKeyBlockSeqno.
func (s *BlockchainBlock) GetPrevKeyBlockSeqno() int32 {
	return s.PrevKeyBlockSeqno
}

// GetGenSoftwareVersion returns the value of GenSoftwareVersion.
func (s *BlockchainBlock) GetGenSoftwareVersion() OptInt32 {
	return s.GenSoftwareVersion
}

// GetGenSoftwareCapabilities returns the value of GenSoftwareCapabilities.
func (s *BlockchainBlock) GetGenSoftwareCapabilities() OptInt64 {
	return s.GenSoftwareCapabilities
}

// GetMasterRef returns the value of MasterRef.
func (s *BlockchainBlock) GetMasterRef() OptString {
	return s.MasterRef
}

// GetPrevRefs returns the value of PrevRefs.
func (s *BlockchainBlock) GetPrevRefs() []string {
	return s.PrevRefs
}

// GetInMsgDescrLength returns the value of InMsgDescrLength.
func (s *BlockchainBlock) GetInMsgDescrLength() int64 {
	return s.InMsgDescrLength
}

// GetOutMsgDescrLength returns the value of OutMsgDescrLength.
func (s *BlockchainBlock) GetOutMsgDescrLength() int64 {
	return s.OutMsgDescrLength
}

// GetRandSeed returns the value of RandSeed.
func (s *BlockchainBlock) GetRandSeed() string {
	return s.RandSeed
}

// GetCreatedBy returns the value of CreatedBy.
func (s *BlockchainBlock) GetCreatedBy() string {
	return s.CreatedBy
}

// SetTxQuantity sets the value of TxQuantity.
func (s *BlockchainBlock) SetTxQuantity(val int) {
	s.TxQuantity = val
}

// SetValueFlow sets the value of ValueFlow.
func (s *BlockchainBlock) SetValueFlow(val BlockValueFlow) {
	s.ValueFlow = val
}

// SetWorkchainID sets the value of WorkchainID.
func (s *BlockchainBlock) SetWorkchainID(val int32) {
	s.WorkchainID = val
}

// SetShard sets the value of Shard.
func (s *BlockchainBlock) SetShard(val string) {
	s.Shard = val
}

// SetSeqno sets the value of Seqno.
func (s *BlockchainBlock) SetSeqno(val int32) {
	s.Seqno = val
}

// SetRootHash sets the value of RootHash.
func (s *BlockchainBlock) SetRootHash(val string) {
	s.RootHash = val
}

// SetFileHash sets the value of FileHash.
func (s *BlockchainBlock) SetFileHash(val string) {
	s.FileHash = val
}

// SetGlobalID sets the value of GlobalID.
func (s *BlockchainBlock) SetGlobalID(val int32) {
	s.GlobalID = val
}

// SetVersion sets the value of Version.
func (s *BlockchainBlock) SetVersion(val int32) {
	s.Version = val
}

// SetAfterMerge sets the value of AfterMerge.
func (s *BlockchainBlock) SetAfterMerge(val bool) {
	s.AfterMerge = val
}

// SetBeforeSplit sets the value of BeforeSplit.
func (s *BlockchainBlock) SetBeforeSplit(val bool) {
	s.BeforeSplit = val
}

// SetAfterSplit sets the value of AfterSplit.
func (s *BlockchainBlock) SetAfterSplit(val bool) {
	s.AfterSplit = val
}

// SetWantSplit sets the value of WantSplit.
func (s *BlockchainBlock) SetWantSplit(val bool) {
	s.WantSplit = val
}

// SetWantMerge sets the value of WantMerge.
func (s *BlockchainBlock) SetWantMerge(val bool) {
	s.WantMerge = val
}

// SetKeyBlock sets the value of KeyBlock.
func (s *BlockchainBlock) SetKeyBlock(val bool) {
	s.KeyBlock = val
}

// SetGenUtime sets the value of GenUtime.
func (s *BlockchainBlock) SetGenUtime(val int64) {
	s.GenUtime = val
}

// SetStartLt sets the value of StartLt.
func (s *BlockchainBlock) SetStartLt(val int64) {
	s.StartLt = val
}

// SetEndLt sets the value of EndLt.
func (s *BlockchainBlock) SetEndLt(val int64) {
	s.EndLt = val
}

// SetVertSeqno sets the value of VertSeqno.
func (s *BlockchainBlock) SetVertSeqno(val int32) {
	s.VertSeqno = val
}

// SetGenCatchainSeqno sets the value of GenCatchainSeqno.
func (s *BlockchainBlock) SetGenCatchainSeqno(val int32) {
	s.GenCatchainSeqno = val
}

// SetMinRefMcSeqno sets the value of MinRefMcSeqno.
func (s *BlockchainBlock) SetMinRefMcSeqno(val int32) {
	s.MinRefMcSeqno = val
}

// SetPrevKeyBlockSeqno sets the value of PrevKeyBlockSeqno.
func (s *BlockchainBlock) SetPrevKeyBlockSeqno(val int32) {
	s.PrevKeyBlockSeqno = val
}

// SetGenSoftwareVersion sets the value of GenSoftwareVersion.
func (s *BlockchainBlock) SetGenSoftwareVersion(val OptInt32) {
	s.GenSoftwareVersion = val
}

// SetGenSoftwareCapabilities sets the value of GenSoftwareCapabilities.
func (s *BlockchainBlock) SetGenSoftwareCapabilities(val OptInt64) {
	s.GenSoftwareCapabilities = val
}

// SetMasterRef sets the value of MasterRef.
func (s *BlockchainBlock) SetMasterRef(val OptString) {
	s.MasterRef = val
}

// SetPrevRefs sets the value of PrevRefs.
func (s *BlockchainBlock) SetPrevRefs(val []string) {
	s.PrevRefs = val
}

// SetInMsgDescrLength sets the value of InMsgDescrLength.
func (s *BlockchainBlock) SetInMsgDescrLength(val int64) {
	s.InMsgDescrLength = val
}

// SetOutMsgDescrLength sets the value of OutMsgDescrLength.
func (s *BlockchainBlock) SetOutMsgDescrLength(val int64) {
	s.OutMsgDescrLength = val
}

// SetRandSeed sets the value of RandSeed.
func (s *BlockchainBlock) SetRandSeed(val string) {
	s.RandSeed = val
}

// SetCreatedBy sets the value of CreatedBy.
func (s *BlockchainBlock) SetCreatedBy(val string) {
	s.CreatedBy = val
}

// Ref: #/components/schemas/BlockchainBlockShards
type BlockchainBlockShards struct {
	Shards []BlockchainBlockShardsShardsItem `json:"shards"`
}

// GetShards returns the value of Shards.
func (s *BlockchainBlockShards) GetShards() []BlockchainBlockShardsShardsItem {
	return s.Shards
}

// SetShards sets the value of Shards.
func (s *BlockchainBlockShards) SetShards(val []BlockchainBlockShardsShardsItem) {
	s.Shards = val
}

type BlockchainBlockShardsShardsItem struct {
	LastKnownBlockID string          `json:"last_known_block_id"`
	LastKnownBlock   BlockchainBlock `json:"last_known_block"`
}

// GetLastKnownBlockID returns the value of LastKnownBlockID.
func (s *BlockchainBlockShardsShardsItem) GetLastKnownBlockID() string {
	return s.LastKnownBlockID
}

// GetLastKnownBlock returns the value of LastKnownBlock.
func (s *BlockchainBlockShardsShardsItem) GetLastKnownBlock() BlockchainBlock {
	return s.LastKnownBlock
}

// SetLastKnownBlockID sets the value of LastKnownBlockID.
func (s *BlockchainBlockShardsShardsItem) SetLastKnownBlockID(val string) {
	s.LastKnownBlockID = val
}

// SetLastKnownBlock sets the value of LastKnownBlock.
func (s *BlockchainBlockShardsShardsItem) SetLastKnownBlock(val BlockchainBlock) {
	s.LastKnownBlock = val
}

// Ref: #/components/schemas/BlockchainBlocks
type BlockchainBlocks struct {
	Blocks []BlockchainBlock `json:"blocks"`
}

// GetBlocks returns the value of Blocks.
func (s *BlockchainBlocks) GetBlocks() []BlockchainBlock {
	return s.Blocks
}

// SetBlocks sets the value of Blocks.
func (s *BlockchainBlocks) SetBlocks(val []BlockchainBlock) {
	s.Blocks = val
}

// Ref: #/components/schemas/BlockchainConfig
type BlockchainConfig struct {
	// Config boc in base64 format.
	Raw string `json:"raw"`
	// Config address.
	R0 string `json:"0"`
	// Elector address.
	R1 string `json:"1"`
	// Minter address.
	R2 string `json:"2"`
	// The address of the transaction fee collector.
	R3 OptString `json:"3"`
	// Dns root address.
	R4 string               `json:"4"`
	R5 OptBlockchainConfig5 `json:"5"`
	// Minting fees of new currencies.
	R6 OptBlockchainConfig6 `json:"6"`
	// The volume of each of the additional currencies in circulation.
	R7 OptBlockchainConfig7 `json:"7"`
	// The network version and additional capabilities supported by the validators.
	R8 OptBlockchainConfig8 `json:"8"`
	// List of mandatory parameters of the blockchain config.
	R9 OptBlockchainConfig9 `json:"9"`
	// List of critical TON parameters, the change of which significantly affects the network, so more
	// voting rounds are held.
	R10 OptBlockchainConfig10 `json:"10"`
	// This parameter indicates under what conditions proposals to change the TON configuration are
	// accepted.
	R11 OptBlockchainConfig11 `json:"11"`
	// Workchains in the TON Blockchain.
	R12 OptBlockchainConfig12 `json:"12"`
	// The cost of filing complaints about incorrect operation of validators.
	R13 OptBlockchainConfig13 `json:"13"`
	// The reward in nanoTons for block creation in the TON blockchain.
	R14 OptBlockchainConfig14 `json:"14"`
	// The reward in nanoTons for block creation in the TON blockchain.
	R15 OptBlockchainConfig15 `json:"15"`
	// The limits on the number of validators in the TON blockchain.
	R16 OptBlockchainConfig16 `json:"16"`
	// The stake parameters configuration in the TON blockchain.
	R17 OptBlockchainConfig17 `json:"17"`
	// The prices for data storage.
	R18 OptBlockchainConfig18 `json:"18"`
	// The cost of computations in the masterchain. The complexity of any computation is estimated in gas
	// units.
	R20 OptBlockchainConfig20 `json:"20"`
	// The cost of computations in the basechains. The complexity of any computation is estimated in gas
	// units.
	R21 OptBlockchainConfig21 `json:"21"`
	// The limits on the block in the masterchain, upon reaching which the block is finalized and the
	// callback of the remaining messages (if any) is carried over to the next block.
	R22 OptBlockchainConfig22 `json:"22"`
	// The limits on the block in the basechains, upon reaching which the block is finalized and the
	// callback of the remaining messages (if any) is carried over to the next block.
	R23 OptBlockchainConfig23 `json:"23"`
	// The cost of sending messages in the masterchain of the TON blockchain.
	R24 OptBlockchainConfig24 `json:"24"`
	// The cost of sending messages in the basechains of the TON blockchain.
	R25 OptBlockchainConfig25 `json:"25"`
	// The configuration for the Catchain protocol.
	R28 OptBlockchainConfig28 `json:"28"`
	// The configuration for the consensus protocol above catchain.
	R29 OptBlockchainConfig29 `json:"29"`
	// The configuration for the consensus protocol above catchain.
	R31 OptBlockchainConfig31 `json:"31"`
	R32 OptValidatorsSet      `json:"32"`
	R33 OptValidatorsSet      `json:"33"`
	R34 OptValidatorsSet      `json:"34"`
	R35 OptValidatorsSet      `json:"35"`
	R36 OptValidatorsSet      `json:"36"`
	R37 OptValidatorsSet      `json:"37"`
	// The configuration for punishment for improper behavior (non-validation). In the absence of the
	// parameter, the default fine size is 101 TON.
	R40 OptBlockchainConfig40 `json:"40"`
	// The size limits and some other characteristics of accounts and messages.
	R43 OptBlockchainConfig43 `json:"43"`
	// Suspended accounts.
	R44 BlockchainConfig44 `json:"44"`
	// Bridge parameters for wrapping TON in other networks.
	R71 OptBlockchainConfig71 `json:"71"`
	// Bridge parameters for wrapping TON in other networks.
	R72 OptBlockchainConfig72 `json:"72"`
	// Bridge parameters for wrapping TON in other networks.
	R73 OptBlockchainConfig73 `json:"73"`
	// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
	R79 OptBlockchainConfig79 `json:"79"`
	// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
	R81 OptBlockchainConfig81 `json:"81"`
	// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
	R82 OptBlockchainConfig82 `json:"82"`
}

// GetRaw returns the value of Raw.
func (s *BlockchainConfig) GetRaw() string {
	return s.Raw
}

// GetR0 returns the value of R0.
func (s *BlockchainConfig) GetR0() string {
	return s.R0
}

// GetR1 returns the value of R1.
func (s *BlockchainConfig) GetR1() string {
	return s.R1
}

// GetR2 returns the value of R2.
func (s *BlockchainConfig) GetR2() string {
	return s.R2
}

// GetR3 returns the value of R3.
func (s *BlockchainConfig) GetR3() OptString {
	return s.R3
}

// GetR4 returns the value of R4.
func (s *BlockchainConfig) GetR4() string {
	return s.R4
}

// GetR5 returns the value of R5.
func (s *BlockchainConfig) GetR5() OptBlockchainConfig5 {
	return s.R5
}

// GetR6 returns the value of R6.
func (s *BlockchainConfig) GetR6() OptBlockchainConfig6 {
	return s.R6
}

// GetR7 returns the value of R7.
func (s *BlockchainConfig) GetR7() OptBlockchainConfig7 {
	return s.R7
}

// GetR8 returns the value of R8.
func (s *BlockchainConfig) GetR8() OptBlockchainConfig8 {
	return s.R8
}

// GetR9 returns the value of R9.
func (s *BlockchainConfig) GetR9() OptBlockchainConfig9 {
	return s.R9
}

// GetR10 returns the value of R10.
func (s *BlockchainConfig) GetR10() OptBlockchainConfig10 {
	return s.R10
}

// GetR11 returns the value of R11.
func (s *BlockchainConfig) GetR11() OptBlockchainConfig11 {
	return s.R11
}

// GetR12 returns the value of R12.
func (s *BlockchainConfig) GetR12() OptBlockchainConfig12 {
	return s.R12
}

// GetR13 returns the value of R13.
func (s *BlockchainConfig) GetR13() OptBlockchainConfig13 {
	return s.R13
}

// GetR14 returns the value of R14.
func (s *BlockchainConfig) GetR14() OptBlockchainConfig14 {
	return s.R14
}

// GetR15 returns the value of R15.
func (s *BlockchainConfig) GetR15() OptBlockchainConfig15 {
	return s.R15
}

// GetR16 returns the value of R16.
func (s *BlockchainConfig) GetR16() OptBlockchainConfig16 {
	return s.R16
}

// GetR17 returns the value of R17.
func (s *BlockchainConfig) GetR17() OptBlockchainConfig17 {
	return s.R17
}

// GetR18 returns the value of R18.
func (s *BlockchainConfig) GetR18() OptBlockchainConfig18 {
	return s.R18
}

// GetR20 returns the value of R20.
func (s *BlockchainConfig) GetR20() OptBlockchainConfig20 {
	return s.R20
}

// GetR21 returns the value of R21.
func (s *BlockchainConfig) GetR21() OptBlockchainConfig21 {
	return s.R21
}

// GetR22 returns the value of R22.
func (s *BlockchainConfig) GetR22() OptBlockchainConfig22 {
	return s.R22
}

// GetR23 returns the value of R23.
func (s *BlockchainConfig) GetR23() OptBlockchainConfig23 {
	return s.R23
}

// GetR24 returns the value of R24.
func (s *BlockchainConfig) GetR24() OptBlockchainConfig24 {
	return s.R24
}

// GetR25 returns the value of R25.
func (s *BlockchainConfig) GetR25() OptBlockchainConfig25 {
	return s.R25
}

// GetR28 returns the value of R28.
func (s *BlockchainConfig) GetR28() OptBlockchainConfig28 {
	return s.R28
}

// GetR29 returns the value of R29.
func (s *BlockchainConfig) GetR29() OptBlockchainConfig29 {
	return s.R29
}

// GetR31 returns the value of R31.
func (s *BlockchainConfig) GetR31() OptBlockchainConfig31 {
	return s.R31
}

// GetR32 returns the value of R32.
func (s *BlockchainConfig) GetR32() OptValidatorsSet {
	return s.R32
}

// GetR33 returns the value of R33.
func (s *BlockchainConfig) GetR33() OptValidatorsSet {
	return s.R33
}

// GetR34 returns the value of R34.
func (s *BlockchainConfig) GetR34() OptValidatorsSet {
	return s.R34
}

// GetR35 returns the value of R35.
func (s *BlockchainConfig) GetR35() OptValidatorsSet {
	return s.R35
}

// GetR36 returns the value of R36.
func (s *BlockchainConfig) GetR36() OptValidatorsSet {
	return s.R36
}

// GetR37 returns the value of R37.
func (s *BlockchainConfig) GetR37() OptValidatorsSet {
	return s.R37
}

// GetR40 returns the value of R40.
func (s *BlockchainConfig) GetR40() OptBlockchainConfig40 {
	return s.R40
}

// GetR43 returns the value of R43.
func (s *BlockchainConfig) GetR43() OptBlockchainConfig43 {
	return s.R43
}

// GetR44 returns the value of R44.
func (s *BlockchainConfig) GetR44() BlockchainConfig44 {
	return s.R44
}

// GetR71 returns the value of R71.
func (s *BlockchainConfig) GetR71() OptBlockchainConfig71 {
	return s.R71
}

// GetR72 returns the value of R72.
func (s *BlockchainConfig) GetR72() OptBlockchainConfig72 {
	return s.R72
}

// GetR73 returns the value of R73.
func (s *BlockchainConfig) GetR73() OptBlockchainConfig73 {
	return s.R73
}

// GetR79 returns the value of R79.
func (s *BlockchainConfig) GetR79() OptBlockchainConfig79 {
	return s.R79
}

// GetR81 returns the value of R81.
func (s *BlockchainConfig) GetR81() OptBlockchainConfig81 {
	return s.R81
}

// GetR82 returns the value of R82.
func (s *BlockchainConfig) GetR82() OptBlockchainConfig82 {
	return s.R82
}

// SetRaw sets the value of Raw.
func (s *BlockchainConfig) SetRaw(val string) {
	s.Raw = val
}

// SetR0 sets the value of R0.
func (s *BlockchainConfig) SetR0(val string) {
	s.R0 = val
}

// SetR1 sets the value of R1.
func (s *BlockchainConfig) SetR1(val string) {
	s.R1 = val
}

// SetR2 sets the value of R2.
func (s *BlockchainConfig) SetR2(val string) {
	s.R2 = val
}

// SetR3 sets the value of R3.
func (s *BlockchainConfig) SetR3(val OptString) {
	s.R3 = val
}

// SetR4 sets the value of R4.
func (s *BlockchainConfig) SetR4(val string) {
	s.R4 = val
}

// SetR5 sets the value of R5.
func (s *BlockchainConfig) SetR5(val OptBlockchainConfig5) {
	s.R5 = val
}

// SetR6 sets the value of R6.
func (s *BlockchainConfig) SetR6(val OptBlockchainConfig6) {
	s.R6 = val
}

// SetR7 sets the value of R7.
func (s *BlockchainConfig) SetR7(val OptBlockchainConfig7) {
	s.R7 = val
}

// SetR8 sets the value of R8.
func (s *BlockchainConfig) SetR8(val OptBlockchainConfig8) {
	s.R8 = val
}

// SetR9 sets the value of R9.
func (s *BlockchainConfig) SetR9(val OptBlockchainConfig9) {
	s.R9 = val
}

// SetR10 sets the value of R10.
func (s *BlockchainConfig) SetR10(val OptBlockchainConfig10) {
	s.R10 = val
}

// SetR11 sets the value of R11.
func (s *BlockchainConfig) SetR11(val OptBlockchainConfig11) {
	s.R11 = val
}

// SetR12 sets the value of R12.
func (s *BlockchainConfig) SetR12(val OptBlockchainConfig12) {
	s.R12 = val
}

// SetR13 sets the value of R13.
func (s *BlockchainConfig) SetR13(val OptBlockchainConfig13) {
	s.R13 = val
}

// SetR14 sets the value of R14.
func (s *BlockchainConfig) SetR14(val OptBlockchainConfig14) {
	s.R14 = val
}

// SetR15 sets the value of R15.
func (s *BlockchainConfig) SetR15(val OptBlockchainConfig15) {
	s.R15 = val
}

// SetR16 sets the value of R16.
func (s *BlockchainConfig) SetR16(val OptBlockchainConfig16) {
	s.R16 = val
}

// SetR17 sets the value of R17.
func (s *BlockchainConfig) SetR17(val OptBlockchainConfig17) {
	s.R17 = val
}

// SetR18 sets the value of R18.
func (s *BlockchainConfig) SetR18(val OptBlockchainConfig18) {
	s.R18 = val
}

// SetR20 sets the value of R20.
func (s *BlockchainConfig) SetR20(val OptBlockchainConfig20) {
	s.R20 = val
}

// SetR21 sets the value of R21.
func (s *BlockchainConfig) SetR21(val OptBlockchainConfig21) {
	s.R21 = val
}

// SetR22 sets the value of R22.
func (s *BlockchainConfig) SetR22(val OptBlockchainConfig22) {
	s.R22 = val
}

// SetR23 sets the value of R23.
func (s *BlockchainConfig) SetR23(val OptBlockchainConfig23) {
	s.R23 = val
}

// SetR24 sets the value of R24.
func (s *BlockchainConfig) SetR24(val OptBlockchainConfig24) {
	s.R24 = val
}

// SetR25 sets the value of R25.
func (s *BlockchainConfig) SetR25(val OptBlockchainConfig25) {
	s.R25 = val
}

// SetR28 sets the value of R28.
func (s *BlockchainConfig) SetR28(val OptBlockchainConfig28) {
	s.R28 = val
}

// SetR29 sets the value of R29.
func (s *BlockchainConfig) SetR29(val OptBlockchainConfig29) {
	s.R29 = val
}

// SetR31 sets the value of R31.
func (s *BlockchainConfig) SetR31(val OptBlockchainConfig31) {
	s.R31 = val
}

// SetR32 sets the value of R32.
func (s *BlockchainConfig) SetR32(val OptValidatorsSet) {
	s.R32 = val
}

// SetR33 sets the value of R33.
func (s *BlockchainConfig) SetR33(val OptValidatorsSet) {
	s.R33 = val
}

// SetR34 sets the value of R34.
func (s *BlockchainConfig) SetR34(val OptValidatorsSet) {
	s.R34 = val
}

// SetR35 sets the value of R35.
func (s *BlockchainConfig) SetR35(val OptValidatorsSet) {
	s.R35 = val
}

// SetR36 sets the value of R36.
func (s *BlockchainConfig) SetR36(val OptValidatorsSet) {
	s.R36 = val
}

// SetR37 sets the value of R37.
func (s *BlockchainConfig) SetR37(val OptValidatorsSet) {
	s.R37 = val
}

// SetR40 sets the value of R40.
func (s *BlockchainConfig) SetR40(val OptBlockchainConfig40) {
	s.R40 = val
}

// SetR43 sets the value of R43.
func (s *BlockchainConfig) SetR43(val OptBlockchainConfig43) {
	s.R43 = val
}

// SetR44 sets the value of R44.
func (s *BlockchainConfig) SetR44(val BlockchainConfig44) {
	s.R44 = val
}

// SetR71 sets the value of R71.
func (s *BlockchainConfig) SetR71(val OptBlockchainConfig71) {
	s.R71 = val
}

// SetR72 sets the value of R72.
func (s *BlockchainConfig) SetR72(val OptBlockchainConfig72) {
	s.R72 = val
}

// SetR73 sets the value of R73.
func (s *BlockchainConfig) SetR73(val OptBlockchainConfig73) {
	s.R73 = val
}

// SetR79 sets the value of R79.
func (s *BlockchainConfig) SetR79(val OptBlockchainConfig79) {
	s.R79 = val
}

// SetR81 sets the value of R81.
func (s *BlockchainConfig) SetR81(val OptBlockchainConfig81) {
	s.R81 = val
}

// SetR82 sets the value of R82.
func (s *BlockchainConfig) SetR82(val OptBlockchainConfig82) {
	s.R82 = val
}

// List of critical TON parameters, the change of which significantly affects the network, so more
// voting rounds are held.
type BlockchainConfig10 struct {
	CriticalParams []int32 `json:"critical_params"`
}

// GetCriticalParams returns the value of CriticalParams.
func (s *BlockchainConfig10) GetCriticalParams() []int32 {
	return s.CriticalParams
}

// SetCriticalParams sets the value of CriticalParams.
func (s *BlockchainConfig10) SetCriticalParams(val []int32) {
	s.CriticalParams = val
}

// This parameter indicates under what conditions proposals to change the TON configuration are
// accepted.
type BlockchainConfig11 struct {
	NormalParams   ConfigProposalSetup `json:"normal_params"`
	CriticalParams ConfigProposalSetup `json:"critical_params"`
}

// GetNormalParams returns the value of NormalParams.
func (s *BlockchainConfig11) GetNormalParams() ConfigProposalSetup {
	return s.NormalParams
}

// GetCriticalParams returns the value of CriticalParams.
func (s *BlockchainConfig11) GetCriticalParams() ConfigProposalSetup {
	return s.CriticalParams
}

// SetNormalParams sets the value of NormalParams.
func (s *BlockchainConfig11) SetNormalParams(val ConfigProposalSetup) {
	s.NormalParams = val
}

// SetCriticalParams sets the value of CriticalParams.
func (s *BlockchainConfig11) SetCriticalParams(val ConfigProposalSetup) {
	s.CriticalParams = val
}

// Workchains in the TON Blockchain.
type BlockchainConfig12 struct {
	Workchains []WorkchainDescr `json:"workchains"`
}

// GetWorkchains returns the value of Workchains.
func (s *BlockchainConfig12) GetWorkchains() []WorkchainDescr {
	return s.Workchains
}

// SetWorkchains sets the value of Workchains.
func (s *BlockchainConfig12) SetWorkchains(val []WorkchainDescr) {
	s.Workchains = val
}

// The cost of filing complaints about incorrect operation of validators.
type BlockchainConfig13 struct {
	Deposit   int64 `json:"deposit"`
	BitPrice  int64 `json:"bit_price"`
	CellPrice int64 `json:"cell_price"`
}

// GetDeposit returns the value of Deposit.
func (s *BlockchainConfig13) GetDeposit() int64 {
	return s.Deposit
}

// GetBitPrice returns the value of BitPrice.
func (s *BlockchainConfig13) GetBitPrice() int64 {
	return s.BitPrice
}

// GetCellPrice returns the value of CellPrice.
func (s *BlockchainConfig13) GetCellPrice() int64 {
	return s.CellPrice
}

// SetDeposit sets the value of Deposit.
func (s *BlockchainConfig13) SetDeposit(val int64) {
	s.Deposit = val
}

// SetBitPrice sets the value of BitPrice.
func (s *BlockchainConfig13) SetBitPrice(val int64) {
	s.BitPrice = val
}

// SetCellPrice sets the value of CellPrice.
func (s *BlockchainConfig13) SetCellPrice(val int64) {
	s.CellPrice = val
}

// The reward in nanoTons for block creation in the TON blockchain.
type BlockchainConfig14 struct {
	MasterchainBlockFee int64 `json:"masterchain_block_fee"`
	BasechainBlockFee   int64 `json:"basechain_block_fee"`
}

// GetMasterchainBlockFee returns the value of MasterchainBlockFee.
func (s *BlockchainConfig14) GetMasterchainBlockFee() int64 {
	return s.MasterchainBlockFee
}

// GetBasechainBlockFee returns the value of BasechainBlockFee.
func (s *BlockchainConfig14) GetBasechainBlockFee() int64 {
	return s.BasechainBlockFee
}

// SetMasterchainBlockFee sets the value of MasterchainBlockFee.
func (s *BlockchainConfig14) SetMasterchainBlockFee(val int64) {
	s.MasterchainBlockFee = val
}

// SetBasechainBlockFee sets the value of BasechainBlockFee.
func (s *BlockchainConfig14) SetBasechainBlockFee(val int64) {
	s.BasechainBlockFee = val
}

// The reward in nanoTons for block creation in the TON blockchain.
type BlockchainConfig15 struct {
	ValidatorsElectedFor int64 `json:"validators_elected_for"`
	ElectionsStartBefore int64 `json:"elections_start_before"`
	ElectionsEndBefore   int64 `json:"elections_end_before"`
	StakeHeldFor         int64 `json:"stake_held_for"`
}

// GetValidatorsElectedFor returns the value of ValidatorsElectedFor.
func (s *BlockchainConfig15) GetValidatorsElectedFor() int64 {
	return s.ValidatorsElectedFor
}

// GetElectionsStartBefore returns the value of ElectionsStartBefore.
func (s *BlockchainConfig15) GetElectionsStartBefore() int64 {
	return s.ElectionsStartBefore
}

// GetElectionsEndBefore returns the value of ElectionsEndBefore.
func (s *BlockchainConfig15) GetElectionsEndBefore() int64 {
	return s.ElectionsEndBefore
}

// GetStakeHeldFor returns the value of StakeHeldFor.
func (s *BlockchainConfig15) GetStakeHeldFor() int64 {
	return s.StakeHeldFor
}

// SetValidatorsElectedFor sets the value of ValidatorsElectedFor.
func (s *BlockchainConfig15) SetValidatorsElectedFor(val int64) {
	s.ValidatorsElectedFor = val
}

// SetElectionsStartBefore sets the value of ElectionsStartBefore.
func (s *BlockchainConfig15) SetElectionsStartBefore(val int64) {
	s.ElectionsStartBefore = val
}

// SetElectionsEndBefore sets the value of ElectionsEndBefore.
func (s *BlockchainConfig15) SetElectionsEndBefore(val int64) {
	s.ElectionsEndBefore = val
}

// SetStakeHeldFor sets the value of StakeHeldFor.
func (s *BlockchainConfig15) SetStakeHeldFor(val int64) {
	s.StakeHeldFor = val
}

// The limits on the number of validators in the TON blockchain.
type BlockchainConfig16 struct {
	MaxValidators     int `json:"max_validators"`
	MaxMainValidators int `json:"max_main_validators"`
	MinValidators     int `json:"min_validators"`
}

// GetMaxValidators returns the value of MaxValidators.
func (s *BlockchainConfig16) GetMaxValidators() int {
	return s.MaxValidators
}

// GetMaxMainValidators returns the value of MaxMainValidators.
func (s *BlockchainConfig16) GetMaxMainValidators() int {
	return s.MaxMainValidators
}

// GetMinValidators returns the value of MinValidators.
func (s *BlockchainConfig16) GetMinValidators() int {
	return s.MinValidators
}

// SetMaxValidators sets the value of MaxValidators.
func (s *BlockchainConfig16) SetMaxValidators(val int) {
	s.MaxValidators = val
}

// SetMaxMainValidators sets the value of MaxMainValidators.
func (s *BlockchainConfig16) SetMaxMainValidators(val int) {
	s.MaxMainValidators = val
}

// SetMinValidators sets the value of MinValidators.
func (s *BlockchainConfig16) SetMinValidators(val int) {
	s.MinValidators = val
}

// The stake parameters configuration in the TON blockchain.
type BlockchainConfig17 struct {
	MinStake       string `json:"min_stake"`
	MaxStake       string `json:"max_stake"`
	MinTotalStake  string `json:"min_total_stake"`
	MaxStakeFactor int64  `json:"max_stake_factor"`
}

// GetMinStake returns the value of MinStake.
func (s *BlockchainConfig17) GetMinStake() string {
	return s.MinStake
}

// GetMaxStake returns the value of MaxStake.
func (s *BlockchainConfig17) GetMaxStake() string {
	return s.MaxStake
}

// GetMinTotalStake returns the value of MinTotalStake.
func (s *BlockchainConfig17) GetMinTotalStake() string {
	return s.MinTotalStake
}

// GetMaxStakeFactor returns the value of MaxStakeFactor.
func (s *BlockchainConfig17) GetMaxStakeFactor() int64 {
	return s.MaxStakeFactor
}

// SetMinStake sets the value of MinStake.
func (s *BlockchainConfig17) SetMinStake(val string) {
	s.MinStake = val
}

// SetMaxStake sets the value of MaxStake.
func (s *BlockchainConfig17) SetMaxStake(val string) {
	s.MaxStake = val
}

// SetMinTotalStake sets the value of MinTotalStake.
func (s *BlockchainConfig17) SetMinTotalStake(val string) {
	s.MinTotalStake = val
}

// SetMaxStakeFactor sets the value of MaxStakeFactor.
func (s *BlockchainConfig17) SetMaxStakeFactor(val int64) {
	s.MaxStakeFactor = val
}

// The prices for data storage.
type BlockchainConfig18 struct {
	StoragePrices []BlockchainConfig18StoragePricesItem `json:"storage_prices"`
}

// GetStoragePrices returns the value of StoragePrices.
func (s *BlockchainConfig18) GetStoragePrices() []BlockchainConfig18StoragePricesItem {
	return s.StoragePrices
}

// SetStoragePrices sets the value of StoragePrices.
func (s *BlockchainConfig18) SetStoragePrices(val []BlockchainConfig18StoragePricesItem) {
	s.StoragePrices = val
}

type BlockchainConfig18StoragePricesItem struct {
	UtimeSince    int64 `json:"utime_since"`
	BitPricePs    int64 `json:"bit_price_ps"`
	CellPricePs   int64 `json:"cell_price_ps"`
	McBitPricePs  int64 `json:"mc_bit_price_ps"`
	McCellPricePs int64 `json:"mc_cell_price_ps"`
}

// GetUtimeSince returns the value of UtimeSince.
func (s *BlockchainConfig18StoragePricesItem) GetUtimeSince() int64 {
	return s.UtimeSince
}

// GetBitPricePs returns the value of BitPricePs.
func (s *BlockchainConfig18StoragePricesItem) GetBitPricePs() int64 {
	return s.BitPricePs
}

// GetCellPricePs returns the value of CellPricePs.
func (s *BlockchainConfig18StoragePricesItem) GetCellPricePs() int64 {
	return s.CellPricePs
}

// GetMcBitPricePs returns the value of McBitPricePs.
func (s *BlockchainConfig18StoragePricesItem) GetMcBitPricePs() int64 {
	return s.McBitPricePs
}

// GetMcCellPricePs returns the value of McCellPricePs.
func (s *BlockchainConfig18StoragePricesItem) GetMcCellPricePs() int64 {
	return s.McCellPricePs
}

// SetUtimeSince sets the value of UtimeSince.
func (s *BlockchainConfig18StoragePricesItem) SetUtimeSince(val int64) {
	s.UtimeSince = val
}

// SetBitPricePs sets the value of BitPricePs.
func (s *BlockchainConfig18StoragePricesItem) SetBitPricePs(val int64) {
	s.BitPricePs = val
}

// SetCellPricePs sets the value of CellPricePs.
func (s *BlockchainConfig18StoragePricesItem) SetCellPricePs(val int64) {
	s.CellPricePs = val
}

// SetMcBitPricePs sets the value of McBitPricePs.
func (s *BlockchainConfig18StoragePricesItem) SetMcBitPricePs(val int64) {
	s.McBitPricePs = val
}

// SetMcCellPricePs sets the value of McCellPricePs.
func (s *BlockchainConfig18StoragePricesItem) SetMcCellPricePs(val int64) {
	s.McCellPricePs = val
}

// The cost of computations in the masterchain. The complexity of any computation is estimated in gas
// units.
type BlockchainConfig20 struct {
	GasLimitsPrices GasLimitPrices `json:"gas_limits_prices"`
}

// GetGasLimitsPrices returns the value of GasLimitsPrices.
func (s *BlockchainConfig20) GetGasLimitsPrices() GasLimitPrices {
	return s.GasLimitsPrices
}

// SetGasLimitsPrices sets the value of GasLimitsPrices.
func (s *BlockchainConfig20) SetGasLimitsPrices(val GasLimitPrices) {
	s.GasLimitsPrices = val
}

// The cost of computations in the basechains. The complexity of any computation is estimated in gas
// units.
type BlockchainConfig21 struct {
	GasLimitsPrices GasLimitPrices `json:"gas_limits_prices"`
}

// GetGasLimitsPrices returns the value of GasLimitsPrices.
func (s *BlockchainConfig21) GetGasLimitsPrices() GasLimitPrices {
	return s.GasLimitsPrices
}

// SetGasLimitsPrices sets the value of GasLimitsPrices.
func (s *BlockchainConfig21) SetGasLimitsPrices(val GasLimitPrices) {
	s.GasLimitsPrices = val
}

// The limits on the block in the masterchain, upon reaching which the block is finalized and the
// callback of the remaining messages (if any) is carried over to the next block.
type BlockchainConfig22 struct {
	BlockLimits BlockLimits `json:"block_limits"`
}

// GetBlockLimits returns the value of BlockLimits.
func (s *BlockchainConfig22) GetBlockLimits() BlockLimits {
	return s.BlockLimits
}

// SetBlockLimits sets the value of BlockLimits.
func (s *BlockchainConfig22) SetBlockLimits(val BlockLimits) {
	s.BlockLimits = val
}

// The limits on the block in the basechains, upon reaching which the block is finalized and the
// callback of the remaining messages (if any) is carried over to the next block.
type BlockchainConfig23 struct {
	BlockLimits BlockLimits `json:"block_limits"`
}

// GetBlockLimits returns the value of BlockLimits.
func (s *BlockchainConfig23) GetBlockLimits() BlockLimits {
	return s.BlockLimits
}

// SetBlockLimits sets the value of BlockLimits.
func (s *BlockchainConfig23) SetBlockLimits(val BlockLimits) {
	s.BlockLimits = val
}

// The cost of sending messages in the masterchain of the TON blockchain.
type BlockchainConfig24 struct {
	MsgForwardPrices MsgForwardPrices `json:"msg_forward_prices"`
}

// GetMsgForwardPrices returns the value of MsgForwardPrices.
func (s *BlockchainConfig24) GetMsgForwardPrices() MsgForwardPrices {
	return s.MsgForwardPrices
}

// SetMsgForwardPrices sets the value of MsgForwardPrices.
func (s *BlockchainConfig24) SetMsgForwardPrices(val MsgForwardPrices) {
	s.MsgForwardPrices = val
}

// The cost of sending messages in the basechains of the TON blockchain.
type BlockchainConfig25 struct {
	MsgForwardPrices MsgForwardPrices `json:"msg_forward_prices"`
}

// GetMsgForwardPrices returns the value of MsgForwardPrices.
func (s *BlockchainConfig25) GetMsgForwardPrices() MsgForwardPrices {
	return s.MsgForwardPrices
}

// SetMsgForwardPrices sets the value of MsgForwardPrices.
func (s *BlockchainConfig25) SetMsgForwardPrices(val MsgForwardPrices) {
	s.MsgForwardPrices = val
}

// The configuration for the Catchain protocol.
type BlockchainConfig28 struct {
	McCatchainLifetime      int64   `json:"mc_catchain_lifetime"`
	ShardCatchainLifetime   int64   `json:"shard_catchain_lifetime"`
	ShardValidatorsLifetime int64   `json:"shard_validators_lifetime"`
	ShardValidatorsNum      int64   `json:"shard_validators_num"`
	Flags                   OptInt  `json:"flags"`
	ShuffleMcValidators     OptBool `json:"shuffle_mc_validators"`
}

// GetMcCatchainLifetime returns the value of McCatchainLifetime.
func (s *BlockchainConfig28) GetMcCatchainLifetime() int64 {
	return s.McCatchainLifetime
}

// GetShardCatchainLifetime returns the value of ShardCatchainLifetime.
func (s *BlockchainConfig28) GetShardCatchainLifetime() int64 {
	return s.ShardCatchainLifetime
}

// GetShardValidatorsLifetime returns the value of ShardValidatorsLifetime.
func (s *BlockchainConfig28) GetShardValidatorsLifetime() int64 {
	return s.ShardValidatorsLifetime
}

// GetShardValidatorsNum returns the value of ShardValidatorsNum.
func (s *BlockchainConfig28) GetShardValidatorsNum() int64 {
	return s.ShardValidatorsNum
}

// GetFlags returns the value of Flags.
func (s *BlockchainConfig28) GetFlags() OptInt {
	return s.Flags
}

// GetShuffleMcValidators returns the value of ShuffleMcValidators.
func (s *BlockchainConfig28) GetShuffleMcValidators() OptBool {
	return s.ShuffleMcValidators
}

// SetMcCatchainLifetime sets the value of McCatchainLifetime.
func (s *BlockchainConfig28) SetMcCatchainLifetime(val int64) {
	s.McCatchainLifetime = val
}

// SetShardCatchainLifetime sets the value of ShardCatchainLifetime.
func (s *BlockchainConfig28) SetShardCatchainLifetime(val int64) {
	s.ShardCatchainLifetime = val
}

// SetShardValidatorsLifetime sets the value of ShardValidatorsLifetime.
func (s *BlockchainConfig28) SetShardValidatorsLifetime(val int64) {
	s.ShardValidatorsLifetime = val
}

// SetShardValidatorsNum sets the value of ShardValidatorsNum.
func (s *BlockchainConfig28) SetShardValidatorsNum(val int64) {
	s.ShardValidatorsNum = val
}

// SetFlags sets the value of Flags.
func (s *BlockchainConfig28) SetFlags(val OptInt) {
	s.Flags = val
}

// SetShuffleMcValidators sets the value of ShuffleMcValidators.
func (s *BlockchainConfig28) SetShuffleMcValidators(val OptBool) {
	s.ShuffleMcValidators = val
}

// The configuration for the consensus protocol above catchain.
type BlockchainConfig29 struct {
	Flags                  OptInt   `json:"flags"`
	NewCatchainIds         OptBool  `json:"new_catchain_ids"`
	RoundCandidates        int64    `json:"round_candidates"`
	NextCandidateDelayMs   int64    `json:"next_candidate_delay_ms"`
	ConsensusTimeoutMs     int64    `json:"consensus_timeout_ms"`
	FastAttempts           int64    `json:"fast_attempts"`
	AttemptDuration        int64    `json:"attempt_duration"`
	CatchainMaxDeps        int64    `json:"catchain_max_deps"`
	MaxBlockBytes          int64    `json:"max_block_bytes"`
	MaxCollatedBytes       int64    `json:"max_collated_bytes"`
	ProtoVersion           OptInt64 `json:"proto_version"`
	CatchainMaxBlocksCoeff OptInt64 `json:"catchain_max_blocks_coeff"`
}

// GetFlags returns the value of Flags.
func (s *BlockchainConfig29) GetFlags() OptInt {
	return s.Flags
}

// GetNewCatchainIds returns the value of NewCatchainIds.
func (s *BlockchainConfig29) GetNewCatchainIds() OptBool {
	return s.NewCatchainIds
}

// GetRoundCandidates returns the value of RoundCandidates.
func (s *BlockchainConfig29) GetRoundCandidates() int64 {
	return s.RoundCandidates
}

// GetNextCandidateDelayMs returns the value of NextCandidateDelayMs.
func (s *BlockchainConfig29) GetNextCandidateDelayMs() int64 {
	return s.NextCandidateDelayMs
}

// GetConsensusTimeoutMs returns the value of ConsensusTimeoutMs.
func (s *BlockchainConfig29) GetConsensusTimeoutMs() int64 {
	return s.ConsensusTimeoutMs
}

// GetFastAttempts returns the value of FastAttempts.
func (s *BlockchainConfig29) GetFastAttempts() int64 {
	return s.FastAttempts
}

// GetAttemptDuration returns the value of AttemptDuration.
func (s *BlockchainConfig29) GetAttemptDuration() int64 {
	return s.AttemptDuration
}

// GetCatchainMaxDeps returns the value of CatchainMaxDeps.
func (s *BlockchainConfig29) GetCatchainMaxDeps() int64 {
	return s.CatchainMaxDeps
}

// GetMaxBlockBytes returns the value of MaxBlockBytes.
func (s *BlockchainConfig29) GetMaxBlockBytes() int64 {
	return s.MaxBlockBytes
}

// GetMaxCollatedBytes returns the value of MaxCollatedBytes.
func (s *BlockchainConfig29) GetMaxCollatedBytes() int64 {
	return s.MaxCollatedBytes
}

// GetProtoVersion returns the value of ProtoVersion.
func (s *BlockchainConfig29) GetProtoVersion() OptInt64 {
	return s.ProtoVersion
}

// GetCatchainMaxBlocksCoeff returns the value of CatchainMaxBlocksCoeff.
func (s *BlockchainConfig29) GetCatchainMaxBlocksCoeff() OptInt64 {
	return s.CatchainMaxBlocksCoeff
}

// SetFlags sets the value of Flags.
func (s *BlockchainConfig29) SetFlags(val OptInt) {
	s.Flags = val
}

// SetNewCatchainIds sets the value of NewCatchainIds.
func (s *BlockchainConfig29) SetNewCatchainIds(val OptBool) {
	s.NewCatchainIds = val
}

// SetRoundCandidates sets the value of RoundCandidates.
func (s *BlockchainConfig29) SetRoundCandidates(val int64) {
	s.RoundCandidates = val
}

// SetNextCandidateDelayMs sets the value of NextCandidateDelayMs.
func (s *BlockchainConfig29) SetNextCandidateDelayMs(val int64) {
	s.NextCandidateDelayMs = val
}

// SetConsensusTimeoutMs sets the value of ConsensusTimeoutMs.
func (s *BlockchainConfig29) SetConsensusTimeoutMs(val int64) {
	s.ConsensusTimeoutMs = val
}

// SetFastAttempts sets the value of FastAttempts.
func (s *BlockchainConfig29) SetFastAttempts(val int64) {
	s.FastAttempts = val
}

// SetAttemptDuration sets the value of AttemptDuration.
func (s *BlockchainConfig29) SetAttemptDuration(val int64) {
	s.AttemptDuration = val
}

// SetCatchainMaxDeps sets the value of CatchainMaxDeps.
func (s *BlockchainConfig29) SetCatchainMaxDeps(val int64) {
	s.CatchainMaxDeps = val
}

// SetMaxBlockBytes sets the value of MaxBlockBytes.
func (s *BlockchainConfig29) SetMaxBlockBytes(val int64) {
	s.MaxBlockBytes = val
}

// SetMaxCollatedBytes sets the value of MaxCollatedBytes.
func (s *BlockchainConfig29) SetMaxCollatedBytes(val int64) {
	s.MaxCollatedBytes = val
}

// SetProtoVersion sets the value of ProtoVersion.
func (s *BlockchainConfig29) SetProtoVersion(val OptInt64) {
	s.ProtoVersion = val
}

// SetCatchainMaxBlocksCoeff sets the value of CatchainMaxBlocksCoeff.
func (s *BlockchainConfig29) SetCatchainMaxBlocksCoeff(val OptInt64) {
	s.CatchainMaxBlocksCoeff = val
}

// The configuration for the consensus protocol above catchain.
type BlockchainConfig31 struct {
	FundamentalSmcAddr []string `json:"fundamental_smc_addr"`
}

// GetFundamentalSmcAddr returns the value of FundamentalSmcAddr.
func (s *BlockchainConfig31) GetFundamentalSmcAddr() []string {
	return s.FundamentalSmcAddr
}

// SetFundamentalSmcAddr sets the value of FundamentalSmcAddr.
func (s *BlockchainConfig31) SetFundamentalSmcAddr(val []string) {
	s.FundamentalSmcAddr = val
}

// The configuration for punishment for improper behavior (non-validation). In the absence of the
// parameter, the default fine size is 101 TON.
type BlockchainConfig40 struct {
	MisbehaviourPunishmentConfig MisbehaviourPunishmentConfig `json:"misbehaviour_punishment_config"`
}

// GetMisbehaviourPunishmentConfig returns the value of MisbehaviourPunishmentConfig.
func (s *BlockchainConfig40) GetMisbehaviourPunishmentConfig() MisbehaviourPunishmentConfig {
	return s.MisbehaviourPunishmentConfig
}

// SetMisbehaviourPunishmentConfig sets the value of MisbehaviourPunishmentConfig.
func (s *BlockchainConfig40) SetMisbehaviourPunishmentConfig(val MisbehaviourPunishmentConfig) {
	s.MisbehaviourPunishmentConfig = val
}

// The size limits and some other characteristics of accounts and messages.
type BlockchainConfig43 struct {
	SizeLimitsConfig SizeLimitsConfig `json:"size_limits_config"`
}

// GetSizeLimitsConfig returns the value of SizeLimitsConfig.
func (s *BlockchainConfig43) GetSizeLimitsConfig() SizeLimitsConfig {
	return s.SizeLimitsConfig
}

// SetSizeLimitsConfig sets the value of SizeLimitsConfig.
func (s *BlockchainConfig43) SetSizeLimitsConfig(val SizeLimitsConfig) {
	s.SizeLimitsConfig = val
}

// Suspended accounts.
type BlockchainConfig44 struct {
	Accounts       []string `json:"accounts"`
	SuspendedUntil int      `json:"suspended_until"`
}

// GetAccounts returns the value of Accounts.
func (s *BlockchainConfig44) GetAccounts() []string {
	return s.Accounts
}

// GetSuspendedUntil returns the value of SuspendedUntil.
func (s *BlockchainConfig44) GetSuspendedUntil() int {
	return s.SuspendedUntil
}

// SetAccounts sets the value of Accounts.
func (s *BlockchainConfig44) SetAccounts(val []string) {
	s.Accounts = val
}

// SetSuspendedUntil sets the value of SuspendedUntil.
func (s *BlockchainConfig44) SetSuspendedUntil(val int) {
	s.SuspendedUntil = val
}

type BlockchainConfig5 struct {
	BlackholeAddr OptString `json:"blackhole_addr"`
	FeeBurnNom    int64     `json:"fee_burn_nom"`
	FeeBurnDenom  int64     `json:"fee_burn_denom"`
}

// GetBlackholeAddr returns the value of BlackholeAddr.
func (s *BlockchainConfig5) GetBlackholeAddr() OptString {
	return s.BlackholeAddr
}

// GetFeeBurnNom returns the value of FeeBurnNom.
func (s *BlockchainConfig5) GetFeeBurnNom() int64 {
	return s.FeeBurnNom
}

// GetFeeBurnDenom returns the value of FeeBurnDenom.
func (s *BlockchainConfig5) GetFeeBurnDenom() int64 {
	return s.FeeBurnDenom
}

// SetBlackholeAddr sets the value of BlackholeAddr.
func (s *BlockchainConfig5) SetBlackholeAddr(val OptString) {
	s.BlackholeAddr = val
}

// SetFeeBurnNom sets the value of FeeBurnNom.
func (s *BlockchainConfig5) SetFeeBurnNom(val int64) {
	s.FeeBurnNom = val
}

// SetFeeBurnDenom sets the value of FeeBurnDenom.
func (s *BlockchainConfig5) SetFeeBurnDenom(val int64) {
	s.FeeBurnDenom = val
}

// Minting fees of new currencies.
type BlockchainConfig6 struct {
	MintNewPrice int64 `json:"mint_new_price"`
	MintAddPrice int64 `json:"mint_add_price"`
}

// GetMintNewPrice returns the value of MintNewPrice.
func (s *BlockchainConfig6) GetMintNewPrice() int64 {
	return s.MintNewPrice
}

// GetMintAddPrice returns the value of MintAddPrice.
func (s *BlockchainConfig6) GetMintAddPrice() int64 {
	return s.MintAddPrice
}

// SetMintNewPrice sets the value of MintNewPrice.
func (s *BlockchainConfig6) SetMintNewPrice(val int64) {
	s.MintNewPrice = val
}

// SetMintAddPrice sets the value of MintAddPrice.
func (s *BlockchainConfig6) SetMintAddPrice(val int64) {
	s.MintAddPrice = val
}

// The volume of each of the additional currencies in circulation.
type BlockchainConfig7 struct {
	Currencies []BlockchainConfig7CurrenciesItem `json:"currencies"`
}

// GetCurrencies returns the value of Currencies.
func (s *BlockchainConfig7) GetCurrencies() []BlockchainConfig7CurrenciesItem {
	return s.Currencies
}

// SetCurrencies sets the value of Currencies.
func (s *BlockchainConfig7) SetCurrencies(val []BlockchainConfig7CurrenciesItem) {
	s.Currencies = val
}

// Bridge parameters for wrapping TON in other networks.
type BlockchainConfig71 struct {
	OracleBridgeParams OracleBridgeParams `json:"oracle_bridge_params"`
}

// GetOracleBridgeParams returns the value of OracleBridgeParams.
func (s *BlockchainConfig71) GetOracleBridgeParams() OracleBridgeParams {
	return s.OracleBridgeParams
}

// SetOracleBridgeParams sets the value of OracleBridgeParams.
func (s *BlockchainConfig71) SetOracleBridgeParams(val OracleBridgeParams) {
	s.OracleBridgeParams = val
}

// Bridge parameters for wrapping TON in other networks.
type BlockchainConfig72 struct {
	OracleBridgeParams OracleBridgeParams `json:"oracle_bridge_params"`
}

// GetOracleBridgeParams returns the value of OracleBridgeParams.
func (s *BlockchainConfig72) GetOracleBridgeParams() OracleBridgeParams {
	return s.OracleBridgeParams
}

// SetOracleBridgeParams sets the value of OracleBridgeParams.
func (s *BlockchainConfig72) SetOracleBridgeParams(val OracleBridgeParams) {
	s.OracleBridgeParams = val
}

// Bridge parameters for wrapping TON in other networks.
type BlockchainConfig73 struct {
	OracleBridgeParams OracleBridgeParams `json:"oracle_bridge_params"`
}

// GetOracleBridgeParams returns the value of OracleBridgeParams.
func (s *BlockchainConfig73) GetOracleBridgeParams() OracleBridgeParams {
	return s.OracleBridgeParams
}

// SetOracleBridgeParams sets the value of OracleBridgeParams.
func (s *BlockchainConfig73) SetOracleBridgeParams(val OracleBridgeParams) {
	s.OracleBridgeParams = val
}

// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
type BlockchainConfig79 struct {
	JettonBridgeParams JettonBridgeParams `json:"jetton_bridge_params"`
}

// GetJettonBridgeParams returns the value of JettonBridgeParams.
func (s *BlockchainConfig79) GetJettonBridgeParams() JettonBridgeParams {
	return s.JettonBridgeParams
}

// SetJettonBridgeParams sets the value of JettonBridgeParams.
func (s *BlockchainConfig79) SetJettonBridgeParams(val JettonBridgeParams) {
	s.JettonBridgeParams = val
}

type BlockchainConfig7CurrenciesItem struct {
	CurrencyID int64  `json:"currency_id"`
	Amount     string `json:"amount"`
}

// GetCurrencyID returns the value of CurrencyID.
func (s *BlockchainConfig7CurrenciesItem) GetCurrencyID() int64 {
	return s.CurrencyID
}

// GetAmount returns the value of Amount.
func (s *BlockchainConfig7CurrenciesItem) GetAmount() string {
	return s.Amount
}

// SetCurrencyID sets the value of CurrencyID.
func (s *BlockchainConfig7CurrenciesItem) SetCurrencyID(val int64) {
	s.CurrencyID = val
}

// SetAmount sets the value of Amount.
func (s *BlockchainConfig7CurrenciesItem) SetAmount(val string) {
	s.Amount = val
}

// The network version and additional capabilities supported by the validators.
type BlockchainConfig8 struct {
	Version      int64 `json:"version"`
	Capabilities int64 `json:"capabilities"`
}

// GetVersion returns the value of Version.
func (s *BlockchainConfig8) GetVersion() int64 {
	return s.Version
}

// GetCapabilities returns the value of Capabilities.
func (s *BlockchainConfig8) GetCapabilities() int64 {
	return s.Capabilities
}

// SetVersion sets the value of Version.
func (s *BlockchainConfig8) SetVersion(val int64) {
	s.Version = val
}

// SetCapabilities sets the value of Capabilities.
func (s *BlockchainConfig8) SetCapabilities(val int64) {
	s.Capabilities = val
}

// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
type BlockchainConfig81 struct {
	JettonBridgeParams JettonBridgeParams `json:"jetton_bridge_params"`
}

// GetJettonBridgeParams returns the value of JettonBridgeParams.
func (s *BlockchainConfig81) GetJettonBridgeParams() JettonBridgeParams {
	return s.JettonBridgeParams
}

// SetJettonBridgeParams sets the value of JettonBridgeParams.
func (s *BlockchainConfig81) SetJettonBridgeParams(val JettonBridgeParams) {
	s.JettonBridgeParams = val
}

// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
type BlockchainConfig82 struct {
	JettonBridgeParams JettonBridgeParams `json:"jetton_bridge_params"`
}

// GetJettonBridgeParams returns the value of JettonBridgeParams.
func (s *BlockchainConfig82) GetJettonBridgeParams() JettonBridgeParams {
	return s.JettonBridgeParams
}

// SetJettonBridgeParams sets the value of JettonBridgeParams.
func (s *BlockchainConfig82) SetJettonBridgeParams(val JettonBridgeParams) {
	s.JettonBridgeParams = val
}

// List of mandatory parameters of the blockchain config.
type BlockchainConfig9 struct {
	MandatoryParams []int32 `json:"mandatory_params"`
}

// GetMandatoryParams returns the value of MandatoryParams.
func (s *BlockchainConfig9) GetMandatoryParams() []int32 {
	return s.MandatoryParams
}

// SetMandatoryParams sets the value of MandatoryParams.
func (s *BlockchainConfig9) SetMandatoryParams(val []int32) {
	s.MandatoryParams = val
}

// Ref: #/components/schemas/BlockchainRawAccount
type BlockchainRawAccount struct {
	Address             string                              `json:"address"`
	Balance             int64                               `json:"balance"`
	ExtraBalance        OptBlockchainRawAccountExtraBalance `json:"extra_balance"`
	Code                OptString                           `json:"code"`
	Data                OptString                           `json:"data"`
	LastTransactionLt   int64                               `json:"last_transaction_lt"`
	LastTransactionHash OptString                           `json:"last_transaction_hash"`
	FrozenHash          OptString                           `json:"frozen_hash"`
	Status              AccountStatus                       `json:"status"`
	Storage             AccountStorageInfo                  `json:"storage"`
	Libraries           []BlockchainRawAccountLibrariesItem `json:"libraries"`
}

// GetAddress returns the value of Address.
func (s *BlockchainRawAccount) GetAddress() string {
	return s.Address
}

// GetBalance returns the value of Balance.
func (s *BlockchainRawAccount) GetBalance() int64 {
	return s.Balance
}

// GetExtraBalance returns the value of ExtraBalance.
func (s *BlockchainRawAccount) GetExtraBalance() OptBlockchainRawAccountExtraBalance {
	return s.ExtraBalance
}

// GetCode returns the value of Code.
func (s *BlockchainRawAccount) GetCode() OptString {
	return s.Code
}

// GetData returns the value of Data.
func (s *BlockchainRawAccount) GetData() OptString {
	return s.Data
}

// GetLastTransactionLt returns the value of LastTransactionLt.
func (s *BlockchainRawAccount) GetLastTransactionLt() int64 {
	return s.LastTransactionLt
}

// GetLastTransactionHash returns the value of LastTransactionHash.
func (s *BlockchainRawAccount) GetLastTransactionHash() OptString {
	return s.LastTransactionHash
}

// GetFrozenHash returns the value of FrozenHash.
func (s *BlockchainRawAccount) GetFrozenHash() OptString {
	return s.FrozenHash
}

// GetStatus returns the value of Status.
func (s *BlockchainRawAccount) GetStatus() AccountStatus {
	return s.Status
}

// GetStorage returns the value of Storage.
func (s *BlockchainRawAccount) GetStorage() AccountStorageInfo {
	return s.Storage
}

// GetLibraries returns the value of Libraries.
func (s *BlockchainRawAccount) GetLibraries() []BlockchainRawAccountLibrariesItem {
	return s.Libraries
}

// SetAddress sets the value of Address.
func (s *BlockchainRawAccount) SetAddress(val string) {
	s.Address = val
}

// SetBalance sets the value of Balance.
func (s *BlockchainRawAccount) SetBalance(val int64) {
	s.Balance = val
}

// SetExtraBalance sets the value of ExtraBalance.
func (s *BlockchainRawAccount) SetExtraBalance(val OptBlockchainRawAccountExtraBalance) {
	s.ExtraBalance = val
}

// SetCode sets the value of Code.
func (s *BlockchainRawAccount) SetCode(val OptString) {
	s.Code = val
}

// SetData sets the value of Data.
func (s *BlockchainRawAccount) SetData(val OptString) {
	s.Data = val
}

// SetLastTransactionLt sets the value of LastTransactionLt.
func (s *BlockchainRawAccount) SetLastTransactionLt(val int64) {
	s.LastTransactionLt = val
}

// SetLastTransactionHash sets the value of LastTransactionHash.
func (s *BlockchainRawAccount) SetLastTransactionHash(val OptString) {
	s.LastTransactionHash = val
}

// SetFrozenHash sets the value of FrozenHash.
func (s *BlockchainRawAccount) SetFrozenHash(val OptString) {
	s.FrozenHash = val
}

// SetStatus sets the value of Status.
func (s *BlockchainRawAccount) SetStatus(val AccountStatus) {
	s.Status = val
}

// SetStorage sets the value of Storage.
func (s *BlockchainRawAccount) SetStorage(val AccountStorageInfo) {
	s.Storage = val
}

// SetLibraries sets the value of Libraries.
func (s *BlockchainRawAccount) SetLibraries(val []BlockchainRawAccountLibrariesItem) {
	s.Libraries = val
}

type BlockchainRawAccountExtraBalance map[string]string

func (s *BlockchainRawAccountExtraBalance) init() BlockchainRawAccountExtraBalance {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type BlockchainRawAccountLibrariesItem struct {
	Public bool   `json:"public"`
	Root   string `json:"root"`
}

// GetPublic returns the value of Public.
func (s *BlockchainRawAccountLibrariesItem) GetPublic() bool {
	return s.Public
}

// GetRoot returns the value of Root.
func (s *BlockchainRawAccountLibrariesItem) GetRoot() string {
	return s.Root
}

// SetPublic sets the value of Public.
func (s *BlockchainRawAccountLibrariesItem) SetPublic(val bool) {
	s.Public = val
}

// SetRoot sets the value of Root.
func (s *BlockchainRawAccountLibrariesItem) SetRoot(val string) {
	s.Root = val
}

// Ref: #/components/schemas/BouncePhaseType
type BouncePhaseType string

const (
	BouncePhaseTypeTrPhaseBounceNegfunds BouncePhaseType = "TrPhaseBounceNegfunds"
	BouncePhaseTypeTrPhaseBounceNofunds  BouncePhaseType = "TrPhaseBounceNofunds"
	BouncePhaseTypeTrPhaseBounceOk       BouncePhaseType = "TrPhaseBounceOk"
)

// AllValues returns all BouncePhaseType values.
func (BouncePhaseType) AllValues() []BouncePhaseType {
	return []BouncePhaseType{
		BouncePhaseTypeTrPhaseBounceNegfunds,
		BouncePhaseTypeTrPhaseBounceNofunds,
		BouncePhaseTypeTrPhaseBounceOk,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BouncePhaseType) MarshalText() ([]byte, error) {
	switch s {
	case BouncePhaseTypeTrPhaseBounceNegfunds:
		return []byte(s), nil
	case BouncePhaseTypeTrPhaseBounceNofunds:
		return []byte(s), nil
	case BouncePhaseTypeTrPhaseBounceOk:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BouncePhaseType) UnmarshalText(data []byte) error {
	switch BouncePhaseType(data) {
	case BouncePhaseTypeTrPhaseBounceNegfunds:
		*s = BouncePhaseTypeTrPhaseBounceNegfunds
		return nil
	case BouncePhaseTypeTrPhaseBounceNofunds:
		*s = BouncePhaseTypeTrPhaseBounceNofunds
		return nil
	case BouncePhaseTypeTrPhaseBounceOk:
		*s = BouncePhaseTypeTrPhaseBounceOk
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ComputePhase
type ComputePhase struct {
	Skipped             bool                 `json:"skipped"`
	SkipReason          OptComputeSkipReason `json:"skip_reason"`
	Success             OptBool              `json:"success"`
	GasFees             OptInt64             `json:"gas_fees"`
	GasUsed             OptInt64             `json:"gas_used"`
	VMSteps             OptInt32             `json:"vm_steps"`
	ExitCode            OptInt32             `json:"exit_code"`
	ExitCodeDescription OptString            `json:"exit_code_description"`
}

// GetSkipped returns the value of Skipped.
func (s *ComputePhase) GetSkipped() bool {
	return s.Skipped
}

// GetSkipReason returns the value of SkipReason.
func (s *ComputePhase) GetSkipReason() OptComputeSkipReason {
	return s.SkipReason
}

// GetSuccess returns the value of Success.
func (s *ComputePhase) GetSuccess() OptBool {
	return s.Success
}

// GetGasFees returns the value of GasFees.
func (s *ComputePhase) GetGasFees() OptInt64 {
	return s.GasFees
}

// GetGasUsed returns the value of GasUsed.
func (s *ComputePhase) GetGasUsed() OptInt64 {
	return s.GasUsed
}

// GetVMSteps returns the value of VMSteps.
func (s *ComputePhase) GetVMSteps() OptInt32 {
	return s.VMSteps
}

// GetExitCode returns the value of ExitCode.
func (s *ComputePhase) GetExitCode() OptInt32 {
	return s.ExitCode
}

// GetExitCodeDescription returns the value of ExitCodeDescription.
func (s *ComputePhase) GetExitCodeDescription() OptString {
	return s.ExitCodeDescription
}

// SetSkipped sets the value of Skipped.
func (s *ComputePhase) SetSkipped(val bool) {
	s.Skipped = val
}

// SetSkipReason sets the value of SkipReason.
func (s *ComputePhase) SetSkipReason(val OptComputeSkipReason) {
	s.SkipReason = val
}

// SetSuccess sets the value of Success.
func (s *ComputePhase) SetSuccess(val OptBool) {
	s.Success = val
}

// SetGasFees sets the value of GasFees.
func (s *ComputePhase) SetGasFees(val OptInt64) {
	s.GasFees = val
}

// SetGasUsed sets the value of GasUsed.
func (s *ComputePhase) SetGasUsed(val OptInt64) {
	s.GasUsed = val
}

// SetVMSteps sets the value of VMSteps.
func (s *ComputePhase) SetVMSteps(val OptInt32) {
	s.VMSteps = val
}

// SetExitCode sets the value of ExitCode.
func (s *ComputePhase) SetExitCode(val OptInt32) {
	s.ExitCode = val
}

// SetExitCodeDescription sets the value of ExitCodeDescription.
func (s *ComputePhase) SetExitCodeDescription(val OptString) {
	s.ExitCodeDescription = val
}

// Ref: #/components/schemas/ComputeSkipReason
type ComputeSkipReason string

const (
	ComputeSkipReasonCskipNoState  ComputeSkipReason = "cskip_no_state"
	ComputeSkipReasonCskipBadState ComputeSkipReason = "cskip_bad_state"
	ComputeSkipReasonCskipNoGas    ComputeSkipReason = "cskip_no_gas"
)

// AllValues returns all ComputeSkipReason values.
func (ComputeSkipReason) AllValues() []ComputeSkipReason {
	return []ComputeSkipReason{
		ComputeSkipReasonCskipNoState,
		ComputeSkipReasonCskipBadState,
		ComputeSkipReasonCskipNoGas,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ComputeSkipReason) MarshalText() ([]byte, error) {
	switch s {
	case ComputeSkipReasonCskipNoState:
		return []byte(s), nil
	case ComputeSkipReasonCskipBadState:
		return []byte(s), nil
	case ComputeSkipReasonCskipNoGas:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ComputeSkipReason) UnmarshalText(data []byte) error {
	switch ComputeSkipReason(data) {
	case ComputeSkipReasonCskipNoState:
		*s = ComputeSkipReasonCskipNoState
		return nil
	case ComputeSkipReasonCskipBadState:
		*s = ComputeSkipReasonCskipBadState
		return nil
	case ComputeSkipReasonCskipNoGas:
		*s = ComputeSkipReasonCskipNoGas
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ConfigProposalSetup
type ConfigProposalSetup struct {
	MinTotRounds int   `json:"min_tot_rounds"`
	MaxTotRounds int   `json:"max_tot_rounds"`
	MinWins      int   `json:"min_wins"`
	MaxLosses    int   `json:"max_losses"`
	MinStoreSec  int64 `json:"min_store_sec"`
	MaxStoreSec  int64 `json:"max_store_sec"`
	BitPrice     int64 `json:"bit_price"`
	CellPrice    int64 `json:"cell_price"`
}

// GetMinTotRounds returns the value of MinTotRounds.
func (s *ConfigProposalSetup) GetMinTotRounds() int {
	return s.MinTotRounds
}

// GetMaxTotRounds returns the value of MaxTotRounds.
func (s *ConfigProposalSetup) GetMaxTotRounds() int {
	return s.MaxTotRounds
}

// GetMinWins returns the value of MinWins.
func (s *ConfigProposalSetup) GetMinWins() int {
	return s.MinWins
}

// GetMaxLosses returns the value of MaxLosses.
func (s *ConfigProposalSetup) GetMaxLosses() int {
	return s.MaxLosses
}

// GetMinStoreSec returns the value of MinStoreSec.
func (s *ConfigProposalSetup) GetMinStoreSec() int64 {
	return s.MinStoreSec
}

// GetMaxStoreSec returns the value of MaxStoreSec.
func (s *ConfigProposalSetup) GetMaxStoreSec() int64 {
	return s.MaxStoreSec
}

// GetBitPrice returns the value of BitPrice.
func (s *ConfigProposalSetup) GetBitPrice() int64 {
	return s.BitPrice
}

// GetCellPrice returns the value of CellPrice.
func (s *ConfigProposalSetup) GetCellPrice() int64 {
	return s.CellPrice
}

// SetMinTotRounds sets the value of MinTotRounds.
func (s *ConfigProposalSetup) SetMinTotRounds(val int) {
	s.MinTotRounds = val
}

// SetMaxTotRounds sets the value of MaxTotRounds.
func (s *ConfigProposalSetup) SetMaxTotRounds(val int) {
	s.MaxTotRounds = val
}

// SetMinWins sets the value of MinWins.
func (s *ConfigProposalSetup) SetMinWins(val int) {
	s.MinWins = val
}

// SetMaxLosses sets the value of MaxLosses.
func (s *ConfigProposalSetup) SetMaxLosses(val int) {
	s.MaxLosses = val
}

// SetMinStoreSec sets the value of MinStoreSec.
func (s *ConfigProposalSetup) SetMinStoreSec(val int64) {
	s.MinStoreSec = val
}

// SetMaxStoreSec sets the value of MaxStoreSec.
func (s *ConfigProposalSetup) SetMaxStoreSec(val int64) {
	s.MaxStoreSec = val
}

// SetBitPrice sets the value of BitPrice.
func (s *ConfigProposalSetup) SetBitPrice(val int64) {
	s.BitPrice = val
}

// SetCellPrice sets the value of CellPrice.
func (s *ConfigProposalSetup) SetCellPrice(val int64) {
	s.CellPrice = val
}

// Ref: #/components/schemas/ContractDeployAction
type ContractDeployAction struct {
	Address    string   `json:"address"`
	Interfaces []string `json:"interfaces"`
}

// GetAddress returns the value of Address.
func (s *ContractDeployAction) GetAddress() string {
	return s.Address
}

// GetInterfaces returns the value of Interfaces.
func (s *ContractDeployAction) GetInterfaces() []string {
	return s.Interfaces
}

// SetAddress sets the value of Address.
func (s *ContractDeployAction) SetAddress(val string) {
	s.Address = val
}

// SetInterfaces sets the value of Interfaces.
func (s *ContractDeployAction) SetInterfaces(val []string) {
	s.Interfaces = val
}

// Ref: #/components/schemas/CreditPhase
type CreditPhase struct {
	FeesCollected int64 `json:"fees_collected"`
	Credit        int64 `json:"credit"`
}

// GetFeesCollected returns the value of FeesCollected.
func (s *CreditPhase) GetFeesCollected() int64 {
	return s.FeesCollected
}

// GetCredit returns the value of Credit.
func (s *CreditPhase) GetCredit() int64 {
	return s.Credit
}

// SetFeesCollected sets the value of FeesCollected.
func (s *CreditPhase) SetFeesCollected(val int64) {
	s.FeesCollected = val
}

// SetCredit sets the value of Credit.
func (s *CreditPhase) SetCredit(val int64) {
	s.Credit = val
}

type DecodeMessageReq struct {
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s *DecodeMessageReq) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *DecodeMessageReq) SetBoc(val string) {
	s.Boc = val
}

// Ref: #/components/schemas/DecodedMessage
type DecodedMessage struct {
	Destination              AccountAddress                   `json:"destination"`
	DestinationWalletVersion string                           `json:"destination_wallet_version"`
	ExtInMsgDecoded          OptDecodedMessageExtInMsgDecoded `json:"ext_in_msg_decoded"`
}

// GetDestination returns the value of Destination.
func (s *DecodedMessage) GetDestination() AccountAddress {
	return s.Destination
}

// GetDestinationWalletVersion returns the value of DestinationWalletVersion.
func (s *DecodedMessage) GetDestinationWalletVersion() string {
	return s.DestinationWalletVersion
}

// GetExtInMsgDecoded returns the value of ExtInMsgDecoded.
func (s *DecodedMessage) GetExtInMsgDecoded() OptDecodedMessageExtInMsgDecoded {
	return s.ExtInMsgDecoded
}

// SetDestination sets the value of Destination.
func (s *DecodedMessage) SetDestination(val AccountAddress) {
	s.Destination = val
}

// SetDestinationWalletVersion sets the value of DestinationWalletVersion.
func (s *DecodedMessage) SetDestinationWalletVersion(val string) {
	s.DestinationWalletVersion = val
}

// SetExtInMsgDecoded sets the value of ExtInMsgDecoded.
func (s *DecodedMessage) SetExtInMsgDecoded(val OptDecodedMessageExtInMsgDecoded) {
	s.ExtInMsgDecoded = val
}

type DecodedMessageExtInMsgDecoded struct {
	WalletV3         OptDecodedMessageExtInMsgDecodedWalletV3         `json:"wallet_v3"`
	WalletV4         OptDecodedMessageExtInMsgDecodedWalletV4         `json:"wallet_v4"`
	WalletHighloadV2 OptDecodedMessageExtInMsgDecodedWalletHighloadV2 `json:"wallet_highload_v2"`
}

// GetWalletV3 returns the value of WalletV3.
func (s *DecodedMessageExtInMsgDecoded) GetWalletV3() OptDecodedMessageExtInMsgDecodedWalletV3 {
	return s.WalletV3
}

// GetWalletV4 returns the value of WalletV4.
func (s *DecodedMessageExtInMsgDecoded) GetWalletV4() OptDecodedMessageExtInMsgDecodedWalletV4 {
	return s.WalletV4
}

// GetWalletHighloadV2 returns the value of WalletHighloadV2.
func (s *DecodedMessageExtInMsgDecoded) GetWalletHighloadV2() OptDecodedMessageExtInMsgDecodedWalletHighloadV2 {
	return s.WalletHighloadV2
}

// SetWalletV3 sets the value of WalletV3.
func (s *DecodedMessageExtInMsgDecoded) SetWalletV3(val OptDecodedMessageExtInMsgDecodedWalletV3) {
	s.WalletV3 = val
}

// SetWalletV4 sets the value of WalletV4.
func (s *DecodedMessageExtInMsgDecoded) SetWalletV4(val OptDecodedMessageExtInMsgDecodedWalletV4) {
	s.WalletV4 = val
}

// SetWalletHighloadV2 sets the value of WalletHighloadV2.
func (s *DecodedMessageExtInMsgDecoded) SetWalletHighloadV2(val OptDecodedMessageExtInMsgDecodedWalletHighloadV2) {
	s.WalletHighloadV2 = val
}

type DecodedMessageExtInMsgDecodedWalletHighloadV2 struct {
	SubwalletID    int64               `json:"subwallet_id"`
	BoundedQueryID string              `json:"bounded_query_id"`
	RawMessages    []DecodedRawMessage `json:"raw_messages"`
}

// GetSubwalletID returns the value of SubwalletID.
func (s *DecodedMessageExtInMsgDecodedWalletHighloadV2) GetSubwalletID() int64 {
	return s.SubwalletID
}

// GetBoundedQueryID returns the value of BoundedQueryID.
func (s *DecodedMessageExtInMsgDecodedWalletHighloadV2) GetBoundedQueryID() string {
	return s.BoundedQueryID
}

// GetRawMessages returns the value of RawMessages.
func (s *DecodedMessageExtInMsgDecodedWalletHighloadV2) GetRawMessages() []DecodedRawMessage {
	return s.RawMessages
}

// SetSubwalletID sets the value of SubwalletID.
func (s *DecodedMessageExtInMsgDecodedWalletHighloadV2) SetSubwalletID(val int64) {
	s.SubwalletID = val
}

// SetBoundedQueryID sets the value of BoundedQueryID.
func (s *DecodedMessageExtInMsgDecodedWalletHighloadV2) SetBoundedQueryID(val string) {
	s.BoundedQueryID = val
}

// SetRawMessages sets the value of RawMessages.
func (s *DecodedMessageExtInMsgDecodedWalletHighloadV2) SetRawMessages(val []DecodedRawMessage) {
	s.RawMessages = val
}

type DecodedMessageExtInMsgDecodedWalletV3 struct {
	SubwalletID int64               `json:"subwallet_id"`
	ValidUntil  int64               `json:"valid_until"`
	Seqno       int64               `json:"seqno"`
	RawMessages []DecodedRawMessage `json:"raw_messages"`
}

// GetSubwalletID returns the value of SubwalletID.
func (s *DecodedMessageExtInMsgDecodedWalletV3) GetSubwalletID() int64 {
	return s.SubwalletID
}

// GetValidUntil returns the value of ValidUntil.
func (s *DecodedMessageExtInMsgDecodedWalletV3) GetValidUntil() int64 {
	return s.ValidUntil
}

// GetSeqno returns the value of Seqno.
func (s *DecodedMessageExtInMsgDecodedWalletV3) GetSeqno() int64 {
	return s.Seqno
}

// GetRawMessages returns the value of RawMessages.
func (s *DecodedMessageExtInMsgDecodedWalletV3) GetRawMessages() []DecodedRawMessage {
	return s.RawMessages
}

// SetSubwalletID sets the value of SubwalletID.
func (s *DecodedMessageExtInMsgDecodedWalletV3) SetSubwalletID(val int64) {
	s.SubwalletID = val
}

// SetValidUntil sets the value of ValidUntil.
func (s *DecodedMessageExtInMsgDecodedWalletV3) SetValidUntil(val int64) {
	s.ValidUntil = val
}

// SetSeqno sets the value of Seqno.
func (s *DecodedMessageExtInMsgDecodedWalletV3) SetSeqno(val int64) {
	s.Seqno = val
}

// SetRawMessages sets the value of RawMessages.
func (s *DecodedMessageExtInMsgDecodedWalletV3) SetRawMessages(val []DecodedRawMessage) {
	s.RawMessages = val
}

type DecodedMessageExtInMsgDecodedWalletV4 struct {
	SubwalletID int64               `json:"subwallet_id"`
	ValidUntil  int64               `json:"valid_until"`
	Seqno       int64               `json:"seqno"`
	Op          int32               `json:"op"`
	RawMessages []DecodedRawMessage `json:"raw_messages"`
}

// GetSubwalletID returns the value of SubwalletID.
func (s *DecodedMessageExtInMsgDecodedWalletV4) GetSubwalletID() int64 {
	return s.SubwalletID
}

// GetValidUntil returns the value of ValidUntil.
func (s *DecodedMessageExtInMsgDecodedWalletV4) GetValidUntil() int64 {
	return s.ValidUntil
}

// GetSeqno returns the value of Seqno.
func (s *DecodedMessageExtInMsgDecodedWalletV4) GetSeqno() int64 {
	return s.Seqno
}

// GetOp returns the value of Op.
func (s *DecodedMessageExtInMsgDecodedWalletV4) GetOp() int32 {
	return s.Op
}

// GetRawMessages returns the value of RawMessages.
func (s *DecodedMessageExtInMsgDecodedWalletV4) GetRawMessages() []DecodedRawMessage {
	return s.RawMessages
}

// SetSubwalletID sets the value of SubwalletID.
func (s *DecodedMessageExtInMsgDecodedWalletV4) SetSubwalletID(val int64) {
	s.SubwalletID = val
}

// SetValidUntil sets the value of ValidUntil.
func (s *DecodedMessageExtInMsgDecodedWalletV4) SetValidUntil(val int64) {
	s.ValidUntil = val
}

// SetSeqno sets the value of Seqno.
func (s *DecodedMessageExtInMsgDecodedWalletV4) SetSeqno(val int64) {
	s.Seqno = val
}

// SetOp sets the value of Op.
func (s *DecodedMessageExtInMsgDecodedWalletV4) SetOp(val int32) {
	s.Op = val
}

// SetRawMessages sets the value of RawMessages.
func (s *DecodedMessageExtInMsgDecodedWalletV4) SetRawMessages(val []DecodedRawMessage) {
	s.RawMessages = val
}

// Ref: #/components/schemas/DecodedRawMessage
type DecodedRawMessage struct {
	Message DecodedRawMessageMessage `json:"message"`
	Mode    int                      `json:"mode"`
}

// GetMessage returns the value of Message.
func (s *DecodedRawMessage) GetMessage() DecodedRawMessageMessage {
	return s.Message
}

// GetMode returns the value of Mode.
func (s *DecodedRawMessage) GetMode() int {
	return s.Mode
}

// SetMessage sets the value of Message.
func (s *DecodedRawMessage) SetMessage(val DecodedRawMessageMessage) {
	s.Message = val
}

// SetMode sets the value of Mode.
func (s *DecodedRawMessage) SetMode(val int) {
	s.Mode = val
}

type DecodedRawMessageMessage struct {
	Boc           string    `json:"boc"`
	DecodedOpName OptString `json:"decoded_op_name"`
	OpCode        OptString `json:"op_code"`
	DecodedBody   jx.Raw    `json:"decoded_body"`
}

// GetBoc returns the value of Boc.
func (s *DecodedRawMessageMessage) GetBoc() string {
	return s.Boc
}

// GetDecodedOpName returns the value of DecodedOpName.
func (s *DecodedRawMessageMessage) GetDecodedOpName() OptString {
	return s.DecodedOpName
}

// GetOpCode returns the value of OpCode.
func (s *DecodedRawMessageMessage) GetOpCode() OptString {
	return s.OpCode
}

// GetDecodedBody returns the value of DecodedBody.
func (s *DecodedRawMessageMessage) GetDecodedBody() jx.Raw {
	return s.DecodedBody
}

// SetBoc sets the value of Boc.
func (s *DecodedRawMessageMessage) SetBoc(val string) {
	s.Boc = val
}

// SetDecodedOpName sets the value of DecodedOpName.
func (s *DecodedRawMessageMessage) SetDecodedOpName(val OptString) {
	s.DecodedOpName = val
}

// SetOpCode sets the value of OpCode.
func (s *DecodedRawMessageMessage) SetOpCode(val OptString) {
	s.OpCode = val
}

// SetDecodedBody sets the value of DecodedBody.
func (s *DecodedRawMessageMessage) SetDecodedBody(val jx.Raw) {
	s.DecodedBody = val
}

// Validator's participation in elections.
// Ref: #/components/schemas/DepositStakeAction
type DepositStakeAction struct {
	Amount         int64                  `json:"amount"`
	Staker         AccountAddress         `json:"staker"`
	Pool           AccountAddress         `json:"pool"`
	Implementation PoolImplementationType `json:"implementation"`
}

// GetAmount returns the value of Amount.
func (s *DepositStakeAction) GetAmount() int64 {
	return s.Amount
}

// GetStaker returns the value of Staker.
func (s *DepositStakeAction) GetStaker() AccountAddress {
	return s.Staker
}

// GetPool returns the value of Pool.
func (s *DepositStakeAction) GetPool() AccountAddress {
	return s.Pool
}

// GetImplementation returns the value of Implementation.
func (s *DepositStakeAction) GetImplementation() PoolImplementationType {
	return s.Implementation
}

// SetAmount sets the value of Amount.
func (s *DepositStakeAction) SetAmount(val int64) {
	s.Amount = val
}

// SetStaker sets the value of Staker.
func (s *DepositStakeAction) SetStaker(val AccountAddress) {
	s.Staker = val
}

// SetPool sets the value of Pool.
func (s *DepositStakeAction) SetPool(val AccountAddress) {
	s.Pool = val
}

// SetImplementation sets the value of Implementation.
func (s *DepositStakeAction) SetImplementation(val PoolImplementationType) {
	s.Implementation = val
}

// Ref: #/components/schemas/DnsExpiring
type DnsExpiring struct {
	Items []DnsExpiringItemsItem `json:"items"`
}

// GetItems returns the value of Items.
func (s *DnsExpiring) GetItems() []DnsExpiringItemsItem {
	return s.Items
}

// SetItems sets the value of Items.
func (s *DnsExpiring) SetItems(val []DnsExpiringItemsItem) {
	s.Items = val
}

type DnsExpiringItemsItem struct {
	ExpiringAt int64      `json:"expiring_at"`
	Name       string     `json:"name"`
	DNSItem    OptNftItem `json:"dns_item"`
}

// GetExpiringAt returns the value of ExpiringAt.
func (s *DnsExpiringItemsItem) GetExpiringAt() int64 {
	return s.ExpiringAt
}

// GetName returns the value of Name.
func (s *DnsExpiringItemsItem) GetName() string {
	return s.Name
}

// GetDNSItem returns the value of DNSItem.
func (s *DnsExpiringItemsItem) GetDNSItem() OptNftItem {
	return s.DNSItem
}

// SetExpiringAt sets the value of ExpiringAt.
func (s *DnsExpiringItemsItem) SetExpiringAt(val int64) {
	s.ExpiringAt = val
}

// SetName sets the value of Name.
func (s *DnsExpiringItemsItem) SetName(val string) {
	s.Name = val
}

// SetDNSItem sets the value of DNSItem.
func (s *DnsExpiringItemsItem) SetDNSItem(val OptNftItem) {
	s.DNSItem = val
}

// Ref: #/components/schemas/DnsRecord
type DnsRecord struct {
	Wallet       OptWalletDNS `json:"wallet"`
	NextResolver OptString    `json:"next_resolver"`
	Sites        []string     `json:"sites"`
	// Tonstorage bag id.
	Storage OptString `json:"storage"`
}

// GetWallet returns the value of Wallet.
func (s *DnsRecord) GetWallet() OptWalletDNS {
	return s.Wallet
}

// GetNextResolver returns the value of NextResolver.
func (s *DnsRecord) GetNextResolver() OptString {
	return s.NextResolver
}

// GetSites returns the value of Sites.
func (s *DnsRecord) GetSites() []string {
	return s.Sites
}

// GetStorage returns the value of Storage.
func (s *DnsRecord) GetStorage() OptString {
	return s.Storage
}

// SetWallet sets the value of Wallet.
func (s *DnsRecord) SetWallet(val OptWalletDNS) {
	s.Wallet = val
}

// SetNextResolver sets the value of NextResolver.
func (s *DnsRecord) SetNextResolver(val OptString) {
	s.NextResolver = val
}

// SetSites sets the value of Sites.
func (s *DnsRecord) SetSites(val []string) {
	s.Sites = val
}

// SetStorage sets the value of Storage.
func (s *DnsRecord) SetStorage(val OptString) {
	s.Storage = val
}

// Ref: #/components/schemas/DomainBid
type DomainBid struct {
	Success bool           `json:"success"`
	Value   int64          `json:"value"`
	TxTime  int64          `json:"txTime"`
	TxHash  string         `json:"txHash"`
	Bidder  AccountAddress `json:"bidder"`
}

// GetSuccess returns the value of Success.
func (s *DomainBid) GetSuccess() bool {
	return s.Success
}

// GetValue returns the value of Value.
func (s *DomainBid) GetValue() int64 {
	return s.Value
}

// GetTxTime returns the value of TxTime.
func (s *DomainBid) GetTxTime() int64 {
	return s.TxTime
}

// GetTxHash returns the value of TxHash.
func (s *DomainBid) GetTxHash() string {
	return s.TxHash
}

// GetBidder returns the value of Bidder.
func (s *DomainBid) GetBidder() AccountAddress {
	return s.Bidder
}

// SetSuccess sets the value of Success.
func (s *DomainBid) SetSuccess(val bool) {
	s.Success = val
}

// SetValue sets the value of Value.
func (s *DomainBid) SetValue(val int64) {
	s.Value = val
}

// SetTxTime sets the value of TxTime.
func (s *DomainBid) SetTxTime(val int64) {
	s.TxTime = val
}

// SetTxHash sets the value of TxHash.
func (s *DomainBid) SetTxHash(val string) {
	s.TxHash = val
}

// SetBidder sets the value of Bidder.
func (s *DomainBid) SetBidder(val AccountAddress) {
	s.Bidder = val
}

// Ref: #/components/schemas/DomainBids
type DomainBids struct {
	Data []DomainBid `json:"data"`
}

// GetData returns the value of Data.
func (s *DomainBids) GetData() []DomainBid {
	return s.Data
}

// SetData sets the value of Data.
func (s *DomainBids) SetData(val []DomainBid) {
	s.Data = val
}

// Ref: #/components/schemas/DomainInfo
type DomainInfo struct {
	Name string `json:"name"`
	// Date of expiring. optional. not all domain in ton has expiration date.
	ExpiringAt OptInt64   `json:"expiring_at"`
	Item       OptNftItem `json:"item"`
}

// GetName returns the value of Name.
func (s *DomainInfo) GetName() string {
	return s.Name
}

// GetExpiringAt returns the value of ExpiringAt.
func (s *DomainInfo) GetExpiringAt() OptInt64 {
	return s.ExpiringAt
}

// GetItem returns the value of Item.
func (s *DomainInfo) GetItem() OptNftItem {
	return s.Item
}

// SetName sets the value of Name.
func (s *DomainInfo) SetName(val string) {
	s.Name = val
}

// SetExpiringAt sets the value of ExpiringAt.
func (s *DomainInfo) SetExpiringAt(val OptInt64) {
	s.ExpiringAt = val
}

// SetItem sets the value of Item.
func (s *DomainInfo) SetItem(val OptNftItem) {
	s.Item = val
}

// Ref: #/components/schemas/DomainNames
type DomainNames struct {
	Domains []string `json:"domains"`
}

// GetDomains returns the value of Domains.
func (s *DomainNames) GetDomains() []string {
	return s.Domains
}

// SetDomains sets the value of Domains.
func (s *DomainNames) SetDomains(val []string) {
	s.Domains = val
}

// Ref: #/components/schemas/DomainRenewAction
type DomainRenewAction struct {
	Domain          string         `json:"domain"`
	ContractAddress string         `json:"contract_address"`
	Renewer         AccountAddress `json:"renewer"`
}

// GetDomain returns the value of Domain.
func (s *DomainRenewAction) GetDomain() string {
	return s.Domain
}

// GetContractAddress returns the value of ContractAddress.
func (s *DomainRenewAction) GetContractAddress() string {
	return s.ContractAddress
}

// GetRenewer returns the value of Renewer.
func (s *DomainRenewAction) GetRenewer() AccountAddress {
	return s.Renewer
}

// SetDomain sets the value of Domain.
func (s *DomainRenewAction) SetDomain(val string) {
	s.Domain = val
}

// SetContractAddress sets the value of ContractAddress.
func (s *DomainRenewAction) SetContractAddress(val string) {
	s.ContractAddress = val
}

// SetRenewer sets the value of Renewer.
func (s *DomainRenewAction) SetRenewer(val AccountAddress) {
	s.Renewer = val
}

// Ref: #/components/schemas/ElectionsDepositStakeAction
type ElectionsDepositStakeAction struct {
	Amount int64          `json:"amount"`
	Staker AccountAddress `json:"staker"`
}

// GetAmount returns the value of Amount.
func (s *ElectionsDepositStakeAction) GetAmount() int64 {
	return s.Amount
}

// GetStaker returns the value of Staker.
func (s *ElectionsDepositStakeAction) GetStaker() AccountAddress {
	return s.Staker
}

// SetAmount sets the value of Amount.
func (s *ElectionsDepositStakeAction) SetAmount(val int64) {
	s.Amount = val
}

// SetStaker sets the value of Staker.
func (s *ElectionsDepositStakeAction) SetStaker(val AccountAddress) {
	s.Staker = val
}

// Ref: #/components/schemas/ElectionsRecoverStakeAction
type ElectionsRecoverStakeAction struct {
	Amount int64          `json:"amount"`
	Staker AccountAddress `json:"staker"`
}

// GetAmount returns the value of Amount.
func (s *ElectionsRecoverStakeAction) GetAmount() int64 {
	return s.Amount
}

// GetStaker returns the value of Staker.
func (s *ElectionsRecoverStakeAction) GetStaker() AccountAddress {
	return s.Staker
}

// SetAmount sets the value of Amount.
func (s *ElectionsRecoverStakeAction) SetAmount(val int64) {
	s.Amount = val
}

// SetStaker sets the value of Staker.
func (s *ElectionsRecoverStakeAction) SetStaker(val AccountAddress) {
	s.Staker = val
}

type EmulateMessageToAccountEventReq struct {
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s *EmulateMessageToAccountEventReq) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *EmulateMessageToAccountEventReq) SetBoc(val string) {
	s.Boc = val
}

type EmulateMessageToEventReq struct {
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s *EmulateMessageToEventReq) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *EmulateMessageToEventReq) SetBoc(val string) {
	s.Boc = val
}

type EmulateMessageToTraceReq struct {
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s *EmulateMessageToTraceReq) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *EmulateMessageToTraceReq) SetBoc(val string) {
	s.Boc = val
}

type EmulateMessageToWalletReq struct {
	Boc string `json:"boc"`
	// Additional per account configuration.
	Params []EmulateMessageToWalletReqParamsItem `json:"params"`
}

// GetBoc returns the value of Boc.
func (s *EmulateMessageToWalletReq) GetBoc() string {
	return s.Boc
}

// GetParams returns the value of Params.
func (s *EmulateMessageToWalletReq) GetParams() []EmulateMessageToWalletReqParamsItem {
	return s.Params
}

// SetBoc sets the value of Boc.
func (s *EmulateMessageToWalletReq) SetBoc(val string) {
	s.Boc = val
}

// SetParams sets the value of Params.
func (s *EmulateMessageToWalletReq) SetParams(val []EmulateMessageToWalletReqParamsItem) {
	s.Params = val
}

type EmulateMessageToWalletReqParamsItem struct {
	Address string   `json:"address"`
	Balance OptInt64 `json:"balance"`
}

// GetAddress returns the value of Address.
func (s *EmulateMessageToWalletReqParamsItem) GetAddress() string {
	return s.Address
}

// GetBalance returns the value of Balance.
func (s *EmulateMessageToWalletReqParamsItem) GetBalance() OptInt64 {
	return s.Balance
}

// SetAddress sets the value of Address.
func (s *EmulateMessageToWalletReqParamsItem) SetAddress(val string) {
	s.Address = val
}

// SetBalance sets the value of Balance.
func (s *EmulateMessageToWalletReqParamsItem) SetBalance(val OptInt64) {
	s.Balance = val
}

// Ref: #/components/schemas/EncryptedComment
type EncryptedComment struct {
	EncryptionType string `json:"encryption_type"`
	CipherText     string `json:"cipher_text"`
}

// GetEncryptionType returns the value of EncryptionType.
func (s *EncryptedComment) GetEncryptionType() string {
	return s.EncryptionType
}

// GetCipherText returns the value of CipherText.
func (s *EncryptedComment) GetCipherText() string {
	return s.CipherText
}

// SetEncryptionType sets the value of EncryptionType.
func (s *EncryptedComment) SetEncryptionType(val string) {
	s.EncryptionType = val
}

// SetCipherText sets the value of CipherText.
func (s *EncryptedComment) SetCipherText(val string) {
	s.CipherText = val
}

type Error struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val string) {
	s.Error = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Event
type Event struct {
	EventID   string      `json:"event_id"`
	Timestamp int64       `json:"timestamp"`
	Actions   []Action    `json:"actions"`
	ValueFlow []ValueFlow `json:"value_flow"`
	// Scam.
	IsScam bool  `json:"is_scam"`
	Lt     int64 `json:"lt"`
	// Event is not finished yet. Transactions still happening.
	InProgress bool `json:"in_progress"`
}

// GetEventID returns the value of EventID.
func (s *Event) GetEventID() string {
	return s.EventID
}

// GetTimestamp returns the value of Timestamp.
func (s *Event) GetTimestamp() int64 {
	return s.Timestamp
}

// GetActions returns the value of Actions.
func (s *Event) GetActions() []Action {
	return s.Actions
}

// GetValueFlow returns the value of ValueFlow.
func (s *Event) GetValueFlow() []ValueFlow {
	return s.ValueFlow
}

// GetIsScam returns the value of IsScam.
func (s *Event) GetIsScam() bool {
	return s.IsScam
}

// GetLt returns the value of Lt.
func (s *Event) GetLt() int64 {
	return s.Lt
}

// GetInProgress returns the value of InProgress.
func (s *Event) GetInProgress() bool {
	return s.InProgress
}

// SetEventID sets the value of EventID.
func (s *Event) SetEventID(val string) {
	s.EventID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Event) SetTimestamp(val int64) {
	s.Timestamp = val
}

// SetActions sets the value of Actions.
func (s *Event) SetActions(val []Action) {
	s.Actions = val
}

// SetValueFlow sets the value of ValueFlow.
func (s *Event) SetValueFlow(val []ValueFlow) {
	s.ValueFlow = val
}

// SetIsScam sets the value of IsScam.
func (s *Event) SetIsScam(val bool) {
	s.IsScam = val
}

// SetLt sets the value of Lt.
func (s *Event) SetLt(val int64) {
	s.Lt = val
}

// SetInProgress sets the value of InProgress.
func (s *Event) SetInProgress(val bool) {
	s.InProgress = val
}

// Ref: #/components/schemas/FoundAccounts
type FoundAccounts struct {
	Addresses []FoundAccountsAddressesItem `json:"addresses"`
}

// GetAddresses returns the value of Addresses.
func (s *FoundAccounts) GetAddresses() []FoundAccountsAddressesItem {
	return s.Addresses
}

// SetAddresses sets the value of Addresses.
func (s *FoundAccounts) SetAddresses(val []FoundAccountsAddressesItem) {
	s.Addresses = val
}

type FoundAccountsAddressesItem struct {
	Address string `json:"address"`
	Name    string `json:"name"`
	Preview string `json:"preview"`
}

// GetAddress returns the value of Address.
func (s *FoundAccountsAddressesItem) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s *FoundAccountsAddressesItem) GetName() string {
	return s.Name
}

// GetPreview returns the value of Preview.
func (s *FoundAccountsAddressesItem) GetPreview() string {
	return s.Preview
}

// SetAddress sets the value of Address.
func (s *FoundAccountsAddressesItem) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *FoundAccountsAddressesItem) SetName(val string) {
	s.Name = val
}

// SetPreview sets the value of Preview.
func (s *FoundAccountsAddressesItem) SetPreview(val string) {
	s.Preview = val
}

// Ref: #/components/schemas/GasLimitPrices
type GasLimitPrices struct {
	SpecialGasLimit OptInt64 `json:"special_gas_limit"`
	FlatGasLimit    OptInt64 `json:"flat_gas_limit"`
	FlatGasPrice    OptInt64 `json:"flat_gas_price"`
	GasPrice        int64    `json:"gas_price"`
	GasLimit        int64    `json:"gas_limit"`
	GasCredit       int64    `json:"gas_credit"`
	BlockGasLimit   int64    `json:"block_gas_limit"`
	FreezeDueLimit  int64    `json:"freeze_due_limit"`
	DeleteDueLimit  int64    `json:"delete_due_limit"`
}

// GetSpecialGasLimit returns the value of SpecialGasLimit.
func (s *GasLimitPrices) GetSpecialGasLimit() OptInt64 {
	return s.SpecialGasLimit
}

// GetFlatGasLimit returns the value of FlatGasLimit.
func (s *GasLimitPrices) GetFlatGasLimit() OptInt64 {
	return s.FlatGasLimit
}

// GetFlatGasPrice returns the value of FlatGasPrice.
func (s *GasLimitPrices) GetFlatGasPrice() OptInt64 {
	return s.FlatGasPrice
}

// GetGasPrice returns the value of GasPrice.
func (s *GasLimitPrices) GetGasPrice() int64 {
	return s.GasPrice
}

// GetGasLimit returns the value of GasLimit.
func (s *GasLimitPrices) GetGasLimit() int64 {
	return s.GasLimit
}

// GetGasCredit returns the value of GasCredit.
func (s *GasLimitPrices) GetGasCredit() int64 {
	return s.GasCredit
}

// GetBlockGasLimit returns the value of BlockGasLimit.
func (s *GasLimitPrices) GetBlockGasLimit() int64 {
	return s.BlockGasLimit
}

// GetFreezeDueLimit returns the value of FreezeDueLimit.
func (s *GasLimitPrices) GetFreezeDueLimit() int64 {
	return s.FreezeDueLimit
}

// GetDeleteDueLimit returns the value of DeleteDueLimit.
func (s *GasLimitPrices) GetDeleteDueLimit() int64 {
	return s.DeleteDueLimit
}

// SetSpecialGasLimit sets the value of SpecialGasLimit.
func (s *GasLimitPrices) SetSpecialGasLimit(val OptInt64) {
	s.SpecialGasLimit = val
}

// SetFlatGasLimit sets the value of FlatGasLimit.
func (s *GasLimitPrices) SetFlatGasLimit(val OptInt64) {
	s.FlatGasLimit = val
}

// SetFlatGasPrice sets the value of FlatGasPrice.
func (s *GasLimitPrices) SetFlatGasPrice(val OptInt64) {
	s.FlatGasPrice = val
}

// SetGasPrice sets the value of GasPrice.
func (s *GasLimitPrices) SetGasPrice(val int64) {
	s.GasPrice = val
}

// SetGasLimit sets the value of GasLimit.
func (s *GasLimitPrices) SetGasLimit(val int64) {
	s.GasLimit = val
}

// SetGasCredit sets the value of GasCredit.
func (s *GasLimitPrices) SetGasCredit(val int64) {
	s.GasCredit = val
}

// SetBlockGasLimit sets the value of BlockGasLimit.
func (s *GasLimitPrices) SetBlockGasLimit(val int64) {
	s.BlockGasLimit = val
}

// SetFreezeDueLimit sets the value of FreezeDueLimit.
func (s *GasLimitPrices) SetFreezeDueLimit(val int64) {
	s.FreezeDueLimit = val
}

// SetDeleteDueLimit sets the value of DeleteDueLimit.
func (s *GasLimitPrices) SetDeleteDueLimit(val int64) {
	s.DeleteDueLimit = val
}

type GetAccountDiffOK struct {
	BalanceChange int64 `json:"balance_change"`
}

// GetBalanceChange returns the value of BalanceChange.
func (s *GetAccountDiffOK) GetBalanceChange() int64 {
	return s.BalanceChange
}

// SetBalanceChange sets the value of BalanceChange.
func (s *GetAccountDiffOK) SetBalanceChange(val int64) {
	s.BalanceChange = val
}

type GetAccountInfoByStateInitReq struct {
	StateInit string `json:"state_init"`
}

// GetStateInit returns the value of StateInit.
func (s *GetAccountInfoByStateInitReq) GetStateInit() string {
	return s.StateInit
}

// SetStateInit sets the value of StateInit.
func (s *GetAccountInfoByStateInitReq) SetStateInit(val string) {
	s.StateInit = val
}

type GetAccountPublicKeyOK struct {
	PublicKey string `json:"public_key"`
}

// GetPublicKey returns the value of PublicKey.
func (s *GetAccountPublicKeyOK) GetPublicKey() string {
	return s.PublicKey
}

// SetPublicKey sets the value of PublicKey.
func (s *GetAccountPublicKeyOK) SetPublicKey(val string) {
	s.PublicKey = val
}

type GetAccountsReq struct {
	AccountIds []string `json:"account_ids"`
}

// GetAccountIds returns the value of AccountIds.
func (s *GetAccountsReq) GetAccountIds() []string {
	return s.AccountIds
}

// SetAccountIds sets the value of AccountIds.
func (s *GetAccountsReq) SetAccountIds(val []string) {
	s.AccountIds = val
}

type GetAllRawShardsInfoOK struct {
	ID    BlockRaw `json:"id"`
	Proof string   `json:"proof"`
	Data  string   `json:"data"`
}

// GetID returns the value of ID.
func (s *GetAllRawShardsInfoOK) GetID() BlockRaw {
	return s.ID
}

// GetProof returns the value of Proof.
func (s *GetAllRawShardsInfoOK) GetProof() string {
	return s.Proof
}

// GetData returns the value of Data.
func (s *GetAllRawShardsInfoOK) GetData() string {
	return s.Data
}

// SetID sets the value of ID.
func (s *GetAllRawShardsInfoOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetProof sets the value of Proof.
func (s *GetAllRawShardsInfoOK) SetProof(val string) {
	s.Proof = val
}

// SetData sets the value of Data.
func (s *GetAllRawShardsInfoOK) SetData(val string) {
	s.Data = val
}

// Used to sort the result-set in ascending or descending order by lt.
type GetBlockchainAccountTransactionsSortOrder string

const (
	GetBlockchainAccountTransactionsSortOrderDesc GetBlockchainAccountTransactionsSortOrder = "desc"
	GetBlockchainAccountTransactionsSortOrderAsc  GetBlockchainAccountTransactionsSortOrder = "asc"
)

// AllValues returns all GetBlockchainAccountTransactionsSortOrder values.
func (GetBlockchainAccountTransactionsSortOrder) AllValues() []GetBlockchainAccountTransactionsSortOrder {
	return []GetBlockchainAccountTransactionsSortOrder{
		GetBlockchainAccountTransactionsSortOrderDesc,
		GetBlockchainAccountTransactionsSortOrderAsc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetBlockchainAccountTransactionsSortOrder) MarshalText() ([]byte, error) {
	switch s {
	case GetBlockchainAccountTransactionsSortOrderDesc:
		return []byte(s), nil
	case GetBlockchainAccountTransactionsSortOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetBlockchainAccountTransactionsSortOrder) UnmarshalText(data []byte) error {
	switch GetBlockchainAccountTransactionsSortOrder(data) {
	case GetBlockchainAccountTransactionsSortOrderDesc:
		*s = GetBlockchainAccountTransactionsSortOrderDesc
		return nil
	case GetBlockchainAccountTransactionsSortOrderAsc:
		*s = GetBlockchainAccountTransactionsSortOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetChartRatesOK struct {
	Points jx.Raw `json:"points"`
}

// GetPoints returns the value of Points.
func (s *GetChartRatesOK) GetPoints() jx.Raw {
	return s.Points
}

// SetPoints sets the value of Points.
func (s *GetChartRatesOK) SetPoints(val jx.Raw) {
	s.Points = val
}

type GetInscriptionOpTemplateOK struct {
	Comment     string `json:"comment"`
	Destination string `json:"destination"`
}

// GetComment returns the value of Comment.
func (s *GetInscriptionOpTemplateOK) GetComment() string {
	return s.Comment
}

// GetDestination returns the value of Destination.
func (s *GetInscriptionOpTemplateOK) GetDestination() string {
	return s.Destination
}

// SetComment sets the value of Comment.
func (s *GetInscriptionOpTemplateOK) SetComment(val string) {
	s.Comment = val
}

// SetDestination sets the value of Destination.
func (s *GetInscriptionOpTemplateOK) SetDestination(val string) {
	s.Destination = val
}

type GetInscriptionOpTemplateOperation string

const (
	GetInscriptionOpTemplateOperationTransfer GetInscriptionOpTemplateOperation = "transfer"
)

// AllValues returns all GetInscriptionOpTemplateOperation values.
func (GetInscriptionOpTemplateOperation) AllValues() []GetInscriptionOpTemplateOperation {
	return []GetInscriptionOpTemplateOperation{
		GetInscriptionOpTemplateOperationTransfer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetInscriptionOpTemplateOperation) MarshalText() ([]byte, error) {
	switch s {
	case GetInscriptionOpTemplateOperationTransfer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInscriptionOpTemplateOperation) UnmarshalText(data []byte) error {
	switch GetInscriptionOpTemplateOperation(data) {
	case GetInscriptionOpTemplateOperationTransfer:
		*s = GetInscriptionOpTemplateOperationTransfer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInscriptionOpTemplateType string

const (
	GetInscriptionOpTemplateTypeTon20  GetInscriptionOpTemplateType = "ton20"
	GetInscriptionOpTemplateTypeGram20 GetInscriptionOpTemplateType = "gram20"
)

// AllValues returns all GetInscriptionOpTemplateType values.
func (GetInscriptionOpTemplateType) AllValues() []GetInscriptionOpTemplateType {
	return []GetInscriptionOpTemplateType{
		GetInscriptionOpTemplateTypeTon20,
		GetInscriptionOpTemplateTypeGram20,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetInscriptionOpTemplateType) MarshalText() ([]byte, error) {
	switch s {
	case GetInscriptionOpTemplateTypeTon20:
		return []byte(s), nil
	case GetInscriptionOpTemplateTypeGram20:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInscriptionOpTemplateType) UnmarshalText(data []byte) error {
	switch GetInscriptionOpTemplateType(data) {
	case GetInscriptionOpTemplateTypeTon20:
		*s = GetInscriptionOpTemplateTypeTon20
		return nil
	case GetInscriptionOpTemplateTypeGram20:
		*s = GetInscriptionOpTemplateTypeGram20
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetMarketsRatesOK struct {
	Markets []MarketTonRates `json:"markets"`
}

// GetMarkets returns the value of Markets.
func (s *GetMarketsRatesOK) GetMarkets() []MarketTonRates {
	return s.Markets
}

// SetMarkets sets the value of Markets.
func (s *GetMarketsRatesOK) SetMarkets(val []MarketTonRates) {
	s.Markets = val
}

type GetNftItemsByAddressesReq struct {
	AccountIds []string `json:"account_ids"`
}

// GetAccountIds returns the value of AccountIds.
func (s *GetNftItemsByAddressesReq) GetAccountIds() []string {
	return s.AccountIds
}

// SetAccountIds sets the value of AccountIds.
func (s *GetNftItemsByAddressesReq) SetAccountIds(val []string) {
	s.AccountIds = val
}

type GetOutMsgQueueSizesOK struct {
	ExtMsgQueueSizeLimit uint32                            `json:"ext_msg_queue_size_limit"`
	Shards               []GetOutMsgQueueSizesOKShardsItem `json:"shards"`
}

// GetExtMsgQueueSizeLimit returns the value of ExtMsgQueueSizeLimit.
func (s *GetOutMsgQueueSizesOK) GetExtMsgQueueSizeLimit() uint32 {
	return s.ExtMsgQueueSizeLimit
}

// GetShards returns the value of Shards.
func (s *GetOutMsgQueueSizesOK) GetShards() []GetOutMsgQueueSizesOKShardsItem {
	return s.Shards
}

// SetExtMsgQueueSizeLimit sets the value of ExtMsgQueueSizeLimit.
func (s *GetOutMsgQueueSizesOK) SetExtMsgQueueSizeLimit(val uint32) {
	s.ExtMsgQueueSizeLimit = val
}

// SetShards sets the value of Shards.
func (s *GetOutMsgQueueSizesOK) SetShards(val []GetOutMsgQueueSizesOKShardsItem) {
	s.Shards = val
}

type GetOutMsgQueueSizesOKShardsItem struct {
	ID   BlockRaw `json:"id"`
	Size uint32   `json:"size"`
}

// GetID returns the value of ID.
func (s *GetOutMsgQueueSizesOKShardsItem) GetID() BlockRaw {
	return s.ID
}

// GetSize returns the value of Size.
func (s *GetOutMsgQueueSizesOKShardsItem) GetSize() uint32 {
	return s.Size
}

// SetID sets the value of ID.
func (s *GetOutMsgQueueSizesOKShardsItem) SetID(val BlockRaw) {
	s.ID = val
}

// SetSize sets the value of Size.
func (s *GetOutMsgQueueSizesOKShardsItem) SetSize(val uint32) {
	s.Size = val
}

type GetRatesOK struct {
	Rates GetRatesOKRates `json:"rates"`
}

// GetRates returns the value of Rates.
func (s *GetRatesOK) GetRates() GetRatesOKRates {
	return s.Rates
}

// SetRates sets the value of Rates.
func (s *GetRatesOK) SetRates(val GetRatesOKRates) {
	s.Rates = val
}

type GetRatesOKRates map[string]TokenRates

func (s *GetRatesOKRates) init() GetRatesOKRates {
	m := *s
	if m == nil {
		m = map[string]TokenRates{}
		*s = m
	}
	return m
}

type GetRawAccountStateOK struct {
	ID         BlockRaw `json:"id"`
	Shardblk   BlockRaw `json:"shardblk"`
	ShardProof string   `json:"shard_proof"`
	Proof      string   `json:"proof"`
	State      string   `json:"state"`
}

// GetID returns the value of ID.
func (s *GetRawAccountStateOK) GetID() BlockRaw {
	return s.ID
}

// GetShardblk returns the value of Shardblk.
func (s *GetRawAccountStateOK) GetShardblk() BlockRaw {
	return s.Shardblk
}

// GetShardProof returns the value of ShardProof.
func (s *GetRawAccountStateOK) GetShardProof() string {
	return s.ShardProof
}

// GetProof returns the value of Proof.
func (s *GetRawAccountStateOK) GetProof() string {
	return s.Proof
}

// GetState returns the value of State.
func (s *GetRawAccountStateOK) GetState() string {
	return s.State
}

// SetID sets the value of ID.
func (s *GetRawAccountStateOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetShardblk sets the value of Shardblk.
func (s *GetRawAccountStateOK) SetShardblk(val BlockRaw) {
	s.Shardblk = val
}

// SetShardProof sets the value of ShardProof.
func (s *GetRawAccountStateOK) SetShardProof(val string) {
	s.ShardProof = val
}

// SetProof sets the value of Proof.
func (s *GetRawAccountStateOK) SetProof(val string) {
	s.Proof = val
}

// SetState sets the value of State.
func (s *GetRawAccountStateOK) SetState(val string) {
	s.State = val
}

type GetRawBlockProofOK struct {
	Complete bool                          `json:"complete"`
	From     BlockRaw                      `json:"from"`
	To       BlockRaw                      `json:"to"`
	Steps    []GetRawBlockProofOKStepsItem `json:"steps"`
}

// GetComplete returns the value of Complete.
func (s *GetRawBlockProofOK) GetComplete() bool {
	return s.Complete
}

// GetFrom returns the value of From.
func (s *GetRawBlockProofOK) GetFrom() BlockRaw {
	return s.From
}

// GetTo returns the value of To.
func (s *GetRawBlockProofOK) GetTo() BlockRaw {
	return s.To
}

// GetSteps returns the value of Steps.
func (s *GetRawBlockProofOK) GetSteps() []GetRawBlockProofOKStepsItem {
	return s.Steps
}

// SetComplete sets the value of Complete.
func (s *GetRawBlockProofOK) SetComplete(val bool) {
	s.Complete = val
}

// SetFrom sets the value of From.
func (s *GetRawBlockProofOK) SetFrom(val BlockRaw) {
	s.From = val
}

// SetTo sets the value of To.
func (s *GetRawBlockProofOK) SetTo(val BlockRaw) {
	s.To = val
}

// SetSteps sets the value of Steps.
func (s *GetRawBlockProofOK) SetSteps(val []GetRawBlockProofOKStepsItem) {
	s.Steps = val
}

type GetRawBlockProofOKStepsItem struct {
	LiteServerBlockLinkBack    GetRawBlockProofOKStepsItemLiteServerBlockLinkBack    `json:"lite_server_block_link_back"`
	LiteServerBlockLinkForward GetRawBlockProofOKStepsItemLiteServerBlockLinkForward `json:"lite_server_block_link_forward"`
}

// GetLiteServerBlockLinkBack returns the value of LiteServerBlockLinkBack.
func (s *GetRawBlockProofOKStepsItem) GetLiteServerBlockLinkBack() GetRawBlockProofOKStepsItemLiteServerBlockLinkBack {
	return s.LiteServerBlockLinkBack
}

// GetLiteServerBlockLinkForward returns the value of LiteServerBlockLinkForward.
func (s *GetRawBlockProofOKStepsItem) GetLiteServerBlockLinkForward() GetRawBlockProofOKStepsItemLiteServerBlockLinkForward {
	return s.LiteServerBlockLinkForward
}

// SetLiteServerBlockLinkBack sets the value of LiteServerBlockLinkBack.
func (s *GetRawBlockProofOKStepsItem) SetLiteServerBlockLinkBack(val GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) {
	s.LiteServerBlockLinkBack = val
}

// SetLiteServerBlockLinkForward sets the value of LiteServerBlockLinkForward.
func (s *GetRawBlockProofOKStepsItem) SetLiteServerBlockLinkForward(val GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) {
	s.LiteServerBlockLinkForward = val
}

type GetRawBlockProofOKStepsItemLiteServerBlockLinkBack struct {
	ToKeyBlock bool     `json:"to_key_block"`
	From       BlockRaw `json:"from"`
	To         BlockRaw `json:"to"`
	DestProof  string   `json:"dest_proof"`
	Proof      string   `json:"proof"`
	StateProof string   `json:"state_proof"`
}

// GetToKeyBlock returns the value of ToKeyBlock.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) GetToKeyBlock() bool {
	return s.ToKeyBlock
}

// GetFrom returns the value of From.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) GetFrom() BlockRaw {
	return s.From
}

// GetTo returns the value of To.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) GetTo() BlockRaw {
	return s.To
}

// GetDestProof returns the value of DestProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) GetDestProof() string {
	return s.DestProof
}

// GetProof returns the value of Proof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) GetProof() string {
	return s.Proof
}

// GetStateProof returns the value of StateProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) GetStateProof() string {
	return s.StateProof
}

// SetToKeyBlock sets the value of ToKeyBlock.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) SetToKeyBlock(val bool) {
	s.ToKeyBlock = val
}

// SetFrom sets the value of From.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) SetFrom(val BlockRaw) {
	s.From = val
}

// SetTo sets the value of To.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) SetTo(val BlockRaw) {
	s.To = val
}

// SetDestProof sets the value of DestProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) SetDestProof(val string) {
	s.DestProof = val
}

// SetProof sets the value of Proof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) SetProof(val string) {
	s.Proof = val
}

// SetStateProof sets the value of StateProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkBack) SetStateProof(val string) {
	s.StateProof = val
}

type GetRawBlockProofOKStepsItemLiteServerBlockLinkForward struct {
	ToKeyBlock  bool                                                            `json:"to_key_block"`
	From        BlockRaw                                                        `json:"from"`
	To          BlockRaw                                                        `json:"to"`
	DestProof   string                                                          `json:"dest_proof"`
	ConfigProof string                                                          `json:"config_proof"`
	Signatures  GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures `json:"signatures"`
}

// GetToKeyBlock returns the value of ToKeyBlock.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) GetToKeyBlock() bool {
	return s.ToKeyBlock
}

// GetFrom returns the value of From.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) GetFrom() BlockRaw {
	return s.From
}

// GetTo returns the value of To.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) GetTo() BlockRaw {
	return s.To
}

// GetDestProof returns the value of DestProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) GetDestProof() string {
	return s.DestProof
}

// GetConfigProof returns the value of ConfigProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) GetConfigProof() string {
	return s.ConfigProof
}

// GetSignatures returns the value of Signatures.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) GetSignatures() GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures {
	return s.Signatures
}

// SetToKeyBlock sets the value of ToKeyBlock.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) SetToKeyBlock(val bool) {
	s.ToKeyBlock = val
}

// SetFrom sets the value of From.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) SetFrom(val BlockRaw) {
	s.From = val
}

// SetTo sets the value of To.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) SetTo(val BlockRaw) {
	s.To = val
}

// SetDestProof sets the value of DestProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) SetDestProof(val string) {
	s.DestProof = val
}

// SetConfigProof sets the value of ConfigProof.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) SetConfigProof(val string) {
	s.ConfigProof = val
}

// SetSignatures sets the value of Signatures.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForward) SetSignatures(val GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures) {
	s.Signatures = val
}

type GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures struct {
	ValidatorSetHash int64                                                                           `json:"validator_set_hash"`
	CatchainSeqno    int32                                                                           `json:"catchain_seqno"`
	Signatures       []GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem `json:"signatures"`
}

// GetValidatorSetHash returns the value of ValidatorSetHash.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures) GetValidatorSetHash() int64 {
	return s.ValidatorSetHash
}

// GetCatchainSeqno returns the value of CatchainSeqno.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures) GetCatchainSeqno() int32 {
	return s.CatchainSeqno
}

// GetSignatures returns the value of Signatures.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures) GetSignatures() []GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem {
	return s.Signatures
}

// SetValidatorSetHash sets the value of ValidatorSetHash.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures) SetValidatorSetHash(val int64) {
	s.ValidatorSetHash = val
}

// SetCatchainSeqno sets the value of CatchainSeqno.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures) SetCatchainSeqno(val int32) {
	s.CatchainSeqno = val
}

// SetSignatures sets the value of Signatures.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignatures) SetSignatures(val []GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem) {
	s.Signatures = val
}

type GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem struct {
	NodeIDShort string `json:"node_id_short"`
	Signature   string `json:"signature"`
}

// GetNodeIDShort returns the value of NodeIDShort.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem) GetNodeIDShort() string {
	return s.NodeIDShort
}

// GetSignature returns the value of Signature.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem) GetSignature() string {
	return s.Signature
}

// SetNodeIDShort sets the value of NodeIDShort.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem) SetNodeIDShort(val string) {
	s.NodeIDShort = val
}

// SetSignature sets the value of Signature.
func (s *GetRawBlockProofOKStepsItemLiteServerBlockLinkForwardSignaturesSignaturesItem) SetSignature(val string) {
	s.Signature = val
}

type GetRawBlockchainBlockHeaderOK struct {
	ID          BlockRaw `json:"id"`
	Mode        int32    `json:"mode"`
	HeaderProof string   `json:"header_proof"`
}

// GetID returns the value of ID.
func (s *GetRawBlockchainBlockHeaderOK) GetID() BlockRaw {
	return s.ID
}

// GetMode returns the value of Mode.
func (s *GetRawBlockchainBlockHeaderOK) GetMode() int32 {
	return s.Mode
}

// GetHeaderProof returns the value of HeaderProof.
func (s *GetRawBlockchainBlockHeaderOK) GetHeaderProof() string {
	return s.HeaderProof
}

// SetID sets the value of ID.
func (s *GetRawBlockchainBlockHeaderOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetMode sets the value of Mode.
func (s *GetRawBlockchainBlockHeaderOK) SetMode(val int32) {
	s.Mode = val
}

// SetHeaderProof sets the value of HeaderProof.
func (s *GetRawBlockchainBlockHeaderOK) SetHeaderProof(val string) {
	s.HeaderProof = val
}

type GetRawBlockchainBlockOK struct {
	ID   BlockRaw `json:"id"`
	Data string   `json:"data"`
}

// GetID returns the value of ID.
func (s *GetRawBlockchainBlockOK) GetID() BlockRaw {
	return s.ID
}

// GetData returns the value of Data.
func (s *GetRawBlockchainBlockOK) GetData() string {
	return s.Data
}

// SetID sets the value of ID.
func (s *GetRawBlockchainBlockOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetData sets the value of Data.
func (s *GetRawBlockchainBlockOK) SetData(val string) {
	s.Data = val
}

type GetRawBlockchainBlockStateOK struct {
	ID       BlockRaw `json:"id"`
	RootHash string   `json:"root_hash"`
	FileHash string   `json:"file_hash"`
	Data     string   `json:"data"`
}

// GetID returns the value of ID.
func (s *GetRawBlockchainBlockStateOK) GetID() BlockRaw {
	return s.ID
}

// GetRootHash returns the value of RootHash.
func (s *GetRawBlockchainBlockStateOK) GetRootHash() string {
	return s.RootHash
}

// GetFileHash returns the value of FileHash.
func (s *GetRawBlockchainBlockStateOK) GetFileHash() string {
	return s.FileHash
}

// GetData returns the value of Data.
func (s *GetRawBlockchainBlockStateOK) GetData() string {
	return s.Data
}

// SetID sets the value of ID.
func (s *GetRawBlockchainBlockStateOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetRootHash sets the value of RootHash.
func (s *GetRawBlockchainBlockStateOK) SetRootHash(val string) {
	s.RootHash = val
}

// SetFileHash sets the value of FileHash.
func (s *GetRawBlockchainBlockStateOK) SetFileHash(val string) {
	s.FileHash = val
}

// SetData sets the value of Data.
func (s *GetRawBlockchainBlockStateOK) SetData(val string) {
	s.Data = val
}

type GetRawConfigOK struct {
	Mode        int32    `json:"mode"`
	ID          BlockRaw `json:"id"`
	StateProof  string   `json:"state_proof"`
	ConfigProof string   `json:"config_proof"`
}

// GetMode returns the value of Mode.
func (s *GetRawConfigOK) GetMode() int32 {
	return s.Mode
}

// GetID returns the value of ID.
func (s *GetRawConfigOK) GetID() BlockRaw {
	return s.ID
}

// GetStateProof returns the value of StateProof.
func (s *GetRawConfigOK) GetStateProof() string {
	return s.StateProof
}

// GetConfigProof returns the value of ConfigProof.
func (s *GetRawConfigOK) GetConfigProof() string {
	return s.ConfigProof
}

// SetMode sets the value of Mode.
func (s *GetRawConfigOK) SetMode(val int32) {
	s.Mode = val
}

// SetID sets the value of ID.
func (s *GetRawConfigOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetStateProof sets the value of StateProof.
func (s *GetRawConfigOK) SetStateProof(val string) {
	s.StateProof = val
}

// SetConfigProof sets the value of ConfigProof.
func (s *GetRawConfigOK) SetConfigProof(val string) {
	s.ConfigProof = val
}

type GetRawListBlockTransactionsOK struct {
	ID         BlockRaw                               `json:"id"`
	ReqCount   int32                                  `json:"req_count"`
	Incomplete bool                                   `json:"incomplete"`
	Ids        []GetRawListBlockTransactionsOKIdsItem `json:"ids"`
	Proof      string                                 `json:"proof"`
}

// GetID returns the value of ID.
func (s *GetRawListBlockTransactionsOK) GetID() BlockRaw {
	return s.ID
}

// GetReqCount returns the value of ReqCount.
func (s *GetRawListBlockTransactionsOK) GetReqCount() int32 {
	return s.ReqCount
}

// GetIncomplete returns the value of Incomplete.
func (s *GetRawListBlockTransactionsOK) GetIncomplete() bool {
	return s.Incomplete
}

// GetIds returns the value of Ids.
func (s *GetRawListBlockTransactionsOK) GetIds() []GetRawListBlockTransactionsOKIdsItem {
	return s.Ids
}

// GetProof returns the value of Proof.
func (s *GetRawListBlockTransactionsOK) GetProof() string {
	return s.Proof
}

// SetID sets the value of ID.
func (s *GetRawListBlockTransactionsOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetReqCount sets the value of ReqCount.
func (s *GetRawListBlockTransactionsOK) SetReqCount(val int32) {
	s.ReqCount = val
}

// SetIncomplete sets the value of Incomplete.
func (s *GetRawListBlockTransactionsOK) SetIncomplete(val bool) {
	s.Incomplete = val
}

// SetIds sets the value of Ids.
func (s *GetRawListBlockTransactionsOK) SetIds(val []GetRawListBlockTransactionsOKIdsItem) {
	s.Ids = val
}

// SetProof sets the value of Proof.
func (s *GetRawListBlockTransactionsOK) SetProof(val string) {
	s.Proof = val
}

type GetRawListBlockTransactionsOKIdsItem struct {
	Mode    int32     `json:"mode"`
	Account OptString `json:"account"`
	Lt      OptInt64  `json:"lt"`
	Hash    OptString `json:"hash"`
}

// GetMode returns the value of Mode.
func (s *GetRawListBlockTransactionsOKIdsItem) GetMode() int32 {
	return s.Mode
}

// GetAccount returns the value of Account.
func (s *GetRawListBlockTransactionsOKIdsItem) GetAccount() OptString {
	return s.Account
}

// GetLt returns the value of Lt.
func (s *GetRawListBlockTransactionsOKIdsItem) GetLt() OptInt64 {
	return s.Lt
}

// GetHash returns the value of Hash.
func (s *GetRawListBlockTransactionsOKIdsItem) GetHash() OptString {
	return s.Hash
}

// SetMode sets the value of Mode.
func (s *GetRawListBlockTransactionsOKIdsItem) SetMode(val int32) {
	s.Mode = val
}

// SetAccount sets the value of Account.
func (s *GetRawListBlockTransactionsOKIdsItem) SetAccount(val OptString) {
	s.Account = val
}

// SetLt sets the value of Lt.
func (s *GetRawListBlockTransactionsOKIdsItem) SetLt(val OptInt64) {
	s.Lt = val
}

// SetHash sets the value of Hash.
func (s *GetRawListBlockTransactionsOKIdsItem) SetHash(val OptString) {
	s.Hash = val
}

type GetRawMasterchainInfoExtOK struct {
	Mode          int32        `json:"mode"`
	Version       int32        `json:"version"`
	Capabilities  int64        `json:"capabilities"`
	Last          BlockRaw     `json:"last"`
	LastUtime     int32        `json:"last_utime"`
	Now           int32        `json:"now"`
	StateRootHash string       `json:"state_root_hash"`
	Init          InitStateRaw `json:"init"`
}

// GetMode returns the value of Mode.
func (s *GetRawMasterchainInfoExtOK) GetMode() int32 {
	return s.Mode
}

// GetVersion returns the value of Version.
func (s *GetRawMasterchainInfoExtOK) GetVersion() int32 {
	return s.Version
}

// GetCapabilities returns the value of Capabilities.
func (s *GetRawMasterchainInfoExtOK) GetCapabilities() int64 {
	return s.Capabilities
}

// GetLast returns the value of Last.
func (s *GetRawMasterchainInfoExtOK) GetLast() BlockRaw {
	return s.Last
}

// GetLastUtime returns the value of LastUtime.
func (s *GetRawMasterchainInfoExtOK) GetLastUtime() int32 {
	return s.LastUtime
}

// GetNow returns the value of Now.
func (s *GetRawMasterchainInfoExtOK) GetNow() int32 {
	return s.Now
}

// GetStateRootHash returns the value of StateRootHash.
func (s *GetRawMasterchainInfoExtOK) GetStateRootHash() string {
	return s.StateRootHash
}

// GetInit returns the value of Init.
func (s *GetRawMasterchainInfoExtOK) GetInit() InitStateRaw {
	return s.Init
}

// SetMode sets the value of Mode.
func (s *GetRawMasterchainInfoExtOK) SetMode(val int32) {
	s.Mode = val
}

// SetVersion sets the value of Version.
func (s *GetRawMasterchainInfoExtOK) SetVersion(val int32) {
	s.Version = val
}

// SetCapabilities sets the value of Capabilities.
func (s *GetRawMasterchainInfoExtOK) SetCapabilities(val int64) {
	s.Capabilities = val
}

// SetLast sets the value of Last.
func (s *GetRawMasterchainInfoExtOK) SetLast(val BlockRaw) {
	s.Last = val
}

// SetLastUtime sets the value of LastUtime.
func (s *GetRawMasterchainInfoExtOK) SetLastUtime(val int32) {
	s.LastUtime = val
}

// SetNow sets the value of Now.
func (s *GetRawMasterchainInfoExtOK) SetNow(val int32) {
	s.Now = val
}

// SetStateRootHash sets the value of StateRootHash.
func (s *GetRawMasterchainInfoExtOK) SetStateRootHash(val string) {
	s.StateRootHash = val
}

// SetInit sets the value of Init.
func (s *GetRawMasterchainInfoExtOK) SetInit(val InitStateRaw) {
	s.Init = val
}

type GetRawMasterchainInfoOK struct {
	Last          BlockRaw     `json:"last"`
	StateRootHash string       `json:"state_root_hash"`
	Init          InitStateRaw `json:"init"`
}

// GetLast returns the value of Last.
func (s *GetRawMasterchainInfoOK) GetLast() BlockRaw {
	return s.Last
}

// GetStateRootHash returns the value of StateRootHash.
func (s *GetRawMasterchainInfoOK) GetStateRootHash() string {
	return s.StateRootHash
}

// GetInit returns the value of Init.
func (s *GetRawMasterchainInfoOK) GetInit() InitStateRaw {
	return s.Init
}

// SetLast sets the value of Last.
func (s *GetRawMasterchainInfoOK) SetLast(val BlockRaw) {
	s.Last = val
}

// SetStateRootHash sets the value of StateRootHash.
func (s *GetRawMasterchainInfoOK) SetStateRootHash(val string) {
	s.StateRootHash = val
}

// SetInit sets the value of Init.
func (s *GetRawMasterchainInfoOK) SetInit(val InitStateRaw) {
	s.Init = val
}

type GetRawShardBlockProofOK struct {
	MasterchainID BlockRaw                           `json:"masterchain_id"`
	Links         []GetRawShardBlockProofOKLinksItem `json:"links"`
}

// GetMasterchainID returns the value of MasterchainID.
func (s *GetRawShardBlockProofOK) GetMasterchainID() BlockRaw {
	return s.MasterchainID
}

// GetLinks returns the value of Links.
func (s *GetRawShardBlockProofOK) GetLinks() []GetRawShardBlockProofOKLinksItem {
	return s.Links
}

// SetMasterchainID sets the value of MasterchainID.
func (s *GetRawShardBlockProofOK) SetMasterchainID(val BlockRaw) {
	s.MasterchainID = val
}

// SetLinks sets the value of Links.
func (s *GetRawShardBlockProofOK) SetLinks(val []GetRawShardBlockProofOKLinksItem) {
	s.Links = val
}

type GetRawShardBlockProofOKLinksItem struct {
	ID    BlockRaw `json:"id"`
	Proof string   `json:"proof"`
}

// GetID returns the value of ID.
func (s *GetRawShardBlockProofOKLinksItem) GetID() BlockRaw {
	return s.ID
}

// GetProof returns the value of Proof.
func (s *GetRawShardBlockProofOKLinksItem) GetProof() string {
	return s.Proof
}

// SetID sets the value of ID.
func (s *GetRawShardBlockProofOKLinksItem) SetID(val BlockRaw) {
	s.ID = val
}

// SetProof sets the value of Proof.
func (s *GetRawShardBlockProofOKLinksItem) SetProof(val string) {
	s.Proof = val
}

type GetRawShardInfoOK struct {
	ID         BlockRaw `json:"id"`
	Shardblk   BlockRaw `json:"shardblk"`
	ShardProof string   `json:"shard_proof"`
	ShardDescr string   `json:"shard_descr"`
}

// GetID returns the value of ID.
func (s *GetRawShardInfoOK) GetID() BlockRaw {
	return s.ID
}

// GetShardblk returns the value of Shardblk.
func (s *GetRawShardInfoOK) GetShardblk() BlockRaw {
	return s.Shardblk
}

// GetShardProof returns the value of ShardProof.
func (s *GetRawShardInfoOK) GetShardProof() string {
	return s.ShardProof
}

// GetShardDescr returns the value of ShardDescr.
func (s *GetRawShardInfoOK) GetShardDescr() string {
	return s.ShardDescr
}

// SetID sets the value of ID.
func (s *GetRawShardInfoOK) SetID(val BlockRaw) {
	s.ID = val
}

// SetShardblk sets the value of Shardblk.
func (s *GetRawShardInfoOK) SetShardblk(val BlockRaw) {
	s.Shardblk = val
}

// SetShardProof sets the value of ShardProof.
func (s *GetRawShardInfoOK) SetShardProof(val string) {
	s.ShardProof = val
}

// SetShardDescr sets the value of ShardDescr.
func (s *GetRawShardInfoOK) SetShardDescr(val string) {
	s.ShardDescr = val
}

type GetRawTimeOK struct {
	Time int32 `json:"time"`
}

// GetTime returns the value of Time.
func (s *GetRawTimeOK) GetTime() int32 {
	return s.Time
}

// SetTime sets the value of Time.
func (s *GetRawTimeOK) SetTime(val int32) {
	s.Time = val
}

type GetRawTransactionsOK struct {
	Ids          []BlockRaw `json:"ids"`
	Transactions string     `json:"transactions"`
}

// GetIds returns the value of Ids.
func (s *GetRawTransactionsOK) GetIds() []BlockRaw {
	return s.Ids
}

// GetTransactions returns the value of Transactions.
func (s *GetRawTransactionsOK) GetTransactions() string {
	return s.Transactions
}

// SetIds sets the value of Ids.
func (s *GetRawTransactionsOK) SetIds(val []BlockRaw) {
	s.Ids = val
}

// SetTransactions sets the value of Transactions.
func (s *GetRawTransactionsOK) SetTransactions(val string) {
	s.Transactions = val
}

type GetStakingPoolHistoryOK struct {
	Apy []ApyHistory `json:"apy"`
}

// GetApy returns the value of Apy.
func (s *GetStakingPoolHistoryOK) GetApy() []ApyHistory {
	return s.Apy
}

// SetApy sets the value of Apy.
func (s *GetStakingPoolHistoryOK) SetApy(val []ApyHistory) {
	s.Apy = val
}

type GetStakingPoolInfoOK struct {
	Implementation PoolImplementation `json:"implementation"`
	Pool           PoolInfo           `json:"pool"`
}

// GetImplementation returns the value of Implementation.
func (s *GetStakingPoolInfoOK) GetImplementation() PoolImplementation {
	return s.Implementation
}

// GetPool returns the value of Pool.
func (s *GetStakingPoolInfoOK) GetPool() PoolInfo {
	return s.Pool
}

// SetImplementation sets the value of Implementation.
func (s *GetStakingPoolInfoOK) SetImplementation(val PoolImplementation) {
	s.Implementation = val
}

// SetPool sets the value of Pool.
func (s *GetStakingPoolInfoOK) SetPool(val PoolInfo) {
	s.Pool = val
}

type GetStakingPoolsOK struct {
	Pools           []PoolInfo                       `json:"pools"`
	Implementations GetStakingPoolsOKImplementations `json:"implementations"`
}

// GetPools returns the value of Pools.
func (s *GetStakingPoolsOK) GetPools() []PoolInfo {
	return s.Pools
}

// GetImplementations returns the value of Implementations.
func (s *GetStakingPoolsOK) GetImplementations() GetStakingPoolsOKImplementations {
	return s.Implementations
}

// SetPools sets the value of Pools.
func (s *GetStakingPoolsOK) SetPools(val []PoolInfo) {
	s.Pools = val
}

// SetImplementations sets the value of Implementations.
func (s *GetStakingPoolsOK) SetImplementations(val GetStakingPoolsOKImplementations) {
	s.Implementations = val
}

type GetStakingPoolsOKImplementations map[string]PoolImplementation

func (s *GetStakingPoolsOKImplementations) init() GetStakingPoolsOKImplementations {
	m := *s
	if m == nil {
		m = map[string]PoolImplementation{}
		*s = m
	}
	return m
}

type GetStorageProvidersOK struct {
	Providers []StorageProvider `json:"providers"`
}

// GetProviders returns the value of Providers.
func (s *GetStorageProvidersOK) GetProviders() []StorageProvider {
	return s.Providers
}

// SetProviders sets the value of Providers.
func (s *GetStorageProvidersOK) SetProviders(val []StorageProvider) {
	s.Providers = val
}

type GetTonConnectPayloadOK struct {
	Payload string `json:"payload"`
}

// GetPayload returns the value of Payload.
func (s *GetTonConnectPayloadOK) GetPayload() string {
	return s.Payload
}

// SetPayload sets the value of Payload.
func (s *GetTonConnectPayloadOK) SetPayload(val string) {
	s.Payload = val
}

type GetWalletBackupOK struct {
	Dump string `json:"dump"`
}

// GetDump returns the value of Dump.
func (s *GetWalletBackupOK) GetDump() string {
	return s.Dump
}

// SetDump sets the value of Dump.
func (s *GetWalletBackupOK) SetDump(val string) {
	s.Dump = val
}

// Ref: #/components/schemas/ImagePreview
type ImagePreview struct {
	Resolution string `json:"resolution"`
	URL        string `json:"url"`
}

// GetResolution returns the value of Resolution.
func (s *ImagePreview) GetResolution() string {
	return s.Resolution
}

// GetURL returns the value of URL.
func (s *ImagePreview) GetURL() string {
	return s.URL
}

// SetResolution sets the value of Resolution.
func (s *ImagePreview) SetResolution(val string) {
	s.Resolution = val
}

// SetURL sets the value of URL.
func (s *ImagePreview) SetURL(val string) {
	s.URL = val
}

// Ref: #/components/schemas/InitStateRaw
type InitStateRaw struct {
	Workchain int32  `json:"workchain"`
	RootHash  string `json:"root_hash"`
	FileHash  string `json:"file_hash"`
}

// GetWorkchain returns the value of Workchain.
func (s *InitStateRaw) GetWorkchain() int32 {
	return s.Workchain
}

// GetRootHash returns the value of RootHash.
func (s *InitStateRaw) GetRootHash() string {
	return s.RootHash
}

// GetFileHash returns the value of FileHash.
func (s *InitStateRaw) GetFileHash() string {
	return s.FileHash
}

// SetWorkchain sets the value of Workchain.
func (s *InitStateRaw) SetWorkchain(val int32) {
	s.Workchain = val
}

// SetRootHash sets the value of RootHash.
func (s *InitStateRaw) SetRootHash(val string) {
	s.RootHash = val
}

// SetFileHash sets the value of FileHash.
func (s *InitStateRaw) SetFileHash(val string) {
	s.FileHash = val
}

// Ref: #/components/schemas/InscriptionBalance
type InscriptionBalance struct {
	Type     InscriptionBalanceType `json:"type"`
	Ticker   string                 `json:"ticker"`
	Balance  string                 `json:"balance"`
	Decimals int                    `json:"decimals"`
}

// GetType returns the value of Type.
func (s *InscriptionBalance) GetType() InscriptionBalanceType {
	return s.Type
}

// GetTicker returns the value of Ticker.
func (s *InscriptionBalance) GetTicker() string {
	return s.Ticker
}

// GetBalance returns the value of Balance.
func (s *InscriptionBalance) GetBalance() string {
	return s.Balance
}

// GetDecimals returns the value of Decimals.
func (s *InscriptionBalance) GetDecimals() int {
	return s.Decimals
}

// SetType sets the value of Type.
func (s *InscriptionBalance) SetType(val InscriptionBalanceType) {
	s.Type = val
}

// SetTicker sets the value of Ticker.
func (s *InscriptionBalance) SetTicker(val string) {
	s.Ticker = val
}

// SetBalance sets the value of Balance.
func (s *InscriptionBalance) SetBalance(val string) {
	s.Balance = val
}

// SetDecimals sets the value of Decimals.
func (s *InscriptionBalance) SetDecimals(val int) {
	s.Decimals = val
}

type InscriptionBalanceType string

const (
	InscriptionBalanceTypeTon20  InscriptionBalanceType = "ton20"
	InscriptionBalanceTypeGram20 InscriptionBalanceType = "gram20"
)

// AllValues returns all InscriptionBalanceType values.
func (InscriptionBalanceType) AllValues() []InscriptionBalanceType {
	return []InscriptionBalanceType{
		InscriptionBalanceTypeTon20,
		InscriptionBalanceTypeGram20,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InscriptionBalanceType) MarshalText() ([]byte, error) {
	switch s {
	case InscriptionBalanceTypeTon20:
		return []byte(s), nil
	case InscriptionBalanceTypeGram20:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InscriptionBalanceType) UnmarshalText(data []byte) error {
	switch InscriptionBalanceType(data) {
	case InscriptionBalanceTypeTon20:
		*s = InscriptionBalanceTypeTon20
		return nil
	case InscriptionBalanceTypeGram20:
		*s = InscriptionBalanceTypeGram20
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/InscriptionBalances
type InscriptionBalances struct {
	Inscriptions []InscriptionBalance `json:"inscriptions"`
}

// GetInscriptions returns the value of Inscriptions.
func (s *InscriptionBalances) GetInscriptions() []InscriptionBalance {
	return s.Inscriptions
}

// SetInscriptions sets the value of Inscriptions.
func (s *InscriptionBalances) SetInscriptions(val []InscriptionBalance) {
	s.Inscriptions = val
}

// Ref: #/components/schemas/InscriptionMintAction
type InscriptionMintAction struct {
	Recipient AccountAddress `json:"recipient"`
	// Amount in minimal particles.
	Amount   string                    `json:"amount"`
	Type     InscriptionMintActionType `json:"type"`
	Ticker   string                    `json:"ticker"`
	Decimals int                       `json:"decimals"`
}

// GetRecipient returns the value of Recipient.
func (s *InscriptionMintAction) GetRecipient() AccountAddress {
	return s.Recipient
}

// GetAmount returns the value of Amount.
func (s *InscriptionMintAction) GetAmount() string {
	return s.Amount
}

// GetType returns the value of Type.
func (s *InscriptionMintAction) GetType() InscriptionMintActionType {
	return s.Type
}

// GetTicker returns the value of Ticker.
func (s *InscriptionMintAction) GetTicker() string {
	return s.Ticker
}

// GetDecimals returns the value of Decimals.
func (s *InscriptionMintAction) GetDecimals() int {
	return s.Decimals
}

// SetRecipient sets the value of Recipient.
func (s *InscriptionMintAction) SetRecipient(val AccountAddress) {
	s.Recipient = val
}

// SetAmount sets the value of Amount.
func (s *InscriptionMintAction) SetAmount(val string) {
	s.Amount = val
}

// SetType sets the value of Type.
func (s *InscriptionMintAction) SetType(val InscriptionMintActionType) {
	s.Type = val
}

// SetTicker sets the value of Ticker.
func (s *InscriptionMintAction) SetTicker(val string) {
	s.Ticker = val
}

// SetDecimals sets the value of Decimals.
func (s *InscriptionMintAction) SetDecimals(val int) {
	s.Decimals = val
}

type InscriptionMintActionType string

const (
	InscriptionMintActionTypeTon20  InscriptionMintActionType = "ton20"
	InscriptionMintActionTypeGram20 InscriptionMintActionType = "gram20"
)

// AllValues returns all InscriptionMintActionType values.
func (InscriptionMintActionType) AllValues() []InscriptionMintActionType {
	return []InscriptionMintActionType{
		InscriptionMintActionTypeTon20,
		InscriptionMintActionTypeGram20,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InscriptionMintActionType) MarshalText() ([]byte, error) {
	switch s {
	case InscriptionMintActionTypeTon20:
		return []byte(s), nil
	case InscriptionMintActionTypeGram20:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InscriptionMintActionType) UnmarshalText(data []byte) error {
	switch InscriptionMintActionType(data) {
	case InscriptionMintActionTypeTon20:
		*s = InscriptionMintActionTypeTon20
		return nil
	case InscriptionMintActionTypeGram20:
		*s = InscriptionMintActionTypeGram20
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/InscriptionTransferAction
type InscriptionTransferAction struct {
	Sender    AccountAddress `json:"sender"`
	Recipient AccountAddress `json:"recipient"`
	// Amount in minimal particles.
	Amount   string                        `json:"amount"`
	Comment  OptString                     `json:"comment"`
	Type     InscriptionTransferActionType `json:"type"`
	Ticker   string                        `json:"ticker"`
	Decimals int                           `json:"decimals"`
}

// GetSender returns the value of Sender.
func (s *InscriptionTransferAction) GetSender() AccountAddress {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s *InscriptionTransferAction) GetRecipient() AccountAddress {
	return s.Recipient
}

// GetAmount returns the value of Amount.
func (s *InscriptionTransferAction) GetAmount() string {
	return s.Amount
}

// GetComment returns the value of Comment.
func (s *InscriptionTransferAction) GetComment() OptString {
	return s.Comment
}

// GetType returns the value of Type.
func (s *InscriptionTransferAction) GetType() InscriptionTransferActionType {
	return s.Type
}

// GetTicker returns the value of Ticker.
func (s *InscriptionTransferAction) GetTicker() string {
	return s.Ticker
}

// GetDecimals returns the value of Decimals.
func (s *InscriptionTransferAction) GetDecimals() int {
	return s.Decimals
}

// SetSender sets the value of Sender.
func (s *InscriptionTransferAction) SetSender(val AccountAddress) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *InscriptionTransferAction) SetRecipient(val AccountAddress) {
	s.Recipient = val
}

// SetAmount sets the value of Amount.
func (s *InscriptionTransferAction) SetAmount(val string) {
	s.Amount = val
}

// SetComment sets the value of Comment.
func (s *InscriptionTransferAction) SetComment(val OptString) {
	s.Comment = val
}

// SetType sets the value of Type.
func (s *InscriptionTransferAction) SetType(val InscriptionTransferActionType) {
	s.Type = val
}

// SetTicker sets the value of Ticker.
func (s *InscriptionTransferAction) SetTicker(val string) {
	s.Ticker = val
}

// SetDecimals sets the value of Decimals.
func (s *InscriptionTransferAction) SetDecimals(val int) {
	s.Decimals = val
}

type InscriptionTransferActionType string

const (
	InscriptionTransferActionTypeTon20  InscriptionTransferActionType = "ton20"
	InscriptionTransferActionTypeGram20 InscriptionTransferActionType = "gram20"
)

// AllValues returns all InscriptionTransferActionType values.
func (InscriptionTransferActionType) AllValues() []InscriptionTransferActionType {
	return []InscriptionTransferActionType{
		InscriptionTransferActionTypeTon20,
		InscriptionTransferActionTypeGram20,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InscriptionTransferActionType) MarshalText() ([]byte, error) {
	switch s {
	case InscriptionTransferActionTypeTon20:
		return []byte(s), nil
	case InscriptionTransferActionTypeGram20:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InscriptionTransferActionType) UnmarshalText(data []byte) error {
	switch InscriptionTransferActionType(data) {
	case InscriptionTransferActionTypeTon20:
		*s = InscriptionTransferActionTypeTon20
		return nil
	case InscriptionTransferActionTypeGram20:
		*s = InscriptionTransferActionTypeGram20
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/JettonBalance
type JettonBalance struct {
	Balance       string               `json:"balance"`
	Price         OptTokenRates        `json:"price"`
	WalletAddress AccountAddress       `json:"wallet_address"`
	Jetton        JettonPreview        `json:"jetton"`
	Lock          OptJettonBalanceLock `json:"lock"`
}

// GetBalance returns the value of Balance.
func (s *JettonBalance) GetBalance() string {
	return s.Balance
}

// GetPrice returns the value of Price.
func (s *JettonBalance) GetPrice() OptTokenRates {
	return s.Price
}

// GetWalletAddress returns the value of WalletAddress.
func (s *JettonBalance) GetWalletAddress() AccountAddress {
	return s.WalletAddress
}

// GetJetton returns the value of Jetton.
func (s *JettonBalance) GetJetton() JettonPreview {
	return s.Jetton
}

// GetLock returns the value of Lock.
func (s *JettonBalance) GetLock() OptJettonBalanceLock {
	return s.Lock
}

// SetBalance sets the value of Balance.
func (s *JettonBalance) SetBalance(val string) {
	s.Balance = val
}

// SetPrice sets the value of Price.
func (s *JettonBalance) SetPrice(val OptTokenRates) {
	s.Price = val
}

// SetWalletAddress sets the value of WalletAddress.
func (s *JettonBalance) SetWalletAddress(val AccountAddress) {
	s.WalletAddress = val
}

// SetJetton sets the value of Jetton.
func (s *JettonBalance) SetJetton(val JettonPreview) {
	s.Jetton = val
}

// SetLock sets the value of Lock.
func (s *JettonBalance) SetLock(val OptJettonBalanceLock) {
	s.Lock = val
}

type JettonBalanceLock struct {
	Amount string `json:"amount"`
	Till   int64  `json:"till"`
}

// GetAmount returns the value of Amount.
func (s *JettonBalanceLock) GetAmount() string {
	return s.Amount
}

// GetTill returns the value of Till.
func (s *JettonBalanceLock) GetTill() int64 {
	return s.Till
}

// SetAmount sets the value of Amount.
func (s *JettonBalanceLock) SetAmount(val string) {
	s.Amount = val
}

// SetTill sets the value of Till.
func (s *JettonBalanceLock) SetTill(val int64) {
	s.Till = val
}

// Ref: #/components/schemas/JettonBridgeParams
type JettonBridgeParams struct {
	BridgeAddress        string                `json:"bridge_address"`
	OraclesAddress       string                `json:"oracles_address"`
	StateFlags           int                   `json:"state_flags"`
	BurnBridgeFee        OptInt64              `json:"burn_bridge_fee"`
	Oracles              []Oracle              `json:"oracles"`
	ExternalChainAddress OptString             `json:"external_chain_address"`
	Prices               OptJettonBridgePrices `json:"prices"`
}

// GetBridgeAddress returns the value of BridgeAddress.
func (s *JettonBridgeParams) GetBridgeAddress() string {
	return s.BridgeAddress
}

// GetOraclesAddress returns the value of OraclesAddress.
func (s *JettonBridgeParams) GetOraclesAddress() string {
	return s.OraclesAddress
}

// GetStateFlags returns the value of StateFlags.
func (s *JettonBridgeParams) GetStateFlags() int {
	return s.StateFlags
}

// GetBurnBridgeFee returns the value of BurnBridgeFee.
func (s *JettonBridgeParams) GetBurnBridgeFee() OptInt64 {
	return s.BurnBridgeFee
}

// GetOracles returns the value of Oracles.
func (s *JettonBridgeParams) GetOracles() []Oracle {
	return s.Oracles
}

// GetExternalChainAddress returns the value of ExternalChainAddress.
func (s *JettonBridgeParams) GetExternalChainAddress() OptString {
	return s.ExternalChainAddress
}

// GetPrices returns the value of Prices.
func (s *JettonBridgeParams) GetPrices() OptJettonBridgePrices {
	return s.Prices
}

// SetBridgeAddress sets the value of BridgeAddress.
func (s *JettonBridgeParams) SetBridgeAddress(val string) {
	s.BridgeAddress = val
}

// SetOraclesAddress sets the value of OraclesAddress.
func (s *JettonBridgeParams) SetOraclesAddress(val string) {
	s.OraclesAddress = val
}

// SetStateFlags sets the value of StateFlags.
func (s *JettonBridgeParams) SetStateFlags(val int) {
	s.StateFlags = val
}

// SetBurnBridgeFee sets the value of BurnBridgeFee.
func (s *JettonBridgeParams) SetBurnBridgeFee(val OptInt64) {
	s.BurnBridgeFee = val
}

// SetOracles sets the value of Oracles.
func (s *JettonBridgeParams) SetOracles(val []Oracle) {
	s.Oracles = val
}

// SetExternalChainAddress sets the value of ExternalChainAddress.
func (s *JettonBridgeParams) SetExternalChainAddress(val OptString) {
	s.ExternalChainAddress = val
}

// SetPrices sets the value of Prices.
func (s *JettonBridgeParams) SetPrices(val OptJettonBridgePrices) {
	s.Prices = val
}

// Ref: #/components/schemas/JettonBridgePrices
type JettonBridgePrices struct {
	BridgeBurnFee           int64 `json:"bridge_burn_fee"`
	BridgeMintFee           int64 `json:"bridge_mint_fee"`
	WalletMinTonsForStorage int64 `json:"wallet_min_tons_for_storage"`
	WalletGasConsumption    int64 `json:"wallet_gas_consumption"`
	MinterMinTonsForStorage int64 `json:"minter_min_tons_for_storage"`
	DiscoverGasConsumption  int64 `json:"discover_gas_consumption"`
}

// GetBridgeBurnFee returns the value of BridgeBurnFee.
func (s *JettonBridgePrices) GetBridgeBurnFee() int64 {
	return s.BridgeBurnFee
}

// GetBridgeMintFee returns the value of BridgeMintFee.
func (s *JettonBridgePrices) GetBridgeMintFee() int64 {
	return s.BridgeMintFee
}

// GetWalletMinTonsForStorage returns the value of WalletMinTonsForStorage.
func (s *JettonBridgePrices) GetWalletMinTonsForStorage() int64 {
	return s.WalletMinTonsForStorage
}

// GetWalletGasConsumption returns the value of WalletGasConsumption.
func (s *JettonBridgePrices) GetWalletGasConsumption() int64 {
	return s.WalletGasConsumption
}

// GetMinterMinTonsForStorage returns the value of MinterMinTonsForStorage.
func (s *JettonBridgePrices) GetMinterMinTonsForStorage() int64 {
	return s.MinterMinTonsForStorage
}

// GetDiscoverGasConsumption returns the value of DiscoverGasConsumption.
func (s *JettonBridgePrices) GetDiscoverGasConsumption() int64 {
	return s.DiscoverGasConsumption
}

// SetBridgeBurnFee sets the value of BridgeBurnFee.
func (s *JettonBridgePrices) SetBridgeBurnFee(val int64) {
	s.BridgeBurnFee = val
}

// SetBridgeMintFee sets the value of BridgeMintFee.
func (s *JettonBridgePrices) SetBridgeMintFee(val int64) {
	s.BridgeMintFee = val
}

// SetWalletMinTonsForStorage sets the value of WalletMinTonsForStorage.
func (s *JettonBridgePrices) SetWalletMinTonsForStorage(val int64) {
	s.WalletMinTonsForStorage = val
}

// SetWalletGasConsumption sets the value of WalletGasConsumption.
func (s *JettonBridgePrices) SetWalletGasConsumption(val int64) {
	s.WalletGasConsumption = val
}

// SetMinterMinTonsForStorage sets the value of MinterMinTonsForStorage.
func (s *JettonBridgePrices) SetMinterMinTonsForStorage(val int64) {
	s.MinterMinTonsForStorage = val
}

// SetDiscoverGasConsumption sets the value of DiscoverGasConsumption.
func (s *JettonBridgePrices) SetDiscoverGasConsumption(val int64) {
	s.DiscoverGasConsumption = val
}

// Ref: #/components/schemas/JettonBurnAction
type JettonBurnAction struct {
	Sender        AccountAddress `json:"sender"`
	SendersWallet string         `json:"senders_wallet"`
	// Amount in quanta of tokens.
	Amount string        `json:"amount"`
	Jetton JettonPreview `json:"jetton"`
}

// GetSender returns the value of Sender.
func (s *JettonBurnAction) GetSender() AccountAddress {
	return s.Sender
}

// GetSendersWallet returns the value of SendersWallet.
func (s *JettonBurnAction) GetSendersWallet() string {
	return s.SendersWallet
}

// GetAmount returns the value of Amount.
func (s *JettonBurnAction) GetAmount() string {
	return s.Amount
}

// GetJetton returns the value of Jetton.
func (s *JettonBurnAction) GetJetton() JettonPreview {
	return s.Jetton
}

// SetSender sets the value of Sender.
func (s *JettonBurnAction) SetSender(val AccountAddress) {
	s.Sender = val
}

// SetSendersWallet sets the value of SendersWallet.
func (s *JettonBurnAction) SetSendersWallet(val string) {
	s.SendersWallet = val
}

// SetAmount sets the value of Amount.
func (s *JettonBurnAction) SetAmount(val string) {
	s.Amount = val
}

// SetJetton sets the value of Jetton.
func (s *JettonBurnAction) SetJetton(val JettonPreview) {
	s.Jetton = val
}

// Ref: #/components/schemas/JettonHolders
type JettonHolders struct {
	Addresses []JettonHoldersAddressesItem `json:"addresses"`
	Total     int64                        `json:"total"`
}

// GetAddresses returns the value of Addresses.
func (s *JettonHolders) GetAddresses() []JettonHoldersAddressesItem {
	return s.Addresses
}

// GetTotal returns the value of Total.
func (s *JettonHolders) GetTotal() int64 {
	return s.Total
}

// SetAddresses sets the value of Addresses.
func (s *JettonHolders) SetAddresses(val []JettonHoldersAddressesItem) {
	s.Addresses = val
}

// SetTotal sets the value of Total.
func (s *JettonHolders) SetTotal(val int64) {
	s.Total = val
}

type JettonHoldersAddressesItem struct {
	Address string         `json:"address"`
	Owner   AccountAddress `json:"owner"`
	Balance string         `json:"balance"`
}

// GetAddress returns the value of Address.
func (s *JettonHoldersAddressesItem) GetAddress() string {
	return s.Address
}

// GetOwner returns the value of Owner.
func (s *JettonHoldersAddressesItem) GetOwner() AccountAddress {
	return s.Owner
}

// GetBalance returns the value of Balance.
func (s *JettonHoldersAddressesItem) GetBalance() string {
	return s.Balance
}

// SetAddress sets the value of Address.
func (s *JettonHoldersAddressesItem) SetAddress(val string) {
	s.Address = val
}

// SetOwner sets the value of Owner.
func (s *JettonHoldersAddressesItem) SetOwner(val AccountAddress) {
	s.Owner = val
}

// SetBalance sets the value of Balance.
func (s *JettonHoldersAddressesItem) SetBalance(val string) {
	s.Balance = val
}

// Ref: #/components/schemas/JettonInfo
type JettonInfo struct {
	Mintable     bool                   `json:"mintable"`
	TotalSupply  string                 `json:"total_supply"`
	Admin        OptAccountAddress      `json:"admin"`
	Metadata     JettonMetadata         `json:"metadata"`
	Verification JettonVerificationType `json:"verification"`
	HoldersCount int32                  `json:"holders_count"`
}

// GetMintable returns the value of Mintable.
func (s *JettonInfo) GetMintable() bool {
	return s.Mintable
}

// GetTotalSupply returns the value of TotalSupply.
func (s *JettonInfo) GetTotalSupply() string {
	return s.TotalSupply
}

// GetAdmin returns the value of Admin.
func (s *JettonInfo) GetAdmin() OptAccountAddress {
	return s.Admin
}

// GetMetadata returns the value of Metadata.
func (s *JettonInfo) GetMetadata() JettonMetadata {
	return s.Metadata
}

// GetVerification returns the value of Verification.
func (s *JettonInfo) GetVerification() JettonVerificationType {
	return s.Verification
}

// GetHoldersCount returns the value of HoldersCount.
func (s *JettonInfo) GetHoldersCount() int32 {
	return s.HoldersCount
}

// SetMintable sets the value of Mintable.
func (s *JettonInfo) SetMintable(val bool) {
	s.Mintable = val
}

// SetTotalSupply sets the value of TotalSupply.
func (s *JettonInfo) SetTotalSupply(val string) {
	s.TotalSupply = val
}

// SetAdmin sets the value of Admin.
func (s *JettonInfo) SetAdmin(val OptAccountAddress) {
	s.Admin = val
}

// SetMetadata sets the value of Metadata.
func (s *JettonInfo) SetMetadata(val JettonMetadata) {
	s.Metadata = val
}

// SetVerification sets the value of Verification.
func (s *JettonInfo) SetVerification(val JettonVerificationType) {
	s.Verification = val
}

// SetHoldersCount sets the value of HoldersCount.
func (s *JettonInfo) SetHoldersCount(val int32) {
	s.HoldersCount = val
}

// Ref: #/components/schemas/JettonMetadata
type JettonMetadata struct {
	Address     string    `json:"address"`
	Name        string    `json:"name"`
	Symbol      string    `json:"symbol"`
	Decimals    string    `json:"decimals"`
	Image       OptString `json:"image"`
	Description OptString `json:"description"`
	Social      []string  `json:"social"`
	Websites    []string  `json:"websites"`
	Catalogs    []string  `json:"catalogs"`
}

// GetAddress returns the value of Address.
func (s *JettonMetadata) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s *JettonMetadata) GetName() string {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s *JettonMetadata) GetSymbol() string {
	return s.Symbol
}

// GetDecimals returns the value of Decimals.
func (s *JettonMetadata) GetDecimals() string {
	return s.Decimals
}

// GetImage returns the value of Image.
func (s *JettonMetadata) GetImage() OptString {
	return s.Image
}

// GetDescription returns the value of Description.
func (s *JettonMetadata) GetDescription() OptString {
	return s.Description
}

// GetSocial returns the value of Social.
func (s *JettonMetadata) GetSocial() []string {
	return s.Social
}

// GetWebsites returns the value of Websites.
func (s *JettonMetadata) GetWebsites() []string {
	return s.Websites
}

// GetCatalogs returns the value of Catalogs.
func (s *JettonMetadata) GetCatalogs() []string {
	return s.Catalogs
}

// SetAddress sets the value of Address.
func (s *JettonMetadata) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *JettonMetadata) SetName(val string) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *JettonMetadata) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimals sets the value of Decimals.
func (s *JettonMetadata) SetDecimals(val string) {
	s.Decimals = val
}

// SetImage sets the value of Image.
func (s *JettonMetadata) SetImage(val OptString) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *JettonMetadata) SetDescription(val OptString) {
	s.Description = val
}

// SetSocial sets the value of Social.
func (s *JettonMetadata) SetSocial(val []string) {
	s.Social = val
}

// SetWebsites sets the value of Websites.
func (s *JettonMetadata) SetWebsites(val []string) {
	s.Websites = val
}

// SetCatalogs sets the value of Catalogs.
func (s *JettonMetadata) SetCatalogs(val []string) {
	s.Catalogs = val
}

// Ref: #/components/schemas/JettonMintAction
type JettonMintAction struct {
	Recipient        AccountAddress `json:"recipient"`
	RecipientsWallet string         `json:"recipients_wallet"`
	// Amount in quanta of tokens.
	Amount string        `json:"amount"`
	Jetton JettonPreview `json:"jetton"`
}

// GetRecipient returns the value of Recipient.
func (s *JettonMintAction) GetRecipient() AccountAddress {
	return s.Recipient
}

// GetRecipientsWallet returns the value of RecipientsWallet.
func (s *JettonMintAction) GetRecipientsWallet() string {
	return s.RecipientsWallet
}

// GetAmount returns the value of Amount.
func (s *JettonMintAction) GetAmount() string {
	return s.Amount
}

// GetJetton returns the value of Jetton.
func (s *JettonMintAction) GetJetton() JettonPreview {
	return s.Jetton
}

// SetRecipient sets the value of Recipient.
func (s *JettonMintAction) SetRecipient(val AccountAddress) {
	s.Recipient = val
}

// SetRecipientsWallet sets the value of RecipientsWallet.
func (s *JettonMintAction) SetRecipientsWallet(val string) {
	s.RecipientsWallet = val
}

// SetAmount sets the value of Amount.
func (s *JettonMintAction) SetAmount(val string) {
	s.Amount = val
}

// SetJetton sets the value of Jetton.
func (s *JettonMintAction) SetJetton(val JettonPreview) {
	s.Jetton = val
}

// Ref: #/components/schemas/JettonPreview
type JettonPreview struct {
	Address      string                 `json:"address"`
	Name         string                 `json:"name"`
	Symbol       string                 `json:"symbol"`
	Decimals     int                    `json:"decimals"`
	Image        string                 `json:"image"`
	Verification JettonVerificationType `json:"verification"`
}

// GetAddress returns the value of Address.
func (s *JettonPreview) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s *JettonPreview) GetName() string {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s *JettonPreview) GetSymbol() string {
	return s.Symbol
}

// GetDecimals returns the value of Decimals.
func (s *JettonPreview) GetDecimals() int {
	return s.Decimals
}

// GetImage returns the value of Image.
func (s *JettonPreview) GetImage() string {
	return s.Image
}

// GetVerification returns the value of Verification.
func (s *JettonPreview) GetVerification() JettonVerificationType {
	return s.Verification
}

// SetAddress sets the value of Address.
func (s *JettonPreview) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *JettonPreview) SetName(val string) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *JettonPreview) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimals sets the value of Decimals.
func (s *JettonPreview) SetDecimals(val int) {
	s.Decimals = val
}

// SetImage sets the value of Image.
func (s *JettonPreview) SetImage(val string) {
	s.Image = val
}

// SetVerification sets the value of Verification.
func (s *JettonPreview) SetVerification(val JettonVerificationType) {
	s.Verification = val
}

// Ref: #/components/schemas/JettonQuantity
type JettonQuantity struct {
	Quantity      string         `json:"quantity"`
	WalletAddress AccountAddress `json:"wallet_address"`
	Jetton        JettonPreview  `json:"jetton"`
}

// GetQuantity returns the value of Quantity.
func (s *JettonQuantity) GetQuantity() string {
	return s.Quantity
}

// GetWalletAddress returns the value of WalletAddress.
func (s *JettonQuantity) GetWalletAddress() AccountAddress {
	return s.WalletAddress
}

// GetJetton returns the value of Jetton.
func (s *JettonQuantity) GetJetton() JettonPreview {
	return s.Jetton
}

// SetQuantity sets the value of Quantity.
func (s *JettonQuantity) SetQuantity(val string) {
	s.Quantity = val
}

// SetWalletAddress sets the value of WalletAddress.
func (s *JettonQuantity) SetWalletAddress(val AccountAddress) {
	s.WalletAddress = val
}

// SetJetton sets the value of Jetton.
func (s *JettonQuantity) SetJetton(val JettonPreview) {
	s.Jetton = val
}

// Ref: #/components/schemas/JettonSwapAction
type JettonSwapAction struct {
	Dex             JettonSwapActionDex `json:"dex"`
	AmountIn        string              `json:"amount_in"`
	AmountOut       string              `json:"amount_out"`
	TonIn           OptInt64            `json:"ton_in"`
	TonOut          OptInt64            `json:"ton_out"`
	UserWallet      AccountAddress      `json:"user_wallet"`
	Router          AccountAddress      `json:"router"`
	JettonMasterIn  OptJettonPreview    `json:"jetton_master_in"`
	JettonMasterOut OptJettonPreview    `json:"jetton_master_out"`
}

// GetDex returns the value of Dex.
func (s *JettonSwapAction) GetDex() JettonSwapActionDex {
	return s.Dex
}

// GetAmountIn returns the value of AmountIn.
func (s *JettonSwapAction) GetAmountIn() string {
	return s.AmountIn
}

// GetAmountOut returns the value of AmountOut.
func (s *JettonSwapAction) GetAmountOut() string {
	return s.AmountOut
}

// GetTonIn returns the value of TonIn.
func (s *JettonSwapAction) GetTonIn() OptInt64 {
	return s.TonIn
}

// GetTonOut returns the value of TonOut.
func (s *JettonSwapAction) GetTonOut() OptInt64 {
	return s.TonOut
}

// GetUserWallet returns the value of UserWallet.
func (s *JettonSwapAction) GetUserWallet() AccountAddress {
	return s.UserWallet
}

// GetRouter returns the value of Router.
func (s *JettonSwapAction) GetRouter() AccountAddress {
	return s.Router
}

// GetJettonMasterIn returns the value of JettonMasterIn.
func (s *JettonSwapAction) GetJettonMasterIn() OptJettonPreview {
	return s.JettonMasterIn
}

// GetJettonMasterOut returns the value of JettonMasterOut.
func (s *JettonSwapAction) GetJettonMasterOut() OptJettonPreview {
	return s.JettonMasterOut
}

// SetDex sets the value of Dex.
func (s *JettonSwapAction) SetDex(val JettonSwapActionDex) {
	s.Dex = val
}

// SetAmountIn sets the value of AmountIn.
func (s *JettonSwapAction) SetAmountIn(val string) {
	s.AmountIn = val
}

// SetAmountOut sets the value of AmountOut.
func (s *JettonSwapAction) SetAmountOut(val string) {
	s.AmountOut = val
}

// SetTonIn sets the value of TonIn.
func (s *JettonSwapAction) SetTonIn(val OptInt64) {
	s.TonIn = val
}

// SetTonOut sets the value of TonOut.
func (s *JettonSwapAction) SetTonOut(val OptInt64) {
	s.TonOut = val
}

// SetUserWallet sets the value of UserWallet.
func (s *JettonSwapAction) SetUserWallet(val AccountAddress) {
	s.UserWallet = val
}

// SetRouter sets the value of Router.
func (s *JettonSwapAction) SetRouter(val AccountAddress) {
	s.Router = val
}

// SetJettonMasterIn sets the value of JettonMasterIn.
func (s *JettonSwapAction) SetJettonMasterIn(val OptJettonPreview) {
	s.JettonMasterIn = val
}

// SetJettonMasterOut sets the value of JettonMasterOut.
func (s *JettonSwapAction) SetJettonMasterOut(val OptJettonPreview) {
	s.JettonMasterOut = val
}

type JettonSwapActionDex string

const (
	JettonSwapActionDexStonfi    JettonSwapActionDex = "stonfi"
	JettonSwapActionDexDedust    JettonSwapActionDex = "dedust"
	JettonSwapActionDexMegatonfi JettonSwapActionDex = "megatonfi"
)

// AllValues returns all JettonSwapActionDex values.
func (JettonSwapActionDex) AllValues() []JettonSwapActionDex {
	return []JettonSwapActionDex{
		JettonSwapActionDexStonfi,
		JettonSwapActionDexDedust,
		JettonSwapActionDexMegatonfi,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JettonSwapActionDex) MarshalText() ([]byte, error) {
	switch s {
	case JettonSwapActionDexStonfi:
		return []byte(s), nil
	case JettonSwapActionDexDedust:
		return []byte(s), nil
	case JettonSwapActionDexMegatonfi:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JettonSwapActionDex) UnmarshalText(data []byte) error {
	switch JettonSwapActionDex(data) {
	case JettonSwapActionDexStonfi:
		*s = JettonSwapActionDexStonfi
		return nil
	case JettonSwapActionDexDedust:
		*s = JettonSwapActionDexDedust
		return nil
	case JettonSwapActionDexMegatonfi:
		*s = JettonSwapActionDexMegatonfi
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/JettonTransferAction
type JettonTransferAction struct {
	Sender           OptAccountAddress `json:"sender"`
	Recipient        OptAccountAddress `json:"recipient"`
	SendersWallet    string            `json:"senders_wallet"`
	RecipientsWallet string            `json:"recipients_wallet"`
	// Amount in quanta of tokens.
	Amount           string              `json:"amount"`
	Comment          OptString           `json:"comment"`
	EncryptedComment OptEncryptedComment `json:"encrypted_comment"`
	Refund           OptRefund           `json:"refund"`
	Jetton           JettonPreview       `json:"jetton"`
}

// GetSender returns the value of Sender.
func (s *JettonTransferAction) GetSender() OptAccountAddress {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s *JettonTransferAction) GetRecipient() OptAccountAddress {
	return s.Recipient
}

// GetSendersWallet returns the value of SendersWallet.
func (s *JettonTransferAction) GetSendersWallet() string {
	return s.SendersWallet
}

// GetRecipientsWallet returns the value of RecipientsWallet.
func (s *JettonTransferAction) GetRecipientsWallet() string {
	return s.RecipientsWallet
}

// GetAmount returns the value of Amount.
func (s *JettonTransferAction) GetAmount() string {
	return s.Amount
}

// GetComment returns the value of Comment.
func (s *JettonTransferAction) GetComment() OptString {
	return s.Comment
}

// GetEncryptedComment returns the value of EncryptedComment.
func (s *JettonTransferAction) GetEncryptedComment() OptEncryptedComment {
	return s.EncryptedComment
}

// GetRefund returns the value of Refund.
func (s *JettonTransferAction) GetRefund() OptRefund {
	return s.Refund
}

// GetJetton returns the value of Jetton.
func (s *JettonTransferAction) GetJetton() JettonPreview {
	return s.Jetton
}

// SetSender sets the value of Sender.
func (s *JettonTransferAction) SetSender(val OptAccountAddress) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *JettonTransferAction) SetRecipient(val OptAccountAddress) {
	s.Recipient = val
}

// SetSendersWallet sets the value of SendersWallet.
func (s *JettonTransferAction) SetSendersWallet(val string) {
	s.SendersWallet = val
}

// SetRecipientsWallet sets the value of RecipientsWallet.
func (s *JettonTransferAction) SetRecipientsWallet(val string) {
	s.RecipientsWallet = val
}

// SetAmount sets the value of Amount.
func (s *JettonTransferAction) SetAmount(val string) {
	s.Amount = val
}

// SetComment sets the value of Comment.
func (s *JettonTransferAction) SetComment(val OptString) {
	s.Comment = val
}

// SetEncryptedComment sets the value of EncryptedComment.
func (s *JettonTransferAction) SetEncryptedComment(val OptEncryptedComment) {
	s.EncryptedComment = val
}

// SetRefund sets the value of Refund.
func (s *JettonTransferAction) SetRefund(val OptRefund) {
	s.Refund = val
}

// SetJetton sets the value of Jetton.
func (s *JettonTransferAction) SetJetton(val JettonPreview) {
	s.Jetton = val
}

// Ref: #/components/schemas/JettonVerificationType
type JettonVerificationType string

const (
	JettonVerificationTypeWhitelist JettonVerificationType = "whitelist"
	JettonVerificationTypeBlacklist JettonVerificationType = "blacklist"
	JettonVerificationTypeNone      JettonVerificationType = "none"
)

// AllValues returns all JettonVerificationType values.
func (JettonVerificationType) AllValues() []JettonVerificationType {
	return []JettonVerificationType{
		JettonVerificationTypeWhitelist,
		JettonVerificationTypeBlacklist,
		JettonVerificationTypeNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JettonVerificationType) MarshalText() ([]byte, error) {
	switch s {
	case JettonVerificationTypeWhitelist:
		return []byte(s), nil
	case JettonVerificationTypeBlacklist:
		return []byte(s), nil
	case JettonVerificationTypeNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JettonVerificationType) UnmarshalText(data []byte) error {
	switch JettonVerificationType(data) {
	case JettonVerificationTypeWhitelist:
		*s = JettonVerificationTypeWhitelist
		return nil
	case JettonVerificationTypeBlacklist:
		*s = JettonVerificationTypeBlacklist
		return nil
	case JettonVerificationTypeNone:
		*s = JettonVerificationTypeNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Jettons
type Jettons struct {
	Jettons []JettonInfo `json:"jettons"`
}

// GetJettons returns the value of Jettons.
func (s *Jettons) GetJettons() []JettonInfo {
	return s.Jettons
}

// SetJettons sets the value of Jettons.
func (s *Jettons) SetJettons(val []JettonInfo) {
	s.Jettons = val
}

// Ref: #/components/schemas/JettonsBalances
type JettonsBalances struct {
	Balances []JettonBalance `json:"balances"`
}

// GetBalances returns the value of Balances.
func (s *JettonsBalances) GetBalances() []JettonBalance {
	return s.Balances
}

// SetBalances sets the value of Balances.
func (s *JettonsBalances) SetBalances(val []JettonBalance) {
	s.Balances = val
}

// Ref: #/components/schemas/MarketTonRates
type MarketTonRates struct {
	Market         string  `json:"market"`
	UsdPrice       float64 `json:"usd_price"`
	LastDateUpdate int64   `json:"last_date_update"`
}

// GetMarket returns the value of Market.
func (s *MarketTonRates) GetMarket() string {
	return s.Market
}

// GetUsdPrice returns the value of UsdPrice.
func (s *MarketTonRates) GetUsdPrice() float64 {
	return s.UsdPrice
}

// GetLastDateUpdate returns the value of LastDateUpdate.
func (s *MarketTonRates) GetLastDateUpdate() int64 {
	return s.LastDateUpdate
}

// SetMarket sets the value of Market.
func (s *MarketTonRates) SetMarket(val string) {
	s.Market = val
}

// SetUsdPrice sets the value of UsdPrice.
func (s *MarketTonRates) SetUsdPrice(val float64) {
	s.UsdPrice = val
}

// SetLastDateUpdate sets the value of LastDateUpdate.
func (s *MarketTonRates) SetLastDateUpdate(val int64) {
	s.LastDateUpdate = val
}

// Ref: #/components/schemas/Message
type Message struct {
	MsgType     MessageMsgType    `json:"msg_type"`
	CreatedLt   int64             `json:"created_lt"`
	IhrDisabled bool              `json:"ihr_disabled"`
	Bounce      bool              `json:"bounce"`
	Bounced     bool              `json:"bounced"`
	Value       int64             `json:"value"`
	FwdFee      int64             `json:"fwd_fee"`
	IhrFee      int64             `json:"ihr_fee"`
	Destination OptAccountAddress `json:"destination"`
	Source      OptAccountAddress `json:"source"`
	ImportFee   int64             `json:"import_fee"`
	CreatedAt   int64             `json:"created_at"`
	OpCode      OptString         `json:"op_code"`
	Init        OptStateInit      `json:"init"`
	// Hex-encoded BoC with raw message body.
	RawBody       OptString `json:"raw_body"`
	DecodedOpName OptString `json:"decoded_op_name"`
	DecodedBody   jx.Raw    `json:"decoded_body"`
}

// GetMsgType returns the value of MsgType.
func (s *Message) GetMsgType() MessageMsgType {
	return s.MsgType
}

// GetCreatedLt returns the value of CreatedLt.
func (s *Message) GetCreatedLt() int64 {
	return s.CreatedLt
}

// GetIhrDisabled returns the value of IhrDisabled.
func (s *Message) GetIhrDisabled() bool {
	return s.IhrDisabled
}

// GetBounce returns the value of Bounce.
func (s *Message) GetBounce() bool {
	return s.Bounce
}

// GetBounced returns the value of Bounced.
func (s *Message) GetBounced() bool {
	return s.Bounced
}

// GetValue returns the value of Value.
func (s *Message) GetValue() int64 {
	return s.Value
}

// GetFwdFee returns the value of FwdFee.
func (s *Message) GetFwdFee() int64 {
	return s.FwdFee
}

// GetIhrFee returns the value of IhrFee.
func (s *Message) GetIhrFee() int64 {
	return s.IhrFee
}

// GetDestination returns the value of Destination.
func (s *Message) GetDestination() OptAccountAddress {
	return s.Destination
}

// GetSource returns the value of Source.
func (s *Message) GetSource() OptAccountAddress {
	return s.Source
}

// GetImportFee returns the value of ImportFee.
func (s *Message) GetImportFee() int64 {
	return s.ImportFee
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Message) GetCreatedAt() int64 {
	return s.CreatedAt
}

// GetOpCode returns the value of OpCode.
func (s *Message) GetOpCode() OptString {
	return s.OpCode
}

// GetInit returns the value of Init.
func (s *Message) GetInit() OptStateInit {
	return s.Init
}

// GetRawBody returns the value of RawBody.
func (s *Message) GetRawBody() OptString {
	return s.RawBody
}

// GetDecodedOpName returns the value of DecodedOpName.
func (s *Message) GetDecodedOpName() OptString {
	return s.DecodedOpName
}

// GetDecodedBody returns the value of DecodedBody.
func (s *Message) GetDecodedBody() jx.Raw {
	return s.DecodedBody
}

// SetMsgType sets the value of MsgType.
func (s *Message) SetMsgType(val MessageMsgType) {
	s.MsgType = val
}

// SetCreatedLt sets the value of CreatedLt.
func (s *Message) SetCreatedLt(val int64) {
	s.CreatedLt = val
}

// SetIhrDisabled sets the value of IhrDisabled.
func (s *Message) SetIhrDisabled(val bool) {
	s.IhrDisabled = val
}

// SetBounce sets the value of Bounce.
func (s *Message) SetBounce(val bool) {
	s.Bounce = val
}

// SetBounced sets the value of Bounced.
func (s *Message) SetBounced(val bool) {
	s.Bounced = val
}

// SetValue sets the value of Value.
func (s *Message) SetValue(val int64) {
	s.Value = val
}

// SetFwdFee sets the value of FwdFee.
func (s *Message) SetFwdFee(val int64) {
	s.FwdFee = val
}

// SetIhrFee sets the value of IhrFee.
func (s *Message) SetIhrFee(val int64) {
	s.IhrFee = val
}

// SetDestination sets the value of Destination.
func (s *Message) SetDestination(val OptAccountAddress) {
	s.Destination = val
}

// SetSource sets the value of Source.
func (s *Message) SetSource(val OptAccountAddress) {
	s.Source = val
}

// SetImportFee sets the value of ImportFee.
func (s *Message) SetImportFee(val int64) {
	s.ImportFee = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Message) SetCreatedAt(val int64) {
	s.CreatedAt = val
}

// SetOpCode sets the value of OpCode.
func (s *Message) SetOpCode(val OptString) {
	s.OpCode = val
}

// SetInit sets the value of Init.
func (s *Message) SetInit(val OptStateInit) {
	s.Init = val
}

// SetRawBody sets the value of RawBody.
func (s *Message) SetRawBody(val OptString) {
	s.RawBody = val
}

// SetDecodedOpName sets the value of DecodedOpName.
func (s *Message) SetDecodedOpName(val OptString) {
	s.DecodedOpName = val
}

// SetDecodedBody sets the value of DecodedBody.
func (s *Message) SetDecodedBody(val jx.Raw) {
	s.DecodedBody = val
}

// Ref: #/components/schemas/MessageConsequences
type MessageConsequences struct {
	Trace Trace        `json:"trace"`
	Risk  Risk         `json:"risk"`
	Event AccountEvent `json:"event"`
}

// GetTrace returns the value of Trace.
func (s *MessageConsequences) GetTrace() Trace {
	return s.Trace
}

// GetRisk returns the value of Risk.
func (s *MessageConsequences) GetRisk() Risk {
	return s.Risk
}

// GetEvent returns the value of Event.
func (s *MessageConsequences) GetEvent() AccountEvent {
	return s.Event
}

// SetTrace sets the value of Trace.
func (s *MessageConsequences) SetTrace(val Trace) {
	s.Trace = val
}

// SetRisk sets the value of Risk.
func (s *MessageConsequences) SetRisk(val Risk) {
	s.Risk = val
}

// SetEvent sets the value of Event.
func (s *MessageConsequences) SetEvent(val AccountEvent) {
	s.Event = val
}

type MessageMsgType string

const (
	MessageMsgTypeIntMsg    MessageMsgType = "int_msg"
	MessageMsgTypeExtInMsg  MessageMsgType = "ext_in_msg"
	MessageMsgTypeExtOutMsg MessageMsgType = "ext_out_msg"
)

// AllValues returns all MessageMsgType values.
func (MessageMsgType) AllValues() []MessageMsgType {
	return []MessageMsgType{
		MessageMsgTypeIntMsg,
		MessageMsgTypeExtInMsg,
		MessageMsgTypeExtOutMsg,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageMsgType) MarshalText() ([]byte, error) {
	switch s {
	case MessageMsgTypeIntMsg:
		return []byte(s), nil
	case MessageMsgTypeExtInMsg:
		return []byte(s), nil
	case MessageMsgTypeExtOutMsg:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageMsgType) UnmarshalText(data []byte) error {
	switch MessageMsgType(data) {
	case MessageMsgTypeIntMsg:
		*s = MessageMsgTypeIntMsg
		return nil
	case MessageMsgTypeExtInMsg:
		*s = MessageMsgTypeExtInMsg
		return nil
	case MessageMsgTypeExtOutMsg:
		*s = MessageMsgTypeExtOutMsg
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/MethodExecutionResult
type MethodExecutionResult struct {
	Success bool `json:"success"`
	// Tvm exit code.
	ExitCode int              `json:"exit_code"`
	Stack    []TvmStackRecord `json:"stack"`
	Decoded  jx.Raw           `json:"decoded"`
}

// GetSuccess returns the value of Success.
func (s *MethodExecutionResult) GetSuccess() bool {
	return s.Success
}

// GetExitCode returns the value of ExitCode.
func (s *MethodExecutionResult) GetExitCode() int {
	return s.ExitCode
}

// GetStack returns the value of Stack.
func (s *MethodExecutionResult) GetStack() []TvmStackRecord {
	return s.Stack
}

// GetDecoded returns the value of Decoded.
func (s *MethodExecutionResult) GetDecoded() jx.Raw {
	return s.Decoded
}

// SetSuccess sets the value of Success.
func (s *MethodExecutionResult) SetSuccess(val bool) {
	s.Success = val
}

// SetExitCode sets the value of ExitCode.
func (s *MethodExecutionResult) SetExitCode(val int) {
	s.ExitCode = val
}

// SetStack sets the value of Stack.
func (s *MethodExecutionResult) SetStack(val []TvmStackRecord) {
	s.Stack = val
}

// SetDecoded sets the value of Decoded.
func (s *MethodExecutionResult) SetDecoded(val jx.Raw) {
	s.Decoded = val
}

// Ref: #/components/schemas/MisbehaviourPunishmentConfig
type MisbehaviourPunishmentConfig struct {
	DefaultFlatFine          int64 `json:"default_flat_fine"`
	DefaultProportionalFine  int64 `json:"default_proportional_fine"`
	SeverityFlatMult         int   `json:"severity_flat_mult"`
	SeverityProportionalMult int   `json:"severity_proportional_mult"`
	UnpunishableInterval     int   `json:"unpunishable_interval"`
	LongInterval             int   `json:"long_interval"`
	LongFlatMult             int   `json:"long_flat_mult"`
	LongProportionalMult     int   `json:"long_proportional_mult"`
	MediumInterval           int   `json:"medium_interval"`
	MediumFlatMult           int   `json:"medium_flat_mult"`
	MediumProportionalMult   int   `json:"medium_proportional_mult"`
}

// GetDefaultFlatFine returns the value of DefaultFlatFine.
func (s *MisbehaviourPunishmentConfig) GetDefaultFlatFine() int64 {
	return s.DefaultFlatFine
}

// GetDefaultProportionalFine returns the value of DefaultProportionalFine.
func (s *MisbehaviourPunishmentConfig) GetDefaultProportionalFine() int64 {
	return s.DefaultProportionalFine
}

// GetSeverityFlatMult returns the value of SeverityFlatMult.
func (s *MisbehaviourPunishmentConfig) GetSeverityFlatMult() int {
	return s.SeverityFlatMult
}

// GetSeverityProportionalMult returns the value of SeverityProportionalMult.
func (s *MisbehaviourPunishmentConfig) GetSeverityProportionalMult() int {
	return s.SeverityProportionalMult
}

// GetUnpunishableInterval returns the value of UnpunishableInterval.
func (s *MisbehaviourPunishmentConfig) GetUnpunishableInterval() int {
	return s.UnpunishableInterval
}

// GetLongInterval returns the value of LongInterval.
func (s *MisbehaviourPunishmentConfig) GetLongInterval() int {
	return s.LongInterval
}

// GetLongFlatMult returns the value of LongFlatMult.
func (s *MisbehaviourPunishmentConfig) GetLongFlatMult() int {
	return s.LongFlatMult
}

// GetLongProportionalMult returns the value of LongProportionalMult.
func (s *MisbehaviourPunishmentConfig) GetLongProportionalMult() int {
	return s.LongProportionalMult
}

// GetMediumInterval returns the value of MediumInterval.
func (s *MisbehaviourPunishmentConfig) GetMediumInterval() int {
	return s.MediumInterval
}

// GetMediumFlatMult returns the value of MediumFlatMult.
func (s *MisbehaviourPunishmentConfig) GetMediumFlatMult() int {
	return s.MediumFlatMult
}

// GetMediumProportionalMult returns the value of MediumProportionalMult.
func (s *MisbehaviourPunishmentConfig) GetMediumProportionalMult() int {
	return s.MediumProportionalMult
}

// SetDefaultFlatFine sets the value of DefaultFlatFine.
func (s *MisbehaviourPunishmentConfig) SetDefaultFlatFine(val int64) {
	s.DefaultFlatFine = val
}

// SetDefaultProportionalFine sets the value of DefaultProportionalFine.
func (s *MisbehaviourPunishmentConfig) SetDefaultProportionalFine(val int64) {
	s.DefaultProportionalFine = val
}

// SetSeverityFlatMult sets the value of SeverityFlatMult.
func (s *MisbehaviourPunishmentConfig) SetSeverityFlatMult(val int) {
	s.SeverityFlatMult = val
}

// SetSeverityProportionalMult sets the value of SeverityProportionalMult.
func (s *MisbehaviourPunishmentConfig) SetSeverityProportionalMult(val int) {
	s.SeverityProportionalMult = val
}

// SetUnpunishableInterval sets the value of UnpunishableInterval.
func (s *MisbehaviourPunishmentConfig) SetUnpunishableInterval(val int) {
	s.UnpunishableInterval = val
}

// SetLongInterval sets the value of LongInterval.
func (s *MisbehaviourPunishmentConfig) SetLongInterval(val int) {
	s.LongInterval = val
}

// SetLongFlatMult sets the value of LongFlatMult.
func (s *MisbehaviourPunishmentConfig) SetLongFlatMult(val int) {
	s.LongFlatMult = val
}

// SetLongProportionalMult sets the value of LongProportionalMult.
func (s *MisbehaviourPunishmentConfig) SetLongProportionalMult(val int) {
	s.LongProportionalMult = val
}

// SetMediumInterval sets the value of MediumInterval.
func (s *MisbehaviourPunishmentConfig) SetMediumInterval(val int) {
	s.MediumInterval = val
}

// SetMediumFlatMult sets the value of MediumFlatMult.
func (s *MisbehaviourPunishmentConfig) SetMediumFlatMult(val int) {
	s.MediumFlatMult = val
}

// SetMediumProportionalMult sets the value of MediumProportionalMult.
func (s *MisbehaviourPunishmentConfig) SetMediumProportionalMult(val int) {
	s.MediumProportionalMult = val
}

// Ref: #/components/schemas/MsgForwardPrices
type MsgForwardPrices struct {
	LumpPrice      int64 `json:"lump_price"`
	BitPrice       int64 `json:"bit_price"`
	CellPrice      int64 `json:"cell_price"`
	IhrPriceFactor int64 `json:"ihr_price_factor"`
	FirstFrac      int64 `json:"first_frac"`
	NextFrac       int64 `json:"next_frac"`
}

// GetLumpPrice returns the value of LumpPrice.
func (s *MsgForwardPrices) GetLumpPrice() int64 {
	return s.LumpPrice
}

// GetBitPrice returns the value of BitPrice.
func (s *MsgForwardPrices) GetBitPrice() int64 {
	return s.BitPrice
}

// GetCellPrice returns the value of CellPrice.
func (s *MsgForwardPrices) GetCellPrice() int64 {
	return s.CellPrice
}

// GetIhrPriceFactor returns the value of IhrPriceFactor.
func (s *MsgForwardPrices) GetIhrPriceFactor() int64 {
	return s.IhrPriceFactor
}

// GetFirstFrac returns the value of FirstFrac.
func (s *MsgForwardPrices) GetFirstFrac() int64 {
	return s.FirstFrac
}

// GetNextFrac returns the value of NextFrac.
func (s *MsgForwardPrices) GetNextFrac() int64 {
	return s.NextFrac
}

// SetLumpPrice sets the value of LumpPrice.
func (s *MsgForwardPrices) SetLumpPrice(val int64) {
	s.LumpPrice = val
}

// SetBitPrice sets the value of BitPrice.
func (s *MsgForwardPrices) SetBitPrice(val int64) {
	s.BitPrice = val
}

// SetCellPrice sets the value of CellPrice.
func (s *MsgForwardPrices) SetCellPrice(val int64) {
	s.CellPrice = val
}

// SetIhrPriceFactor sets the value of IhrPriceFactor.
func (s *MsgForwardPrices) SetIhrPriceFactor(val int64) {
	s.IhrPriceFactor = val
}

// SetFirstFrac sets the value of FirstFrac.
func (s *MsgForwardPrices) SetFirstFrac(val int64) {
	s.FirstFrac = val
}

// SetNextFrac sets the value of NextFrac.
func (s *MsgForwardPrices) SetNextFrac(val int64) {
	s.NextFrac = val
}

type NftApprovedBy []NftApprovedByItem

type NftApprovedByItem string

const (
	NftApprovedByItemGetgems     NftApprovedByItem = "getgems"
	NftApprovedByItemTonkeeper   NftApprovedByItem = "tonkeeper"
	NftApprovedByItemTonDiamonds NftApprovedByItem = "ton.diamonds"
)

// AllValues returns all NftApprovedByItem values.
func (NftApprovedByItem) AllValues() []NftApprovedByItem {
	return []NftApprovedByItem{
		NftApprovedByItemGetgems,
		NftApprovedByItemTonkeeper,
		NftApprovedByItemTonDiamonds,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NftApprovedByItem) MarshalText() ([]byte, error) {
	switch s {
	case NftApprovedByItemGetgems:
		return []byte(s), nil
	case NftApprovedByItemTonkeeper:
		return []byte(s), nil
	case NftApprovedByItemTonDiamonds:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NftApprovedByItem) UnmarshalText(data []byte) error {
	switch NftApprovedByItem(data) {
	case NftApprovedByItemGetgems:
		*s = NftApprovedByItemGetgems
		return nil
	case NftApprovedByItemTonkeeper:
		*s = NftApprovedByItemTonkeeper
		return nil
	case NftApprovedByItemTonDiamonds:
		*s = NftApprovedByItemTonDiamonds
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NftCollection
type NftCollection struct {
	Address              string                   `json:"address"`
	NextItemIndex        int64                    `json:"next_item_index"`
	Owner                OptAccountAddress        `json:"owner"`
	RawCollectionContent string                   `json:"raw_collection_content"`
	Metadata             OptNftCollectionMetadata `json:"metadata"`
	Previews             []ImagePreview           `json:"previews"`
	ApprovedBy           NftApprovedBy            `json:"approved_by"`
}

// GetAddress returns the value of Address.
func (s *NftCollection) GetAddress() string {
	return s.Address
}

// GetNextItemIndex returns the value of NextItemIndex.
func (s *NftCollection) GetNextItemIndex() int64 {
	return s.NextItemIndex
}

// GetOwner returns the value of Owner.
func (s *NftCollection) GetOwner() OptAccountAddress {
	return s.Owner
}

// GetRawCollectionContent returns the value of RawCollectionContent.
func (s *NftCollection) GetRawCollectionContent() string {
	return s.RawCollectionContent
}

// GetMetadata returns the value of Metadata.
func (s *NftCollection) GetMetadata() OptNftCollectionMetadata {
	return s.Metadata
}

// GetPreviews returns the value of Previews.
func (s *NftCollection) GetPreviews() []ImagePreview {
	return s.Previews
}

// GetApprovedBy returns the value of ApprovedBy.
func (s *NftCollection) GetApprovedBy() NftApprovedBy {
	return s.ApprovedBy
}

// SetAddress sets the value of Address.
func (s *NftCollection) SetAddress(val string) {
	s.Address = val
}

// SetNextItemIndex sets the value of NextItemIndex.
func (s *NftCollection) SetNextItemIndex(val int64) {
	s.NextItemIndex = val
}

// SetOwner sets the value of Owner.
func (s *NftCollection) SetOwner(val OptAccountAddress) {
	s.Owner = val
}

// SetRawCollectionContent sets the value of RawCollectionContent.
func (s *NftCollection) SetRawCollectionContent(val string) {
	s.RawCollectionContent = val
}

// SetMetadata sets the value of Metadata.
func (s *NftCollection) SetMetadata(val OptNftCollectionMetadata) {
	s.Metadata = val
}

// SetPreviews sets the value of Previews.
func (s *NftCollection) SetPreviews(val []ImagePreview) {
	s.Previews = val
}

// SetApprovedBy sets the value of ApprovedBy.
func (s *NftCollection) SetApprovedBy(val NftApprovedBy) {
	s.ApprovedBy = val
}

type NftCollectionMetadata map[string]jx.Raw

func (s *NftCollectionMetadata) init() NftCollectionMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/NftCollections
type NftCollections struct {
	NftCollections []NftCollection `json:"nft_collections"`
}

// GetNftCollections returns the value of NftCollections.
func (s *NftCollections) GetNftCollections() []NftCollection {
	return s.NftCollections
}

// SetNftCollections sets the value of NftCollections.
func (s *NftCollections) SetNftCollections(val []NftCollection) {
	s.NftCollections = val
}

// Ref: #/components/schemas/NftItem
type NftItem struct {
	Address     string               `json:"address"`
	Index       int64                `json:"index"`
	Owner       OptAccountAddress    `json:"owner"`
	Collection  OptNftItemCollection `json:"collection"`
	Verified    bool                 `json:"verified"`
	Metadata    NftItemMetadata      `json:"metadata"`
	Sale        OptSale              `json:"sale"`
	Previews    []ImagePreview       `json:"previews"`
	DNS         OptString            `json:"dns"`
	ApprovedBy  NftApprovedBy        `json:"approved_by"`
	IncludeCnft OptBool              `json:"include_cnft"`
}

// GetAddress returns the value of Address.
func (s *NftItem) GetAddress() string {
	return s.Address
}

// GetIndex returns the value of Index.
func (s *NftItem) GetIndex() int64 {
	return s.Index
}

// GetOwner returns the value of Owner.
func (s *NftItem) GetOwner() OptAccountAddress {
	return s.Owner
}

// GetCollection returns the value of Collection.
func (s *NftItem) GetCollection() OptNftItemCollection {
	return s.Collection
}

// GetVerified returns the value of Verified.
func (s *NftItem) GetVerified() bool {
	return s.Verified
}

// GetMetadata returns the value of Metadata.
func (s *NftItem) GetMetadata() NftItemMetadata {
	return s.Metadata
}

// GetSale returns the value of Sale.
func (s *NftItem) GetSale() OptSale {
	return s.Sale
}

// GetPreviews returns the value of Previews.
func (s *NftItem) GetPreviews() []ImagePreview {
	return s.Previews
}

// GetDNS returns the value of DNS.
func (s *NftItem) GetDNS() OptString {
	return s.DNS
}

// GetApprovedBy returns the value of ApprovedBy.
func (s *NftItem) GetApprovedBy() NftApprovedBy {
	return s.ApprovedBy
}

// GetIncludeCnft returns the value of IncludeCnft.
func (s *NftItem) GetIncludeCnft() OptBool {
	return s.IncludeCnft
}

// SetAddress sets the value of Address.
func (s *NftItem) SetAddress(val string) {
	s.Address = val
}

// SetIndex sets the value of Index.
func (s *NftItem) SetIndex(val int64) {
	s.Index = val
}

// SetOwner sets the value of Owner.
func (s *NftItem) SetOwner(val OptAccountAddress) {
	s.Owner = val
}

// SetCollection sets the value of Collection.
func (s *NftItem) SetCollection(val OptNftItemCollection) {
	s.Collection = val
}

// SetVerified sets the value of Verified.
func (s *NftItem) SetVerified(val bool) {
	s.Verified = val
}

// SetMetadata sets the value of Metadata.
func (s *NftItem) SetMetadata(val NftItemMetadata) {
	s.Metadata = val
}

// SetSale sets the value of Sale.
func (s *NftItem) SetSale(val OptSale) {
	s.Sale = val
}

// SetPreviews sets the value of Previews.
func (s *NftItem) SetPreviews(val []ImagePreview) {
	s.Previews = val
}

// SetDNS sets the value of DNS.
func (s *NftItem) SetDNS(val OptString) {
	s.DNS = val
}

// SetApprovedBy sets the value of ApprovedBy.
func (s *NftItem) SetApprovedBy(val NftApprovedBy) {
	s.ApprovedBy = val
}

// SetIncludeCnft sets the value of IncludeCnft.
func (s *NftItem) SetIncludeCnft(val OptBool) {
	s.IncludeCnft = val
}

type NftItemCollection struct {
	Address     string `json:"address"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetAddress returns the value of Address.
func (s *NftItemCollection) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s *NftItemCollection) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NftItemCollection) GetDescription() string {
	return s.Description
}

// SetAddress sets the value of Address.
func (s *NftItemCollection) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *NftItemCollection) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NftItemCollection) SetDescription(val string) {
	s.Description = val
}

type NftItemMetadata map[string]jx.Raw

func (s *NftItemMetadata) init() NftItemMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/NftItemTransferAction
type NftItemTransferAction struct {
	Sender           OptAccountAddress   `json:"sender"`
	Recipient        OptAccountAddress   `json:"recipient"`
	Nft              string              `json:"nft"`
	Comment          OptString           `json:"comment"`
	EncryptedComment OptEncryptedComment `json:"encrypted_comment"`
	// Raw hex encoded payload.
	Payload OptString `json:"payload"`
	Refund  OptRefund `json:"refund"`
}

// GetSender returns the value of Sender.
func (s *NftItemTransferAction) GetSender() OptAccountAddress {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s *NftItemTransferAction) GetRecipient() OptAccountAddress {
	return s.Recipient
}

// GetNft returns the value of Nft.
func (s *NftItemTransferAction) GetNft() string {
	return s.Nft
}

// GetComment returns the value of Comment.
func (s *NftItemTransferAction) GetComment() OptString {
	return s.Comment
}

// GetEncryptedComment returns the value of EncryptedComment.
func (s *NftItemTransferAction) GetEncryptedComment() OptEncryptedComment {
	return s.EncryptedComment
}

// GetPayload returns the value of Payload.
func (s *NftItemTransferAction) GetPayload() OptString {
	return s.Payload
}

// GetRefund returns the value of Refund.
func (s *NftItemTransferAction) GetRefund() OptRefund {
	return s.Refund
}

// SetSender sets the value of Sender.
func (s *NftItemTransferAction) SetSender(val OptAccountAddress) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *NftItemTransferAction) SetRecipient(val OptAccountAddress) {
	s.Recipient = val
}

// SetNft sets the value of Nft.
func (s *NftItemTransferAction) SetNft(val string) {
	s.Nft = val
}

// SetComment sets the value of Comment.
func (s *NftItemTransferAction) SetComment(val OptString) {
	s.Comment = val
}

// SetEncryptedComment sets the value of EncryptedComment.
func (s *NftItemTransferAction) SetEncryptedComment(val OptEncryptedComment) {
	s.EncryptedComment = val
}

// SetPayload sets the value of Payload.
func (s *NftItemTransferAction) SetPayload(val OptString) {
	s.Payload = val
}

// SetRefund sets the value of Refund.
func (s *NftItemTransferAction) SetRefund(val OptRefund) {
	s.Refund = val
}

// Ref: #/components/schemas/NftItems
type NftItems struct {
	NftItems []NftItem `json:"nft_items"`
}

// GetNftItems returns the value of NftItems.
func (s *NftItems) GetNftItems() []NftItem {
	return s.NftItems
}

// SetNftItems sets the value of NftItems.
func (s *NftItems) SetNftItems(val []NftItem) {
	s.NftItems = val
}

// Ref: #/components/schemas/NftPurchaseAction
type NftPurchaseAction struct {
	AuctionType NftPurchaseActionAuctionType `json:"auction_type"`
	Amount      Price                        `json:"amount"`
	Nft         NftItem                      `json:"nft"`
	Seller      AccountAddress               `json:"seller"`
	Buyer       AccountAddress               `json:"buyer"`
}

// GetAuctionType returns the value of AuctionType.
func (s *NftPurchaseAction) GetAuctionType() NftPurchaseActionAuctionType {
	return s.AuctionType
}

// GetAmount returns the value of Amount.
func (s *NftPurchaseAction) GetAmount() Price {
	return s.Amount
}

// GetNft returns the value of Nft.
func (s *NftPurchaseAction) GetNft() NftItem {
	return s.Nft
}

// GetSeller returns the value of Seller.
func (s *NftPurchaseAction) GetSeller() AccountAddress {
	return s.Seller
}

// GetBuyer returns the value of Buyer.
func (s *NftPurchaseAction) GetBuyer() AccountAddress {
	return s.Buyer
}

// SetAuctionType sets the value of AuctionType.
func (s *NftPurchaseAction) SetAuctionType(val NftPurchaseActionAuctionType) {
	s.AuctionType = val
}

// SetAmount sets the value of Amount.
func (s *NftPurchaseAction) SetAmount(val Price) {
	s.Amount = val
}

// SetNft sets the value of Nft.
func (s *NftPurchaseAction) SetNft(val NftItem) {
	s.Nft = val
}

// SetSeller sets the value of Seller.
func (s *NftPurchaseAction) SetSeller(val AccountAddress) {
	s.Seller = val
}

// SetBuyer sets the value of Buyer.
func (s *NftPurchaseAction) SetBuyer(val AccountAddress) {
	s.Buyer = val
}

type NftPurchaseActionAuctionType string

const (
	NftPurchaseActionAuctionTypeDNSTon   NftPurchaseActionAuctionType = "DNS.ton"
	NftPurchaseActionAuctionTypeDNSTg    NftPurchaseActionAuctionType = "DNS.tg"
	NftPurchaseActionAuctionTypeNUMBERTg NftPurchaseActionAuctionType = "NUMBER.tg"
	NftPurchaseActionAuctionTypeGetgems  NftPurchaseActionAuctionType = "getgems"
)

// AllValues returns all NftPurchaseActionAuctionType values.
func (NftPurchaseActionAuctionType) AllValues() []NftPurchaseActionAuctionType {
	return []NftPurchaseActionAuctionType{
		NftPurchaseActionAuctionTypeDNSTon,
		NftPurchaseActionAuctionTypeDNSTg,
		NftPurchaseActionAuctionTypeNUMBERTg,
		NftPurchaseActionAuctionTypeGetgems,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NftPurchaseActionAuctionType) MarshalText() ([]byte, error) {
	switch s {
	case NftPurchaseActionAuctionTypeDNSTon:
		return []byte(s), nil
	case NftPurchaseActionAuctionTypeDNSTg:
		return []byte(s), nil
	case NftPurchaseActionAuctionTypeNUMBERTg:
		return []byte(s), nil
	case NftPurchaseActionAuctionTypeGetgems:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NftPurchaseActionAuctionType) UnmarshalText(data []byte) error {
	switch NftPurchaseActionAuctionType(data) {
	case NftPurchaseActionAuctionTypeDNSTon:
		*s = NftPurchaseActionAuctionTypeDNSTon
		return nil
	case NftPurchaseActionAuctionTypeDNSTg:
		*s = NftPurchaseActionAuctionTypeDNSTg
		return nil
	case NftPurchaseActionAuctionTypeNUMBERTg:
		*s = NftPurchaseActionAuctionTypeNUMBERTg
		return nil
	case NftPurchaseActionAuctionTypeGetgems:
		*s = NftPurchaseActionAuctionTypeGetgems
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptAccountAddress returns new OptAccountAddress with value set to v.
func NewOptAccountAddress(v AccountAddress) OptAccountAddress {
	return OptAccountAddress{
		Value: v,
		Set:   true,
	}
}

// OptAccountAddress is optional AccountAddress.
type OptAccountAddress struct {
	Value AccountAddress
	Set   bool
}

// IsSet returns true if OptAccountAddress was set.
func (o OptAccountAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountAddress) Reset() {
	var v AccountAddress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountAddress) SetTo(v AccountAddress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountAddress) Get() (v AccountAddress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountAddress) Or(d AccountAddress) AccountAddress {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionPhase returns new OptActionPhase with value set to v.
func NewOptActionPhase(v ActionPhase) OptActionPhase {
	return OptActionPhase{
		Value: v,
		Set:   true,
	}
}

// OptActionPhase is optional ActionPhase.
type OptActionPhase struct {
	Value ActionPhase
	Set   bool
}

// IsSet returns true if OptActionPhase was set.
func (o OptActionPhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionPhase) Reset() {
	var v ActionPhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionPhase) SetTo(v ActionPhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionPhase) Get() (v ActionPhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionPhase) Or(d ActionPhase) ActionPhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuctionBidAction returns new OptAuctionBidAction with value set to v.
func NewOptAuctionBidAction(v AuctionBidAction) OptAuctionBidAction {
	return OptAuctionBidAction{
		Value: v,
		Set:   true,
	}
}

// OptAuctionBidAction is optional AuctionBidAction.
type OptAuctionBidAction struct {
	Value AuctionBidAction
	Set   bool
}

// IsSet returns true if OptAuctionBidAction was set.
func (o OptAuctionBidAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuctionBidAction) Reset() {
	var v AuctionBidAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuctionBidAction) SetTo(v AuctionBidAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuctionBidAction) Get() (v AuctionBidAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuctionBidAction) Or(d AuctionBidAction) AuctionBidAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockCurrencyCollection returns new OptBlockCurrencyCollection with value set to v.
func NewOptBlockCurrencyCollection(v BlockCurrencyCollection) OptBlockCurrencyCollection {
	return OptBlockCurrencyCollection{
		Value: v,
		Set:   true,
	}
}

// OptBlockCurrencyCollection is optional BlockCurrencyCollection.
type OptBlockCurrencyCollection struct {
	Value BlockCurrencyCollection
	Set   bool
}

// IsSet returns true if OptBlockCurrencyCollection was set.
func (o OptBlockCurrencyCollection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockCurrencyCollection) Reset() {
	var v BlockCurrencyCollection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockCurrencyCollection) SetTo(v BlockCurrencyCollection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockCurrencyCollection) Get() (v BlockCurrencyCollection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockCurrencyCollection) Or(d BlockCurrencyCollection) BlockCurrencyCollection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainAccountInspectCompiler returns new OptBlockchainAccountInspectCompiler with value set to v.
func NewOptBlockchainAccountInspectCompiler(v BlockchainAccountInspectCompiler) OptBlockchainAccountInspectCompiler {
	return OptBlockchainAccountInspectCompiler{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainAccountInspectCompiler is optional BlockchainAccountInspectCompiler.
type OptBlockchainAccountInspectCompiler struct {
	Value BlockchainAccountInspectCompiler
	Set   bool
}

// IsSet returns true if OptBlockchainAccountInspectCompiler was set.
func (o OptBlockchainAccountInspectCompiler) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainAccountInspectCompiler) Reset() {
	var v BlockchainAccountInspectCompiler
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainAccountInspectCompiler) SetTo(v BlockchainAccountInspectCompiler) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainAccountInspectCompiler) Get() (v BlockchainAccountInspectCompiler, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainAccountInspectCompiler) Or(d BlockchainAccountInspectCompiler) BlockchainAccountInspectCompiler {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig10 returns new OptBlockchainConfig10 with value set to v.
func NewOptBlockchainConfig10(v BlockchainConfig10) OptBlockchainConfig10 {
	return OptBlockchainConfig10{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig10 is optional BlockchainConfig10.
type OptBlockchainConfig10 struct {
	Value BlockchainConfig10
	Set   bool
}

// IsSet returns true if OptBlockchainConfig10 was set.
func (o OptBlockchainConfig10) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig10) Reset() {
	var v BlockchainConfig10
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig10) SetTo(v BlockchainConfig10) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig10) Get() (v BlockchainConfig10, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig10) Or(d BlockchainConfig10) BlockchainConfig10 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig11 returns new OptBlockchainConfig11 with value set to v.
func NewOptBlockchainConfig11(v BlockchainConfig11) OptBlockchainConfig11 {
	return OptBlockchainConfig11{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig11 is optional BlockchainConfig11.
type OptBlockchainConfig11 struct {
	Value BlockchainConfig11
	Set   bool
}

// IsSet returns true if OptBlockchainConfig11 was set.
func (o OptBlockchainConfig11) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig11) Reset() {
	var v BlockchainConfig11
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig11) SetTo(v BlockchainConfig11) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig11) Get() (v BlockchainConfig11, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig11) Or(d BlockchainConfig11) BlockchainConfig11 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig12 returns new OptBlockchainConfig12 with value set to v.
func NewOptBlockchainConfig12(v BlockchainConfig12) OptBlockchainConfig12 {
	return OptBlockchainConfig12{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig12 is optional BlockchainConfig12.
type OptBlockchainConfig12 struct {
	Value BlockchainConfig12
	Set   bool
}

// IsSet returns true if OptBlockchainConfig12 was set.
func (o OptBlockchainConfig12) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig12) Reset() {
	var v BlockchainConfig12
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig12) SetTo(v BlockchainConfig12) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig12) Get() (v BlockchainConfig12, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig12) Or(d BlockchainConfig12) BlockchainConfig12 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig13 returns new OptBlockchainConfig13 with value set to v.
func NewOptBlockchainConfig13(v BlockchainConfig13) OptBlockchainConfig13 {
	return OptBlockchainConfig13{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig13 is optional BlockchainConfig13.
type OptBlockchainConfig13 struct {
	Value BlockchainConfig13
	Set   bool
}

// IsSet returns true if OptBlockchainConfig13 was set.
func (o OptBlockchainConfig13) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig13) Reset() {
	var v BlockchainConfig13
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig13) SetTo(v BlockchainConfig13) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig13) Get() (v BlockchainConfig13, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig13) Or(d BlockchainConfig13) BlockchainConfig13 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig14 returns new OptBlockchainConfig14 with value set to v.
func NewOptBlockchainConfig14(v BlockchainConfig14) OptBlockchainConfig14 {
	return OptBlockchainConfig14{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig14 is optional BlockchainConfig14.
type OptBlockchainConfig14 struct {
	Value BlockchainConfig14
	Set   bool
}

// IsSet returns true if OptBlockchainConfig14 was set.
func (o OptBlockchainConfig14) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig14) Reset() {
	var v BlockchainConfig14
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig14) SetTo(v BlockchainConfig14) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig14) Get() (v BlockchainConfig14, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig14) Or(d BlockchainConfig14) BlockchainConfig14 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig15 returns new OptBlockchainConfig15 with value set to v.
func NewOptBlockchainConfig15(v BlockchainConfig15) OptBlockchainConfig15 {
	return OptBlockchainConfig15{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig15 is optional BlockchainConfig15.
type OptBlockchainConfig15 struct {
	Value BlockchainConfig15
	Set   bool
}

// IsSet returns true if OptBlockchainConfig15 was set.
func (o OptBlockchainConfig15) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig15) Reset() {
	var v BlockchainConfig15
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig15) SetTo(v BlockchainConfig15) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig15) Get() (v BlockchainConfig15, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig15) Or(d BlockchainConfig15) BlockchainConfig15 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig16 returns new OptBlockchainConfig16 with value set to v.
func NewOptBlockchainConfig16(v BlockchainConfig16) OptBlockchainConfig16 {
	return OptBlockchainConfig16{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig16 is optional BlockchainConfig16.
type OptBlockchainConfig16 struct {
	Value BlockchainConfig16
	Set   bool
}

// IsSet returns true if OptBlockchainConfig16 was set.
func (o OptBlockchainConfig16) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig16) Reset() {
	var v BlockchainConfig16
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig16) SetTo(v BlockchainConfig16) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig16) Get() (v BlockchainConfig16, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig16) Or(d BlockchainConfig16) BlockchainConfig16 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig17 returns new OptBlockchainConfig17 with value set to v.
func NewOptBlockchainConfig17(v BlockchainConfig17) OptBlockchainConfig17 {
	return OptBlockchainConfig17{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig17 is optional BlockchainConfig17.
type OptBlockchainConfig17 struct {
	Value BlockchainConfig17
	Set   bool
}

// IsSet returns true if OptBlockchainConfig17 was set.
func (o OptBlockchainConfig17) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig17) Reset() {
	var v BlockchainConfig17
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig17) SetTo(v BlockchainConfig17) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig17) Get() (v BlockchainConfig17, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig17) Or(d BlockchainConfig17) BlockchainConfig17 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig18 returns new OptBlockchainConfig18 with value set to v.
func NewOptBlockchainConfig18(v BlockchainConfig18) OptBlockchainConfig18 {
	return OptBlockchainConfig18{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig18 is optional BlockchainConfig18.
type OptBlockchainConfig18 struct {
	Value BlockchainConfig18
	Set   bool
}

// IsSet returns true if OptBlockchainConfig18 was set.
func (o OptBlockchainConfig18) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig18) Reset() {
	var v BlockchainConfig18
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig18) SetTo(v BlockchainConfig18) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig18) Get() (v BlockchainConfig18, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig18) Or(d BlockchainConfig18) BlockchainConfig18 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig20 returns new OptBlockchainConfig20 with value set to v.
func NewOptBlockchainConfig20(v BlockchainConfig20) OptBlockchainConfig20 {
	return OptBlockchainConfig20{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig20 is optional BlockchainConfig20.
type OptBlockchainConfig20 struct {
	Value BlockchainConfig20
	Set   bool
}

// IsSet returns true if OptBlockchainConfig20 was set.
func (o OptBlockchainConfig20) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig20) Reset() {
	var v BlockchainConfig20
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig20) SetTo(v BlockchainConfig20) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig20) Get() (v BlockchainConfig20, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig20) Or(d BlockchainConfig20) BlockchainConfig20 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig21 returns new OptBlockchainConfig21 with value set to v.
func NewOptBlockchainConfig21(v BlockchainConfig21) OptBlockchainConfig21 {
	return OptBlockchainConfig21{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig21 is optional BlockchainConfig21.
type OptBlockchainConfig21 struct {
	Value BlockchainConfig21
	Set   bool
}

// IsSet returns true if OptBlockchainConfig21 was set.
func (o OptBlockchainConfig21) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig21) Reset() {
	var v BlockchainConfig21
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig21) SetTo(v BlockchainConfig21) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig21) Get() (v BlockchainConfig21, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig21) Or(d BlockchainConfig21) BlockchainConfig21 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig22 returns new OptBlockchainConfig22 with value set to v.
func NewOptBlockchainConfig22(v BlockchainConfig22) OptBlockchainConfig22 {
	return OptBlockchainConfig22{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig22 is optional BlockchainConfig22.
type OptBlockchainConfig22 struct {
	Value BlockchainConfig22
	Set   bool
}

// IsSet returns true if OptBlockchainConfig22 was set.
func (o OptBlockchainConfig22) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig22) Reset() {
	var v BlockchainConfig22
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig22) SetTo(v BlockchainConfig22) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig22) Get() (v BlockchainConfig22, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig22) Or(d BlockchainConfig22) BlockchainConfig22 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig23 returns new OptBlockchainConfig23 with value set to v.
func NewOptBlockchainConfig23(v BlockchainConfig23) OptBlockchainConfig23 {
	return OptBlockchainConfig23{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig23 is optional BlockchainConfig23.
type OptBlockchainConfig23 struct {
	Value BlockchainConfig23
	Set   bool
}

// IsSet returns true if OptBlockchainConfig23 was set.
func (o OptBlockchainConfig23) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig23) Reset() {
	var v BlockchainConfig23
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig23) SetTo(v BlockchainConfig23) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig23) Get() (v BlockchainConfig23, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig23) Or(d BlockchainConfig23) BlockchainConfig23 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig24 returns new OptBlockchainConfig24 with value set to v.
func NewOptBlockchainConfig24(v BlockchainConfig24) OptBlockchainConfig24 {
	return OptBlockchainConfig24{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig24 is optional BlockchainConfig24.
type OptBlockchainConfig24 struct {
	Value BlockchainConfig24
	Set   bool
}

// IsSet returns true if OptBlockchainConfig24 was set.
func (o OptBlockchainConfig24) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig24) Reset() {
	var v BlockchainConfig24
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig24) SetTo(v BlockchainConfig24) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig24) Get() (v BlockchainConfig24, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig24) Or(d BlockchainConfig24) BlockchainConfig24 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig25 returns new OptBlockchainConfig25 with value set to v.
func NewOptBlockchainConfig25(v BlockchainConfig25) OptBlockchainConfig25 {
	return OptBlockchainConfig25{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig25 is optional BlockchainConfig25.
type OptBlockchainConfig25 struct {
	Value BlockchainConfig25
	Set   bool
}

// IsSet returns true if OptBlockchainConfig25 was set.
func (o OptBlockchainConfig25) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig25) Reset() {
	var v BlockchainConfig25
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig25) SetTo(v BlockchainConfig25) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig25) Get() (v BlockchainConfig25, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig25) Or(d BlockchainConfig25) BlockchainConfig25 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig28 returns new OptBlockchainConfig28 with value set to v.
func NewOptBlockchainConfig28(v BlockchainConfig28) OptBlockchainConfig28 {
	return OptBlockchainConfig28{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig28 is optional BlockchainConfig28.
type OptBlockchainConfig28 struct {
	Value BlockchainConfig28
	Set   bool
}

// IsSet returns true if OptBlockchainConfig28 was set.
func (o OptBlockchainConfig28) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig28) Reset() {
	var v BlockchainConfig28
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig28) SetTo(v BlockchainConfig28) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig28) Get() (v BlockchainConfig28, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig28) Or(d BlockchainConfig28) BlockchainConfig28 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig29 returns new OptBlockchainConfig29 with value set to v.
func NewOptBlockchainConfig29(v BlockchainConfig29) OptBlockchainConfig29 {
	return OptBlockchainConfig29{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig29 is optional BlockchainConfig29.
type OptBlockchainConfig29 struct {
	Value BlockchainConfig29
	Set   bool
}

// IsSet returns true if OptBlockchainConfig29 was set.
func (o OptBlockchainConfig29) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig29) Reset() {
	var v BlockchainConfig29
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig29) SetTo(v BlockchainConfig29) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig29) Get() (v BlockchainConfig29, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig29) Or(d BlockchainConfig29) BlockchainConfig29 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig31 returns new OptBlockchainConfig31 with value set to v.
func NewOptBlockchainConfig31(v BlockchainConfig31) OptBlockchainConfig31 {
	return OptBlockchainConfig31{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig31 is optional BlockchainConfig31.
type OptBlockchainConfig31 struct {
	Value BlockchainConfig31
	Set   bool
}

// IsSet returns true if OptBlockchainConfig31 was set.
func (o OptBlockchainConfig31) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig31) Reset() {
	var v BlockchainConfig31
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig31) SetTo(v BlockchainConfig31) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig31) Get() (v BlockchainConfig31, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig31) Or(d BlockchainConfig31) BlockchainConfig31 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig40 returns new OptBlockchainConfig40 with value set to v.
func NewOptBlockchainConfig40(v BlockchainConfig40) OptBlockchainConfig40 {
	return OptBlockchainConfig40{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig40 is optional BlockchainConfig40.
type OptBlockchainConfig40 struct {
	Value BlockchainConfig40
	Set   bool
}

// IsSet returns true if OptBlockchainConfig40 was set.
func (o OptBlockchainConfig40) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig40) Reset() {
	var v BlockchainConfig40
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig40) SetTo(v BlockchainConfig40) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig40) Get() (v BlockchainConfig40, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig40) Or(d BlockchainConfig40) BlockchainConfig40 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig43 returns new OptBlockchainConfig43 with value set to v.
func NewOptBlockchainConfig43(v BlockchainConfig43) OptBlockchainConfig43 {
	return OptBlockchainConfig43{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig43 is optional BlockchainConfig43.
type OptBlockchainConfig43 struct {
	Value BlockchainConfig43
	Set   bool
}

// IsSet returns true if OptBlockchainConfig43 was set.
func (o OptBlockchainConfig43) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig43) Reset() {
	var v BlockchainConfig43
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig43) SetTo(v BlockchainConfig43) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig43) Get() (v BlockchainConfig43, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig43) Or(d BlockchainConfig43) BlockchainConfig43 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig5 returns new OptBlockchainConfig5 with value set to v.
func NewOptBlockchainConfig5(v BlockchainConfig5) OptBlockchainConfig5 {
	return OptBlockchainConfig5{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig5 is optional BlockchainConfig5.
type OptBlockchainConfig5 struct {
	Value BlockchainConfig5
	Set   bool
}

// IsSet returns true if OptBlockchainConfig5 was set.
func (o OptBlockchainConfig5) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig5) Reset() {
	var v BlockchainConfig5
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig5) SetTo(v BlockchainConfig5) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig5) Get() (v BlockchainConfig5, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig5) Or(d BlockchainConfig5) BlockchainConfig5 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig6 returns new OptBlockchainConfig6 with value set to v.
func NewOptBlockchainConfig6(v BlockchainConfig6) OptBlockchainConfig6 {
	return OptBlockchainConfig6{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig6 is optional BlockchainConfig6.
type OptBlockchainConfig6 struct {
	Value BlockchainConfig6
	Set   bool
}

// IsSet returns true if OptBlockchainConfig6 was set.
func (o OptBlockchainConfig6) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig6) Reset() {
	var v BlockchainConfig6
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig6) SetTo(v BlockchainConfig6) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig6) Get() (v BlockchainConfig6, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig6) Or(d BlockchainConfig6) BlockchainConfig6 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig7 returns new OptBlockchainConfig7 with value set to v.
func NewOptBlockchainConfig7(v BlockchainConfig7) OptBlockchainConfig7 {
	return OptBlockchainConfig7{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig7 is optional BlockchainConfig7.
type OptBlockchainConfig7 struct {
	Value BlockchainConfig7
	Set   bool
}

// IsSet returns true if OptBlockchainConfig7 was set.
func (o OptBlockchainConfig7) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig7) Reset() {
	var v BlockchainConfig7
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig7) SetTo(v BlockchainConfig7) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig7) Get() (v BlockchainConfig7, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig7) Or(d BlockchainConfig7) BlockchainConfig7 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig71 returns new OptBlockchainConfig71 with value set to v.
func NewOptBlockchainConfig71(v BlockchainConfig71) OptBlockchainConfig71 {
	return OptBlockchainConfig71{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig71 is optional BlockchainConfig71.
type OptBlockchainConfig71 struct {
	Value BlockchainConfig71
	Set   bool
}

// IsSet returns true if OptBlockchainConfig71 was set.
func (o OptBlockchainConfig71) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig71) Reset() {
	var v BlockchainConfig71
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig71) SetTo(v BlockchainConfig71) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig71) Get() (v BlockchainConfig71, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig71) Or(d BlockchainConfig71) BlockchainConfig71 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig72 returns new OptBlockchainConfig72 with value set to v.
func NewOptBlockchainConfig72(v BlockchainConfig72) OptBlockchainConfig72 {
	return OptBlockchainConfig72{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig72 is optional BlockchainConfig72.
type OptBlockchainConfig72 struct {
	Value BlockchainConfig72
	Set   bool
}

// IsSet returns true if OptBlockchainConfig72 was set.
func (o OptBlockchainConfig72) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig72) Reset() {
	var v BlockchainConfig72
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig72) SetTo(v BlockchainConfig72) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig72) Get() (v BlockchainConfig72, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig72) Or(d BlockchainConfig72) BlockchainConfig72 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig73 returns new OptBlockchainConfig73 with value set to v.
func NewOptBlockchainConfig73(v BlockchainConfig73) OptBlockchainConfig73 {
	return OptBlockchainConfig73{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig73 is optional BlockchainConfig73.
type OptBlockchainConfig73 struct {
	Value BlockchainConfig73
	Set   bool
}

// IsSet returns true if OptBlockchainConfig73 was set.
func (o OptBlockchainConfig73) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig73) Reset() {
	var v BlockchainConfig73
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig73) SetTo(v BlockchainConfig73) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig73) Get() (v BlockchainConfig73, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig73) Or(d BlockchainConfig73) BlockchainConfig73 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig79 returns new OptBlockchainConfig79 with value set to v.
func NewOptBlockchainConfig79(v BlockchainConfig79) OptBlockchainConfig79 {
	return OptBlockchainConfig79{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig79 is optional BlockchainConfig79.
type OptBlockchainConfig79 struct {
	Value BlockchainConfig79
	Set   bool
}

// IsSet returns true if OptBlockchainConfig79 was set.
func (o OptBlockchainConfig79) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig79) Reset() {
	var v BlockchainConfig79
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig79) SetTo(v BlockchainConfig79) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig79) Get() (v BlockchainConfig79, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig79) Or(d BlockchainConfig79) BlockchainConfig79 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig8 returns new OptBlockchainConfig8 with value set to v.
func NewOptBlockchainConfig8(v BlockchainConfig8) OptBlockchainConfig8 {
	return OptBlockchainConfig8{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig8 is optional BlockchainConfig8.
type OptBlockchainConfig8 struct {
	Value BlockchainConfig8
	Set   bool
}

// IsSet returns true if OptBlockchainConfig8 was set.
func (o OptBlockchainConfig8) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig8) Reset() {
	var v BlockchainConfig8
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig8) SetTo(v BlockchainConfig8) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig8) Get() (v BlockchainConfig8, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig8) Or(d BlockchainConfig8) BlockchainConfig8 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig81 returns new OptBlockchainConfig81 with value set to v.
func NewOptBlockchainConfig81(v BlockchainConfig81) OptBlockchainConfig81 {
	return OptBlockchainConfig81{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig81 is optional BlockchainConfig81.
type OptBlockchainConfig81 struct {
	Value BlockchainConfig81
	Set   bool
}

// IsSet returns true if OptBlockchainConfig81 was set.
func (o OptBlockchainConfig81) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig81) Reset() {
	var v BlockchainConfig81
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig81) SetTo(v BlockchainConfig81) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig81) Get() (v BlockchainConfig81, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig81) Or(d BlockchainConfig81) BlockchainConfig81 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig82 returns new OptBlockchainConfig82 with value set to v.
func NewOptBlockchainConfig82(v BlockchainConfig82) OptBlockchainConfig82 {
	return OptBlockchainConfig82{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig82 is optional BlockchainConfig82.
type OptBlockchainConfig82 struct {
	Value BlockchainConfig82
	Set   bool
}

// IsSet returns true if OptBlockchainConfig82 was set.
func (o OptBlockchainConfig82) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig82) Reset() {
	var v BlockchainConfig82
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig82) SetTo(v BlockchainConfig82) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig82) Get() (v BlockchainConfig82, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig82) Or(d BlockchainConfig82) BlockchainConfig82 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainConfig9 returns new OptBlockchainConfig9 with value set to v.
func NewOptBlockchainConfig9(v BlockchainConfig9) OptBlockchainConfig9 {
	return OptBlockchainConfig9{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainConfig9 is optional BlockchainConfig9.
type OptBlockchainConfig9 struct {
	Value BlockchainConfig9
	Set   bool
}

// IsSet returns true if OptBlockchainConfig9 was set.
func (o OptBlockchainConfig9) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainConfig9) Reset() {
	var v BlockchainConfig9
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainConfig9) SetTo(v BlockchainConfig9) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainConfig9) Get() (v BlockchainConfig9, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainConfig9) Or(d BlockchainConfig9) BlockchainConfig9 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBlockchainRawAccountExtraBalance returns new OptBlockchainRawAccountExtraBalance with value set to v.
func NewOptBlockchainRawAccountExtraBalance(v BlockchainRawAccountExtraBalance) OptBlockchainRawAccountExtraBalance {
	return OptBlockchainRawAccountExtraBalance{
		Value: v,
		Set:   true,
	}
}

// OptBlockchainRawAccountExtraBalance is optional BlockchainRawAccountExtraBalance.
type OptBlockchainRawAccountExtraBalance struct {
	Value BlockchainRawAccountExtraBalance
	Set   bool
}

// IsSet returns true if OptBlockchainRawAccountExtraBalance was set.
func (o OptBlockchainRawAccountExtraBalance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBlockchainRawAccountExtraBalance) Reset() {
	var v BlockchainRawAccountExtraBalance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBlockchainRawAccountExtraBalance) SetTo(v BlockchainRawAccountExtraBalance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBlockchainRawAccountExtraBalance) Get() (v BlockchainRawAccountExtraBalance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBlockchainRawAccountExtraBalance) Or(d BlockchainRawAccountExtraBalance) BlockchainRawAccountExtraBalance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBouncePhaseType returns new OptBouncePhaseType with value set to v.
func NewOptBouncePhaseType(v BouncePhaseType) OptBouncePhaseType {
	return OptBouncePhaseType{
		Value: v,
		Set:   true,
	}
}

// OptBouncePhaseType is optional BouncePhaseType.
type OptBouncePhaseType struct {
	Value BouncePhaseType
	Set   bool
}

// IsSet returns true if OptBouncePhaseType was set.
func (o OptBouncePhaseType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBouncePhaseType) Reset() {
	var v BouncePhaseType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBouncePhaseType) SetTo(v BouncePhaseType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBouncePhaseType) Get() (v BouncePhaseType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBouncePhaseType) Or(d BouncePhaseType) BouncePhaseType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptComputePhase returns new OptComputePhase with value set to v.
func NewOptComputePhase(v ComputePhase) OptComputePhase {
	return OptComputePhase{
		Value: v,
		Set:   true,
	}
}

// OptComputePhase is optional ComputePhase.
type OptComputePhase struct {
	Value ComputePhase
	Set   bool
}

// IsSet returns true if OptComputePhase was set.
func (o OptComputePhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptComputePhase) Reset() {
	var v ComputePhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptComputePhase) SetTo(v ComputePhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptComputePhase) Get() (v ComputePhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptComputePhase) Or(d ComputePhase) ComputePhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptComputeSkipReason returns new OptComputeSkipReason with value set to v.
func NewOptComputeSkipReason(v ComputeSkipReason) OptComputeSkipReason {
	return OptComputeSkipReason{
		Value: v,
		Set:   true,
	}
}

// OptComputeSkipReason is optional ComputeSkipReason.
type OptComputeSkipReason struct {
	Value ComputeSkipReason
	Set   bool
}

// IsSet returns true if OptComputeSkipReason was set.
func (o OptComputeSkipReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptComputeSkipReason) Reset() {
	var v ComputeSkipReason
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptComputeSkipReason) SetTo(v ComputeSkipReason) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptComputeSkipReason) Get() (v ComputeSkipReason, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptComputeSkipReason) Or(d ComputeSkipReason) ComputeSkipReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractDeployAction returns new OptContractDeployAction with value set to v.
func NewOptContractDeployAction(v ContractDeployAction) OptContractDeployAction {
	return OptContractDeployAction{
		Value: v,
		Set:   true,
	}
}

// OptContractDeployAction is optional ContractDeployAction.
type OptContractDeployAction struct {
	Value ContractDeployAction
	Set   bool
}

// IsSet returns true if OptContractDeployAction was set.
func (o OptContractDeployAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractDeployAction) Reset() {
	var v ContractDeployAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractDeployAction) SetTo(v ContractDeployAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractDeployAction) Get() (v ContractDeployAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractDeployAction) Or(d ContractDeployAction) ContractDeployAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreditPhase returns new OptCreditPhase with value set to v.
func NewOptCreditPhase(v CreditPhase) OptCreditPhase {
	return OptCreditPhase{
		Value: v,
		Set:   true,
	}
}

// OptCreditPhase is optional CreditPhase.
type OptCreditPhase struct {
	Value CreditPhase
	Set   bool
}

// IsSet returns true if OptCreditPhase was set.
func (o OptCreditPhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreditPhase) Reset() {
	var v CreditPhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreditPhase) SetTo(v CreditPhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreditPhase) Get() (v CreditPhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreditPhase) Or(d CreditPhase) CreditPhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDecodedMessageExtInMsgDecoded returns new OptDecodedMessageExtInMsgDecoded with value set to v.
func NewOptDecodedMessageExtInMsgDecoded(v DecodedMessageExtInMsgDecoded) OptDecodedMessageExtInMsgDecoded {
	return OptDecodedMessageExtInMsgDecoded{
		Value: v,
		Set:   true,
	}
}

// OptDecodedMessageExtInMsgDecoded is optional DecodedMessageExtInMsgDecoded.
type OptDecodedMessageExtInMsgDecoded struct {
	Value DecodedMessageExtInMsgDecoded
	Set   bool
}

// IsSet returns true if OptDecodedMessageExtInMsgDecoded was set.
func (o OptDecodedMessageExtInMsgDecoded) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDecodedMessageExtInMsgDecoded) Reset() {
	var v DecodedMessageExtInMsgDecoded
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDecodedMessageExtInMsgDecoded) SetTo(v DecodedMessageExtInMsgDecoded) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDecodedMessageExtInMsgDecoded) Get() (v DecodedMessageExtInMsgDecoded, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDecodedMessageExtInMsgDecoded) Or(d DecodedMessageExtInMsgDecoded) DecodedMessageExtInMsgDecoded {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDecodedMessageExtInMsgDecodedWalletHighloadV2 returns new OptDecodedMessageExtInMsgDecodedWalletHighloadV2 with value set to v.
func NewOptDecodedMessageExtInMsgDecodedWalletHighloadV2(v DecodedMessageExtInMsgDecodedWalletHighloadV2) OptDecodedMessageExtInMsgDecodedWalletHighloadV2 {
	return OptDecodedMessageExtInMsgDecodedWalletHighloadV2{
		Value: v,
		Set:   true,
	}
}

// OptDecodedMessageExtInMsgDecodedWalletHighloadV2 is optional DecodedMessageExtInMsgDecodedWalletHighloadV2.
type OptDecodedMessageExtInMsgDecodedWalletHighloadV2 struct {
	Value DecodedMessageExtInMsgDecodedWalletHighloadV2
	Set   bool
}

// IsSet returns true if OptDecodedMessageExtInMsgDecodedWalletHighloadV2 was set.
func (o OptDecodedMessageExtInMsgDecodedWalletHighloadV2) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDecodedMessageExtInMsgDecodedWalletHighloadV2) Reset() {
	var v DecodedMessageExtInMsgDecodedWalletHighloadV2
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDecodedMessageExtInMsgDecodedWalletHighloadV2) SetTo(v DecodedMessageExtInMsgDecodedWalletHighloadV2) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDecodedMessageExtInMsgDecodedWalletHighloadV2) Get() (v DecodedMessageExtInMsgDecodedWalletHighloadV2, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDecodedMessageExtInMsgDecodedWalletHighloadV2) Or(d DecodedMessageExtInMsgDecodedWalletHighloadV2) DecodedMessageExtInMsgDecodedWalletHighloadV2 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDecodedMessageExtInMsgDecodedWalletV3 returns new OptDecodedMessageExtInMsgDecodedWalletV3 with value set to v.
func NewOptDecodedMessageExtInMsgDecodedWalletV3(v DecodedMessageExtInMsgDecodedWalletV3) OptDecodedMessageExtInMsgDecodedWalletV3 {
	return OptDecodedMessageExtInMsgDecodedWalletV3{
		Value: v,
		Set:   true,
	}
}

// OptDecodedMessageExtInMsgDecodedWalletV3 is optional DecodedMessageExtInMsgDecodedWalletV3.
type OptDecodedMessageExtInMsgDecodedWalletV3 struct {
	Value DecodedMessageExtInMsgDecodedWalletV3
	Set   bool
}

// IsSet returns true if OptDecodedMessageExtInMsgDecodedWalletV3 was set.
func (o OptDecodedMessageExtInMsgDecodedWalletV3) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDecodedMessageExtInMsgDecodedWalletV3) Reset() {
	var v DecodedMessageExtInMsgDecodedWalletV3
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDecodedMessageExtInMsgDecodedWalletV3) SetTo(v DecodedMessageExtInMsgDecodedWalletV3) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDecodedMessageExtInMsgDecodedWalletV3) Get() (v DecodedMessageExtInMsgDecodedWalletV3, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDecodedMessageExtInMsgDecodedWalletV3) Or(d DecodedMessageExtInMsgDecodedWalletV3) DecodedMessageExtInMsgDecodedWalletV3 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDecodedMessageExtInMsgDecodedWalletV4 returns new OptDecodedMessageExtInMsgDecodedWalletV4 with value set to v.
func NewOptDecodedMessageExtInMsgDecodedWalletV4(v DecodedMessageExtInMsgDecodedWalletV4) OptDecodedMessageExtInMsgDecodedWalletV4 {
	return OptDecodedMessageExtInMsgDecodedWalletV4{
		Value: v,
		Set:   true,
	}
}

// OptDecodedMessageExtInMsgDecodedWalletV4 is optional DecodedMessageExtInMsgDecodedWalletV4.
type OptDecodedMessageExtInMsgDecodedWalletV4 struct {
	Value DecodedMessageExtInMsgDecodedWalletV4
	Set   bool
}

// IsSet returns true if OptDecodedMessageExtInMsgDecodedWalletV4 was set.
func (o OptDecodedMessageExtInMsgDecodedWalletV4) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDecodedMessageExtInMsgDecodedWalletV4) Reset() {
	var v DecodedMessageExtInMsgDecodedWalletV4
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDecodedMessageExtInMsgDecodedWalletV4) SetTo(v DecodedMessageExtInMsgDecodedWalletV4) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDecodedMessageExtInMsgDecodedWalletV4) Get() (v DecodedMessageExtInMsgDecodedWalletV4, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDecodedMessageExtInMsgDecodedWalletV4) Or(d DecodedMessageExtInMsgDecodedWalletV4) DecodedMessageExtInMsgDecodedWalletV4 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDepositStakeAction returns new OptDepositStakeAction with value set to v.
func NewOptDepositStakeAction(v DepositStakeAction) OptDepositStakeAction {
	return OptDepositStakeAction{
		Value: v,
		Set:   true,
	}
}

// OptDepositStakeAction is optional DepositStakeAction.
type OptDepositStakeAction struct {
	Value DepositStakeAction
	Set   bool
}

// IsSet returns true if OptDepositStakeAction was set.
func (o OptDepositStakeAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDepositStakeAction) Reset() {
	var v DepositStakeAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDepositStakeAction) SetTo(v DepositStakeAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDepositStakeAction) Get() (v DepositStakeAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDepositStakeAction) Or(d DepositStakeAction) DepositStakeAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainRenewAction returns new OptDomainRenewAction with value set to v.
func NewOptDomainRenewAction(v DomainRenewAction) OptDomainRenewAction {
	return OptDomainRenewAction{
		Value: v,
		Set:   true,
	}
}

// OptDomainRenewAction is optional DomainRenewAction.
type OptDomainRenewAction struct {
	Value DomainRenewAction
	Set   bool
}

// IsSet returns true if OptDomainRenewAction was set.
func (o OptDomainRenewAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainRenewAction) Reset() {
	var v DomainRenewAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainRenewAction) SetTo(v DomainRenewAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainRenewAction) Get() (v DomainRenewAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainRenewAction) Or(d DomainRenewAction) DomainRenewAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptElectionsDepositStakeAction returns new OptElectionsDepositStakeAction with value set to v.
func NewOptElectionsDepositStakeAction(v ElectionsDepositStakeAction) OptElectionsDepositStakeAction {
	return OptElectionsDepositStakeAction{
		Value: v,
		Set:   true,
	}
}

// OptElectionsDepositStakeAction is optional ElectionsDepositStakeAction.
type OptElectionsDepositStakeAction struct {
	Value ElectionsDepositStakeAction
	Set   bool
}

// IsSet returns true if OptElectionsDepositStakeAction was set.
func (o OptElectionsDepositStakeAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptElectionsDepositStakeAction) Reset() {
	var v ElectionsDepositStakeAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptElectionsDepositStakeAction) SetTo(v ElectionsDepositStakeAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptElectionsDepositStakeAction) Get() (v ElectionsDepositStakeAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptElectionsDepositStakeAction) Or(d ElectionsDepositStakeAction) ElectionsDepositStakeAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptElectionsRecoverStakeAction returns new OptElectionsRecoverStakeAction with value set to v.
func NewOptElectionsRecoverStakeAction(v ElectionsRecoverStakeAction) OptElectionsRecoverStakeAction {
	return OptElectionsRecoverStakeAction{
		Value: v,
		Set:   true,
	}
}

// OptElectionsRecoverStakeAction is optional ElectionsRecoverStakeAction.
type OptElectionsRecoverStakeAction struct {
	Value ElectionsRecoverStakeAction
	Set   bool
}

// IsSet returns true if OptElectionsRecoverStakeAction was set.
func (o OptElectionsRecoverStakeAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptElectionsRecoverStakeAction) Reset() {
	var v ElectionsRecoverStakeAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptElectionsRecoverStakeAction) SetTo(v ElectionsRecoverStakeAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptElectionsRecoverStakeAction) Get() (v ElectionsRecoverStakeAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptElectionsRecoverStakeAction) Or(d ElectionsRecoverStakeAction) ElectionsRecoverStakeAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEncryptedComment returns new OptEncryptedComment with value set to v.
func NewOptEncryptedComment(v EncryptedComment) OptEncryptedComment {
	return OptEncryptedComment{
		Value: v,
		Set:   true,
	}
}

// OptEncryptedComment is optional EncryptedComment.
type OptEncryptedComment struct {
	Value EncryptedComment
	Set   bool
}

// IsSet returns true if OptEncryptedComment was set.
func (o OptEncryptedComment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEncryptedComment) Reset() {
	var v EncryptedComment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEncryptedComment) SetTo(v EncryptedComment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEncryptedComment) Get() (v EncryptedComment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEncryptedComment) Or(d EncryptedComment) EncryptedComment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountsReq returns new OptGetAccountsReq with value set to v.
func NewOptGetAccountsReq(v GetAccountsReq) OptGetAccountsReq {
	return OptGetAccountsReq{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountsReq is optional GetAccountsReq.
type OptGetAccountsReq struct {
	Value GetAccountsReq
	Set   bool
}

// IsSet returns true if OptGetAccountsReq was set.
func (o OptGetAccountsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountsReq) Reset() {
	var v GetAccountsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountsReq) SetTo(v GetAccountsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountsReq) Get() (v GetAccountsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountsReq) Or(d GetAccountsReq) GetAccountsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBlockchainAccountTransactionsSortOrder returns new OptGetBlockchainAccountTransactionsSortOrder with value set to v.
func NewOptGetBlockchainAccountTransactionsSortOrder(v GetBlockchainAccountTransactionsSortOrder) OptGetBlockchainAccountTransactionsSortOrder {
	return OptGetBlockchainAccountTransactionsSortOrder{
		Value: v,
		Set:   true,
	}
}

// OptGetBlockchainAccountTransactionsSortOrder is optional GetBlockchainAccountTransactionsSortOrder.
type OptGetBlockchainAccountTransactionsSortOrder struct {
	Value GetBlockchainAccountTransactionsSortOrder
	Set   bool
}

// IsSet returns true if OptGetBlockchainAccountTransactionsSortOrder was set.
func (o OptGetBlockchainAccountTransactionsSortOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBlockchainAccountTransactionsSortOrder) Reset() {
	var v GetBlockchainAccountTransactionsSortOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBlockchainAccountTransactionsSortOrder) SetTo(v GetBlockchainAccountTransactionsSortOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBlockchainAccountTransactionsSortOrder) Get() (v GetBlockchainAccountTransactionsSortOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBlockchainAccountTransactionsSortOrder) Or(d GetBlockchainAccountTransactionsSortOrder) GetBlockchainAccountTransactionsSortOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNftItemsByAddressesReq returns new OptGetNftItemsByAddressesReq with value set to v.
func NewOptGetNftItemsByAddressesReq(v GetNftItemsByAddressesReq) OptGetNftItemsByAddressesReq {
	return OptGetNftItemsByAddressesReq{
		Value: v,
		Set:   true,
	}
}

// OptGetNftItemsByAddressesReq is optional GetNftItemsByAddressesReq.
type OptGetNftItemsByAddressesReq struct {
	Value GetNftItemsByAddressesReq
	Set   bool
}

// IsSet returns true if OptGetNftItemsByAddressesReq was set.
func (o OptGetNftItemsByAddressesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNftItemsByAddressesReq) Reset() {
	var v GetNftItemsByAddressesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNftItemsByAddressesReq) SetTo(v GetNftItemsByAddressesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNftItemsByAddressesReq) Get() (v GetNftItemsByAddressesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNftItemsByAddressesReq) Or(d GetNftItemsByAddressesReq) GetNftItemsByAddressesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInscriptionMintAction returns new OptInscriptionMintAction with value set to v.
func NewOptInscriptionMintAction(v InscriptionMintAction) OptInscriptionMintAction {
	return OptInscriptionMintAction{
		Value: v,
		Set:   true,
	}
}

// OptInscriptionMintAction is optional InscriptionMintAction.
type OptInscriptionMintAction struct {
	Value InscriptionMintAction
	Set   bool
}

// IsSet returns true if OptInscriptionMintAction was set.
func (o OptInscriptionMintAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInscriptionMintAction) Reset() {
	var v InscriptionMintAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInscriptionMintAction) SetTo(v InscriptionMintAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInscriptionMintAction) Get() (v InscriptionMintAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInscriptionMintAction) Or(d InscriptionMintAction) InscriptionMintAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInscriptionTransferAction returns new OptInscriptionTransferAction with value set to v.
func NewOptInscriptionTransferAction(v InscriptionTransferAction) OptInscriptionTransferAction {
	return OptInscriptionTransferAction{
		Value: v,
		Set:   true,
	}
}

// OptInscriptionTransferAction is optional InscriptionTransferAction.
type OptInscriptionTransferAction struct {
	Value InscriptionTransferAction
	Set   bool
}

// IsSet returns true if OptInscriptionTransferAction was set.
func (o OptInscriptionTransferAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInscriptionTransferAction) Reset() {
	var v InscriptionTransferAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInscriptionTransferAction) SetTo(v InscriptionTransferAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInscriptionTransferAction) Get() (v InscriptionTransferAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInscriptionTransferAction) Or(d InscriptionTransferAction) InscriptionTransferAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonBalanceLock returns new OptJettonBalanceLock with value set to v.
func NewOptJettonBalanceLock(v JettonBalanceLock) OptJettonBalanceLock {
	return OptJettonBalanceLock{
		Value: v,
		Set:   true,
	}
}

// OptJettonBalanceLock is optional JettonBalanceLock.
type OptJettonBalanceLock struct {
	Value JettonBalanceLock
	Set   bool
}

// IsSet returns true if OptJettonBalanceLock was set.
func (o OptJettonBalanceLock) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonBalanceLock) Reset() {
	var v JettonBalanceLock
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonBalanceLock) SetTo(v JettonBalanceLock) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonBalanceLock) Get() (v JettonBalanceLock, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonBalanceLock) Or(d JettonBalanceLock) JettonBalanceLock {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonBridgePrices returns new OptJettonBridgePrices with value set to v.
func NewOptJettonBridgePrices(v JettonBridgePrices) OptJettonBridgePrices {
	return OptJettonBridgePrices{
		Value: v,
		Set:   true,
	}
}

// OptJettonBridgePrices is optional JettonBridgePrices.
type OptJettonBridgePrices struct {
	Value JettonBridgePrices
	Set   bool
}

// IsSet returns true if OptJettonBridgePrices was set.
func (o OptJettonBridgePrices) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonBridgePrices) Reset() {
	var v JettonBridgePrices
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonBridgePrices) SetTo(v JettonBridgePrices) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonBridgePrices) Get() (v JettonBridgePrices, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonBridgePrices) Or(d JettonBridgePrices) JettonBridgePrices {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonBurnAction returns new OptJettonBurnAction with value set to v.
func NewOptJettonBurnAction(v JettonBurnAction) OptJettonBurnAction {
	return OptJettonBurnAction{
		Value: v,
		Set:   true,
	}
}

// OptJettonBurnAction is optional JettonBurnAction.
type OptJettonBurnAction struct {
	Value JettonBurnAction
	Set   bool
}

// IsSet returns true if OptJettonBurnAction was set.
func (o OptJettonBurnAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonBurnAction) Reset() {
	var v JettonBurnAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonBurnAction) SetTo(v JettonBurnAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonBurnAction) Get() (v JettonBurnAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonBurnAction) Or(d JettonBurnAction) JettonBurnAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonMintAction returns new OptJettonMintAction with value set to v.
func NewOptJettonMintAction(v JettonMintAction) OptJettonMintAction {
	return OptJettonMintAction{
		Value: v,
		Set:   true,
	}
}

// OptJettonMintAction is optional JettonMintAction.
type OptJettonMintAction struct {
	Value JettonMintAction
	Set   bool
}

// IsSet returns true if OptJettonMintAction was set.
func (o OptJettonMintAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonMintAction) Reset() {
	var v JettonMintAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonMintAction) SetTo(v JettonMintAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonMintAction) Get() (v JettonMintAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonMintAction) Or(d JettonMintAction) JettonMintAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonPreview returns new OptJettonPreview with value set to v.
func NewOptJettonPreview(v JettonPreview) OptJettonPreview {
	return OptJettonPreview{
		Value: v,
		Set:   true,
	}
}

// OptJettonPreview is optional JettonPreview.
type OptJettonPreview struct {
	Value JettonPreview
	Set   bool
}

// IsSet returns true if OptJettonPreview was set.
func (o OptJettonPreview) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonPreview) Reset() {
	var v JettonPreview
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonPreview) SetTo(v JettonPreview) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonPreview) Get() (v JettonPreview, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonPreview) Or(d JettonPreview) JettonPreview {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonSwapAction returns new OptJettonSwapAction with value set to v.
func NewOptJettonSwapAction(v JettonSwapAction) OptJettonSwapAction {
	return OptJettonSwapAction{
		Value: v,
		Set:   true,
	}
}

// OptJettonSwapAction is optional JettonSwapAction.
type OptJettonSwapAction struct {
	Value JettonSwapAction
	Set   bool
}

// IsSet returns true if OptJettonSwapAction was set.
func (o OptJettonSwapAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonSwapAction) Reset() {
	var v JettonSwapAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonSwapAction) SetTo(v JettonSwapAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonSwapAction) Get() (v JettonSwapAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonSwapAction) Or(d JettonSwapAction) JettonSwapAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettonTransferAction returns new OptJettonTransferAction with value set to v.
func NewOptJettonTransferAction(v JettonTransferAction) OptJettonTransferAction {
	return OptJettonTransferAction{
		Value: v,
		Set:   true,
	}
}

// OptJettonTransferAction is optional JettonTransferAction.
type OptJettonTransferAction struct {
	Value JettonTransferAction
	Set   bool
}

// IsSet returns true if OptJettonTransferAction was set.
func (o OptJettonTransferAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettonTransferAction) Reset() {
	var v JettonTransferAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettonTransferAction) SetTo(v JettonTransferAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettonTransferAction) Get() (v JettonTransferAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettonTransferAction) Or(d JettonTransferAction) JettonTransferAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessage returns new OptMessage with value set to v.
func NewOptMessage(v Message) OptMessage {
	return OptMessage{
		Value: v,
		Set:   true,
	}
}

// OptMessage is optional Message.
type OptMessage struct {
	Value Message
	Set   bool
}

// IsSet returns true if OptMessage was set.
func (o OptMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessage) Reset() {
	var v Message
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessage) SetTo(v Message) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessage) Get() (v Message, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessage) Or(d Message) Message {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftCollectionMetadata returns new OptNftCollectionMetadata with value set to v.
func NewOptNftCollectionMetadata(v NftCollectionMetadata) OptNftCollectionMetadata {
	return OptNftCollectionMetadata{
		Value: v,
		Set:   true,
	}
}

// OptNftCollectionMetadata is optional NftCollectionMetadata.
type OptNftCollectionMetadata struct {
	Value NftCollectionMetadata
	Set   bool
}

// IsSet returns true if OptNftCollectionMetadata was set.
func (o OptNftCollectionMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftCollectionMetadata) Reset() {
	var v NftCollectionMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftCollectionMetadata) SetTo(v NftCollectionMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftCollectionMetadata) Get() (v NftCollectionMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftCollectionMetadata) Or(d NftCollectionMetadata) NftCollectionMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftItem returns new OptNftItem with value set to v.
func NewOptNftItem(v NftItem) OptNftItem {
	return OptNftItem{
		Value: v,
		Set:   true,
	}
}

// OptNftItem is optional NftItem.
type OptNftItem struct {
	Value NftItem
	Set   bool
}

// IsSet returns true if OptNftItem was set.
func (o OptNftItem) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftItem) Reset() {
	var v NftItem
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftItem) SetTo(v NftItem) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftItem) Get() (v NftItem, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftItem) Or(d NftItem) NftItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftItemCollection returns new OptNftItemCollection with value set to v.
func NewOptNftItemCollection(v NftItemCollection) OptNftItemCollection {
	return OptNftItemCollection{
		Value: v,
		Set:   true,
	}
}

// OptNftItemCollection is optional NftItemCollection.
type OptNftItemCollection struct {
	Value NftItemCollection
	Set   bool
}

// IsSet returns true if OptNftItemCollection was set.
func (o OptNftItemCollection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftItemCollection) Reset() {
	var v NftItemCollection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftItemCollection) SetTo(v NftItemCollection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftItemCollection) Get() (v NftItemCollection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftItemCollection) Or(d NftItemCollection) NftItemCollection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftItemTransferAction returns new OptNftItemTransferAction with value set to v.
func NewOptNftItemTransferAction(v NftItemTransferAction) OptNftItemTransferAction {
	return OptNftItemTransferAction{
		Value: v,
		Set:   true,
	}
}

// OptNftItemTransferAction is optional NftItemTransferAction.
type OptNftItemTransferAction struct {
	Value NftItemTransferAction
	Set   bool
}

// IsSet returns true if OptNftItemTransferAction was set.
func (o OptNftItemTransferAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftItemTransferAction) Reset() {
	var v NftItemTransferAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftItemTransferAction) SetTo(v NftItemTransferAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftItemTransferAction) Get() (v NftItemTransferAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftItemTransferAction) Or(d NftItemTransferAction) NftItemTransferAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNftPurchaseAction returns new OptNftPurchaseAction with value set to v.
func NewOptNftPurchaseAction(v NftPurchaseAction) OptNftPurchaseAction {
	return OptNftPurchaseAction{
		Value: v,
		Set:   true,
	}
}

// OptNftPurchaseAction is optional NftPurchaseAction.
type OptNftPurchaseAction struct {
	Value NftPurchaseAction
	Set   bool
}

// IsSet returns true if OptNftPurchaseAction was set.
func (o OptNftPurchaseAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNftPurchaseAction) Reset() {
	var v NftPurchaseAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNftPurchaseAction) SetTo(v NftPurchaseAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNftPurchaseAction) Get() (v NftPurchaseAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNftPurchaseAction) Or(d NftPurchaseAction) NftPurchaseAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRefund returns new OptRefund with value set to v.
func NewOptRefund(v Refund) OptRefund {
	return OptRefund{
		Value: v,
		Set:   true,
	}
}

// OptRefund is optional Refund.
type OptRefund struct {
	Value Refund
	Set   bool
}

// IsSet returns true if OptRefund was set.
func (o OptRefund) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRefund) Reset() {
	var v Refund
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRefund) SetTo(v Refund) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRefund) Get() (v Refund, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRefund) Or(d Refund) Refund {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSale returns new OptSale with value set to v.
func NewOptSale(v Sale) OptSale {
	return OptSale{
		Value: v,
		Set:   true,
	}
}

// OptSale is optional Sale.
type OptSale struct {
	Value Sale
	Set   bool
}

// IsSet returns true if OptSale was set.
func (o OptSale) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSale) Reset() {
	var v Sale
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSale) SetTo(v Sale) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSale) Get() (v Sale, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSale) Or(d Sale) Sale {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSmartContractAction returns new OptSmartContractAction with value set to v.
func NewOptSmartContractAction(v SmartContractAction) OptSmartContractAction {
	return OptSmartContractAction{
		Value: v,
		Set:   true,
	}
}

// OptSmartContractAction is optional SmartContractAction.
type OptSmartContractAction struct {
	Value SmartContractAction
	Set   bool
}

// IsSet returns true if OptSmartContractAction was set.
func (o OptSmartContractAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSmartContractAction) Reset() {
	var v SmartContractAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSmartContractAction) SetTo(v SmartContractAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSmartContractAction) Get() (v SmartContractAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSmartContractAction) Or(d SmartContractAction) SmartContractAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStateInit returns new OptStateInit with value set to v.
func NewOptStateInit(v StateInit) OptStateInit {
	return OptStateInit{
		Value: v,
		Set:   true,
	}
}

// OptStateInit is optional StateInit.
type OptStateInit struct {
	Value StateInit
	Set   bool
}

// IsSet returns true if OptStateInit was set.
func (o OptStateInit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStateInit) Reset() {
	var v StateInit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStateInit) SetTo(v StateInit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStateInit) Get() (v StateInit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStateInit) Or(d StateInit) StateInit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStoragePhase returns new OptStoragePhase with value set to v.
func NewOptStoragePhase(v StoragePhase) OptStoragePhase {
	return OptStoragePhase{
		Value: v,
		Set:   true,
	}
}

// OptStoragePhase is optional StoragePhase.
type OptStoragePhase struct {
	Value StoragePhase
	Set   bool
}

// IsSet returns true if OptStoragePhase was set.
func (o OptStoragePhase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStoragePhase) Reset() {
	var v StoragePhase
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStoragePhase) SetTo(v StoragePhase) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStoragePhase) Get() (v StoragePhase, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStoragePhase) Or(d StoragePhase) StoragePhase {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionAction returns new OptSubscriptionAction with value set to v.
func NewOptSubscriptionAction(v SubscriptionAction) OptSubscriptionAction {
	return OptSubscriptionAction{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionAction is optional SubscriptionAction.
type OptSubscriptionAction struct {
	Value SubscriptionAction
	Set   bool
}

// IsSet returns true if OptSubscriptionAction was set.
func (o OptSubscriptionAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionAction) Reset() {
	var v SubscriptionAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionAction) SetTo(v SubscriptionAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionAction) Get() (v SubscriptionAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionAction) Or(d SubscriptionAction) SubscriptionAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTokenRates returns new OptTokenRates with value set to v.
func NewOptTokenRates(v TokenRates) OptTokenRates {
	return OptTokenRates{
		Value: v,
		Set:   true,
	}
}

// OptTokenRates is optional TokenRates.
type OptTokenRates struct {
	Value TokenRates
	Set   bool
}

// IsSet returns true if OptTokenRates was set.
func (o OptTokenRates) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTokenRates) Reset() {
	var v TokenRates
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTokenRates) SetTo(v TokenRates) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTokenRates) Get() (v TokenRates, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTokenRates) Or(d TokenRates) TokenRates {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTokenRatesDiff24h returns new OptTokenRatesDiff24h with value set to v.
func NewOptTokenRatesDiff24h(v TokenRatesDiff24h) OptTokenRatesDiff24h {
	return OptTokenRatesDiff24h{
		Value: v,
		Set:   true,
	}
}

// OptTokenRatesDiff24h is optional TokenRatesDiff24h.
type OptTokenRatesDiff24h struct {
	Value TokenRatesDiff24h
	Set   bool
}

// IsSet returns true if OptTokenRatesDiff24h was set.
func (o OptTokenRatesDiff24h) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTokenRatesDiff24h) Reset() {
	var v TokenRatesDiff24h
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTokenRatesDiff24h) SetTo(v TokenRatesDiff24h) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTokenRatesDiff24h) Get() (v TokenRatesDiff24h, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTokenRatesDiff24h) Or(d TokenRatesDiff24h) TokenRatesDiff24h {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTokenRatesDiff30d returns new OptTokenRatesDiff30d with value set to v.
func NewOptTokenRatesDiff30d(v TokenRatesDiff30d) OptTokenRatesDiff30d {
	return OptTokenRatesDiff30d{
		Value: v,
		Set:   true,
	}
}

// OptTokenRatesDiff30d is optional TokenRatesDiff30d.
type OptTokenRatesDiff30d struct {
	Value TokenRatesDiff30d
	Set   bool
}

// IsSet returns true if OptTokenRatesDiff30d was set.
func (o OptTokenRatesDiff30d) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTokenRatesDiff30d) Reset() {
	var v TokenRatesDiff30d
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTokenRatesDiff30d) SetTo(v TokenRatesDiff30d) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTokenRatesDiff30d) Get() (v TokenRatesDiff30d, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTokenRatesDiff30d) Or(d TokenRatesDiff30d) TokenRatesDiff30d {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTokenRatesDiff7d returns new OptTokenRatesDiff7d with value set to v.
func NewOptTokenRatesDiff7d(v TokenRatesDiff7d) OptTokenRatesDiff7d {
	return OptTokenRatesDiff7d{
		Value: v,
		Set:   true,
	}
}

// OptTokenRatesDiff7d is optional TokenRatesDiff7d.
type OptTokenRatesDiff7d struct {
	Value TokenRatesDiff7d
	Set   bool
}

// IsSet returns true if OptTokenRatesDiff7d was set.
func (o OptTokenRatesDiff7d) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTokenRatesDiff7d) Reset() {
	var v TokenRatesDiff7d
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTokenRatesDiff7d) SetTo(v TokenRatesDiff7d) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTokenRatesDiff7d) Get() (v TokenRatesDiff7d, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTokenRatesDiff7d) Or(d TokenRatesDiff7d) TokenRatesDiff7d {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTokenRatesPrices returns new OptTokenRatesPrices with value set to v.
func NewOptTokenRatesPrices(v TokenRatesPrices) OptTokenRatesPrices {
	return OptTokenRatesPrices{
		Value: v,
		Set:   true,
	}
}

// OptTokenRatesPrices is optional TokenRatesPrices.
type OptTokenRatesPrices struct {
	Value TokenRatesPrices
	Set   bool
}

// IsSet returns true if OptTokenRatesPrices was set.
func (o OptTokenRatesPrices) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTokenRatesPrices) Reset() {
	var v TokenRatesPrices
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTokenRatesPrices) SetTo(v TokenRatesPrices) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTokenRatesPrices) Get() (v TokenRatesPrices, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTokenRatesPrices) Or(d TokenRatesPrices) TokenRatesPrices {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTonTransferAction returns new OptTonTransferAction with value set to v.
func NewOptTonTransferAction(v TonTransferAction) OptTonTransferAction {
	return OptTonTransferAction{
		Value: v,
		Set:   true,
	}
}

// OptTonTransferAction is optional TonTransferAction.
type OptTonTransferAction struct {
	Value TonTransferAction
	Set   bool
}

// IsSet returns true if OptTonTransferAction was set.
func (o OptTonTransferAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTonTransferAction) Reset() {
	var v TonTransferAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTonTransferAction) SetTo(v TonTransferAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTonTransferAction) Get() (v TonTransferAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTonTransferAction) Or(d TonTransferAction) TonTransferAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnSubscriptionAction returns new OptUnSubscriptionAction with value set to v.
func NewOptUnSubscriptionAction(v UnSubscriptionAction) OptUnSubscriptionAction {
	return OptUnSubscriptionAction{
		Value: v,
		Set:   true,
	}
}

// OptUnSubscriptionAction is optional UnSubscriptionAction.
type OptUnSubscriptionAction struct {
	Value UnSubscriptionAction
	Set   bool
}

// IsSet returns true if OptUnSubscriptionAction was set.
func (o OptUnSubscriptionAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnSubscriptionAction) Reset() {
	var v UnSubscriptionAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnSubscriptionAction) SetTo(v UnSubscriptionAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnSubscriptionAction) Get() (v UnSubscriptionAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnSubscriptionAction) Or(d UnSubscriptionAction) UnSubscriptionAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidatorsSet returns new OptValidatorsSet with value set to v.
func NewOptValidatorsSet(v ValidatorsSet) OptValidatorsSet {
	return OptValidatorsSet{
		Value: v,
		Set:   true,
	}
}

// OptValidatorsSet is optional ValidatorsSet.
type OptValidatorsSet struct {
	Value ValidatorsSet
	Set   bool
}

// IsSet returns true if OptValidatorsSet was set.
func (o OptValidatorsSet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidatorsSet) Reset() {
	var v ValidatorsSet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidatorsSet) SetTo(v ValidatorsSet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidatorsSet) Get() (v ValidatorsSet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidatorsSet) Or(d ValidatorsSet) ValidatorsSet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWalletDNS returns new OptWalletDNS with value set to v.
func NewOptWalletDNS(v WalletDNS) OptWalletDNS {
	return OptWalletDNS{
		Value: v,
		Set:   true,
	}
}

// OptWalletDNS is optional WalletDNS.
type OptWalletDNS struct {
	Value WalletDNS
	Set   bool
}

// IsSet returns true if OptWalletDNS was set.
func (o OptWalletDNS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWalletDNS) Reset() {
	var v WalletDNS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWalletDNS) SetTo(v WalletDNS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWalletDNS) Get() (v WalletDNS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWalletDNS) Or(d WalletDNS) WalletDNS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWithdrawStakeAction returns new OptWithdrawStakeAction with value set to v.
func NewOptWithdrawStakeAction(v WithdrawStakeAction) OptWithdrawStakeAction {
	return OptWithdrawStakeAction{
		Value: v,
		Set:   true,
	}
}

// OptWithdrawStakeAction is optional WithdrawStakeAction.
type OptWithdrawStakeAction struct {
	Value WithdrawStakeAction
	Set   bool
}

// IsSet returns true if OptWithdrawStakeAction was set.
func (o OptWithdrawStakeAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWithdrawStakeAction) Reset() {
	var v WithdrawStakeAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWithdrawStakeAction) SetTo(v WithdrawStakeAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWithdrawStakeAction) Get() (v WithdrawStakeAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWithdrawStakeAction) Or(d WithdrawStakeAction) WithdrawStakeAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWithdrawStakeRequestAction returns new OptWithdrawStakeRequestAction with value set to v.
func NewOptWithdrawStakeRequestAction(v WithdrawStakeRequestAction) OptWithdrawStakeRequestAction {
	return OptWithdrawStakeRequestAction{
		Value: v,
		Set:   true,
	}
}

// OptWithdrawStakeRequestAction is optional WithdrawStakeRequestAction.
type OptWithdrawStakeRequestAction struct {
	Value WithdrawStakeRequestAction
	Set   bool
}

// IsSet returns true if OptWithdrawStakeRequestAction was set.
func (o OptWithdrawStakeRequestAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWithdrawStakeRequestAction) Reset() {
	var v WithdrawStakeRequestAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWithdrawStakeRequestAction) SetTo(v WithdrawStakeRequestAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWithdrawStakeRequestAction) Get() (v WithdrawStakeRequestAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWithdrawStakeRequestAction) Or(d WithdrawStakeRequestAction) WithdrawStakeRequestAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Oracle
type Oracle struct {
	Address    string `json:"address"`
	SecpPubkey string `json:"secp_pubkey"`
}

// GetAddress returns the value of Address.
func (s *Oracle) GetAddress() string {
	return s.Address
}

// GetSecpPubkey returns the value of SecpPubkey.
func (s *Oracle) GetSecpPubkey() string {
	return s.SecpPubkey
}

// SetAddress sets the value of Address.
func (s *Oracle) SetAddress(val string) {
	s.Address = val
}

// SetSecpPubkey sets the value of SecpPubkey.
func (s *Oracle) SetSecpPubkey(val string) {
	s.SecpPubkey = val
}

// Ref: #/components/schemas/OracleBridgeParams
type OracleBridgeParams struct {
	BridgeAddr            string   `json:"bridge_addr"`
	OracleMultisigAddress string   `json:"oracle_multisig_address"`
	ExternalChainAddress  string   `json:"external_chain_address"`
	Oracles               []Oracle `json:"oracles"`
}

// GetBridgeAddr returns the value of BridgeAddr.
func (s *OracleBridgeParams) GetBridgeAddr() string {
	return s.BridgeAddr
}

// GetOracleMultisigAddress returns the value of OracleMultisigAddress.
func (s *OracleBridgeParams) GetOracleMultisigAddress() string {
	return s.OracleMultisigAddress
}

// GetExternalChainAddress returns the value of ExternalChainAddress.
func (s *OracleBridgeParams) GetExternalChainAddress() string {
	return s.ExternalChainAddress
}

// GetOracles returns the value of Oracles.
func (s *OracleBridgeParams) GetOracles() []Oracle {
	return s.Oracles
}

// SetBridgeAddr sets the value of BridgeAddr.
func (s *OracleBridgeParams) SetBridgeAddr(val string) {
	s.BridgeAddr = val
}

// SetOracleMultisigAddress sets the value of OracleMultisigAddress.
func (s *OracleBridgeParams) SetOracleMultisigAddress(val string) {
	s.OracleMultisigAddress = val
}

// SetExternalChainAddress sets the value of ExternalChainAddress.
func (s *OracleBridgeParams) SetExternalChainAddress(val string) {
	s.ExternalChainAddress = val
}

// SetOracles sets the value of Oracles.
func (s *OracleBridgeParams) SetOracles(val []Oracle) {
	s.Oracles = val
}

// Ref: #/components/schemas/PoolImplementation
type PoolImplementation struct {
	Name        string   `json:"name"`
	Description string   `json:"description"`
	URL         string   `json:"url"`
	Socials     []string `json:"socials"`
}

// GetName returns the value of Name.
func (s *PoolImplementation) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PoolImplementation) GetDescription() string {
	return s.Description
}

// GetURL returns the value of URL.
func (s *PoolImplementation) GetURL() string {
	return s.URL
}

// GetSocials returns the value of Socials.
func (s *PoolImplementation) GetSocials() []string {
	return s.Socials
}

// SetName sets the value of Name.
func (s *PoolImplementation) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PoolImplementation) SetDescription(val string) {
	s.Description = val
}

// SetURL sets the value of URL.
func (s *PoolImplementation) SetURL(val string) {
	s.URL = val
}

// SetSocials sets the value of Socials.
func (s *PoolImplementation) SetSocials(val []string) {
	s.Socials = val
}

// Ref: #/components/schemas/PoolImplementationType
type PoolImplementationType string

const (
	PoolImplementationTypeWhales   PoolImplementationType = "whales"
	PoolImplementationTypeTf       PoolImplementationType = "tf"
	PoolImplementationTypeLiquidTF PoolImplementationType = "liquidTF"
)

// AllValues returns all PoolImplementationType values.
func (PoolImplementationType) AllValues() []PoolImplementationType {
	return []PoolImplementationType{
		PoolImplementationTypeWhales,
		PoolImplementationTypeTf,
		PoolImplementationTypeLiquidTF,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PoolImplementationType) MarshalText() ([]byte, error) {
	switch s {
	case PoolImplementationTypeWhales:
		return []byte(s), nil
	case PoolImplementationTypeTf:
		return []byte(s), nil
	case PoolImplementationTypeLiquidTF:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolImplementationType) UnmarshalText(data []byte) error {
	switch PoolImplementationType(data) {
	case PoolImplementationTypeWhales:
		*s = PoolImplementationTypeWhales
		return nil
	case PoolImplementationTypeTf:
		*s = PoolImplementationTypeTf
		return nil
	case PoolImplementationTypeLiquidTF:
		*s = PoolImplementationTypeLiquidTF
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PoolInfo
type PoolInfo struct {
	Address        string                 `json:"address"`
	Name           string                 `json:"name"`
	TotalAmount    int64                  `json:"total_amount"`
	Implementation PoolImplementationType `json:"implementation"`
	// APY in percent.
	Apy      float64 `json:"apy"`
	MinStake int64   `json:"min_stake"`
	// Current nomination cycle beginning timestamp.
	CycleStart int64 `json:"cycle_start"`
	// Current nomination cycle ending timestamp.
	CycleEnd int64 `json:"cycle_end"`
	// This pool has verified source code or managed by trusted company.
	Verified bool `json:"verified"`
	// Current number of nominators.
	CurrentNominators int `json:"current_nominators"`
	// Maximum number of nominators.
	MaxNominators int `json:"max_nominators"`
	// For liquid staking master account of jetton.
	LiquidJettonMaster OptString `json:"liquid_jetton_master"`
	// Total stake of all nominators.
	NominatorsStake int64 `json:"nominators_stake"`
	// Stake of validator.
	ValidatorStake int64    `json:"validator_stake"`
	CycleLength    OptInt64 `json:"cycle_length"`
}

// GetAddress returns the value of Address.
func (s *PoolInfo) GetAddress() string {
	return s.Address
}

// GetName returns the value of Name.
func (s *PoolInfo) GetName() string {
	return s.Name
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PoolInfo) GetTotalAmount() int64 {
	return s.TotalAmount
}

// GetImplementation returns the value of Implementation.
func (s *PoolInfo) GetImplementation() PoolImplementationType {
	return s.Implementation
}

// GetApy returns the value of Apy.
func (s *PoolInfo) GetApy() float64 {
	return s.Apy
}

// GetMinStake returns the value of MinStake.
func (s *PoolInfo) GetMinStake() int64 {
	return s.MinStake
}

// GetCycleStart returns the value of CycleStart.
func (s *PoolInfo) GetCycleStart() int64 {
	return s.CycleStart
}

// GetCycleEnd returns the value of CycleEnd.
func (s *PoolInfo) GetCycleEnd() int64 {
	return s.CycleEnd
}

// GetVerified returns the value of Verified.
func (s *PoolInfo) GetVerified() bool {
	return s.Verified
}

// GetCurrentNominators returns the value of CurrentNominators.
func (s *PoolInfo) GetCurrentNominators() int {
	return s.CurrentNominators
}

// GetMaxNominators returns the value of MaxNominators.
func (s *PoolInfo) GetMaxNominators() int {
	return s.MaxNominators
}

// GetLiquidJettonMaster returns the value of LiquidJettonMaster.
func (s *PoolInfo) GetLiquidJettonMaster() OptString {
	return s.LiquidJettonMaster
}

// GetNominatorsStake returns the value of NominatorsStake.
func (s *PoolInfo) GetNominatorsStake() int64 {
	return s.NominatorsStake
}

// GetValidatorStake returns the value of ValidatorStake.
func (s *PoolInfo) GetValidatorStake() int64 {
	return s.ValidatorStake
}

// GetCycleLength returns the value of CycleLength.
func (s *PoolInfo) GetCycleLength() OptInt64 {
	return s.CycleLength
}

// SetAddress sets the value of Address.
func (s *PoolInfo) SetAddress(val string) {
	s.Address = val
}

// SetName sets the value of Name.
func (s *PoolInfo) SetName(val string) {
	s.Name = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PoolInfo) SetTotalAmount(val int64) {
	s.TotalAmount = val
}

// SetImplementation sets the value of Implementation.
func (s *PoolInfo) SetImplementation(val PoolImplementationType) {
	s.Implementation = val
}

// SetApy sets the value of Apy.
func (s *PoolInfo) SetApy(val float64) {
	s.Apy = val
}

// SetMinStake sets the value of MinStake.
func (s *PoolInfo) SetMinStake(val int64) {
	s.MinStake = val
}

// SetCycleStart sets the value of CycleStart.
func (s *PoolInfo) SetCycleStart(val int64) {
	s.CycleStart = val
}

// SetCycleEnd sets the value of CycleEnd.
func (s *PoolInfo) SetCycleEnd(val int64) {
	s.CycleEnd = val
}

// SetVerified sets the value of Verified.
func (s *PoolInfo) SetVerified(val bool) {
	s.Verified = val
}

// SetCurrentNominators sets the value of CurrentNominators.
func (s *PoolInfo) SetCurrentNominators(val int) {
	s.CurrentNominators = val
}

// SetMaxNominators sets the value of MaxNominators.
func (s *PoolInfo) SetMaxNominators(val int) {
	s.MaxNominators = val
}

// SetLiquidJettonMaster sets the value of LiquidJettonMaster.
func (s *PoolInfo) SetLiquidJettonMaster(val OptString) {
	s.LiquidJettonMaster = val
}

// SetNominatorsStake sets the value of NominatorsStake.
func (s *PoolInfo) SetNominatorsStake(val int64) {
	s.NominatorsStake = val
}

// SetValidatorStake sets the value of ValidatorStake.
func (s *PoolInfo) SetValidatorStake(val int64) {
	s.ValidatorStake = val
}

// SetCycleLength sets the value of CycleLength.
func (s *PoolInfo) SetCycleLength(val OptInt64) {
	s.CycleLength = val
}

// Ref: #/components/schemas/Price
type Price struct {
	Value     string `json:"value"`
	TokenName string `json:"token_name"`
}

// GetValue returns the value of Value.
func (s *Price) GetValue() string {
	return s.Value
}

// GetTokenName returns the value of TokenName.
func (s *Price) GetTokenName() string {
	return s.TokenName
}

// SetValue sets the value of Value.
func (s *Price) SetValue(val string) {
	s.Value = val
}

// SetTokenName sets the value of TokenName.
func (s *Price) SetTokenName(val string) {
	s.TokenName = val
}

// Ref: #/components/schemas/RawBlockchainConfig
type RawBlockchainConfig struct {
	Config RawBlockchainConfigConfig `json:"config"`
}

// GetConfig returns the value of Config.
func (s *RawBlockchainConfig) GetConfig() RawBlockchainConfigConfig {
	return s.Config
}

// SetConfig sets the value of Config.
func (s *RawBlockchainConfig) SetConfig(val RawBlockchainConfigConfig) {
	s.Config = val
}

type RawBlockchainConfigConfig map[string]jx.Raw

func (s *RawBlockchainConfigConfig) init() RawBlockchainConfigConfig {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Refund
type Refund struct {
	Type   RefundType `json:"type"`
	Origin string     `json:"origin"`
}

// GetType returns the value of Type.
func (s *Refund) GetType() RefundType {
	return s.Type
}

// GetOrigin returns the value of Origin.
func (s *Refund) GetOrigin() string {
	return s.Origin
}

// SetType sets the value of Type.
func (s *Refund) SetType(val RefundType) {
	s.Type = val
}

// SetOrigin sets the value of Origin.
func (s *Refund) SetOrigin(val string) {
	s.Origin = val
}

type RefundType string

const (
	RefundTypeDNSTon  RefundType = "DNS.ton"
	RefundTypeDNSTg   RefundType = "DNS.tg"
	RefundTypeGetGems RefundType = "GetGems"
)

// AllValues returns all RefundType values.
func (RefundType) AllValues() []RefundType {
	return []RefundType{
		RefundTypeDNSTon,
		RefundTypeDNSTg,
		RefundTypeGetGems,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RefundType) MarshalText() ([]byte, error) {
	switch s {
	case RefundTypeDNSTon:
		return []byte(s), nil
	case RefundTypeDNSTg:
		return []byte(s), nil
	case RefundTypeGetGems:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RefundType) UnmarshalText(data []byte) error {
	switch RefundType(data) {
	case RefundTypeDNSTon:
		*s = RefundTypeDNSTon
		return nil
	case RefundTypeDNSTg:
		*s = RefundTypeDNSTg
		return nil
	case RefundTypeGetGems:
		*s = RefundTypeGetGems
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReindexAccountOK is response for ReindexAccount operation.
type ReindexAccountOK struct{}

// Risk specifies assets that could be lost if a message would be sent to a malicious smart contract.
// It makes sense to understand the risk BEFORE sending a message to the blockchain.
// Ref: #/components/schemas/Risk
type Risk struct {
	// Transfer all the remaining balance of the wallet.
	TransferAllRemainingBalance bool             `json:"transfer_all_remaining_balance"`
	Ton                         int64            `json:"ton"`
	Jettons                     []JettonQuantity `json:"jettons"`
	Nfts                        []NftItem        `json:"nfts"`
}

// GetTransferAllRemainingBalance returns the value of TransferAllRemainingBalance.
func (s *Risk) GetTransferAllRemainingBalance() bool {
	return s.TransferAllRemainingBalance
}

// GetTon returns the value of Ton.
func (s *Risk) GetTon() int64 {
	return s.Ton
}

// GetJettons returns the value of Jettons.
func (s *Risk) GetJettons() []JettonQuantity {
	return s.Jettons
}

// GetNfts returns the value of Nfts.
func (s *Risk) GetNfts() []NftItem {
	return s.Nfts
}

// SetTransferAllRemainingBalance sets the value of TransferAllRemainingBalance.
func (s *Risk) SetTransferAllRemainingBalance(val bool) {
	s.TransferAllRemainingBalance = val
}

// SetTon sets the value of Ton.
func (s *Risk) SetTon(val int64) {
	s.Ton = val
}

// SetJettons sets the value of Jettons.
func (s *Risk) SetJettons(val []JettonQuantity) {
	s.Jettons = val
}

// SetNfts sets the value of Nfts.
func (s *Risk) SetNfts(val []NftItem) {
	s.Nfts = val
}

// Ref: #/components/schemas/Sale
type Sale struct {
	Address string            `json:"address"`
	Market  AccountAddress    `json:"market"`
	Owner   OptAccountAddress `json:"owner"`
	Price   Price             `json:"price"`
}

// GetAddress returns the value of Address.
func (s *Sale) GetAddress() string {
	return s.Address
}

// GetMarket returns the value of Market.
func (s *Sale) GetMarket() AccountAddress {
	return s.Market
}

// GetOwner returns the value of Owner.
func (s *Sale) GetOwner() OptAccountAddress {
	return s.Owner
}

// GetPrice returns the value of Price.
func (s *Sale) GetPrice() Price {
	return s.Price
}

// SetAddress sets the value of Address.
func (s *Sale) SetAddress(val string) {
	s.Address = val
}

// SetMarket sets the value of Market.
func (s *Sale) SetMarket(val AccountAddress) {
	s.Market = val
}

// SetOwner sets the value of Owner.
func (s *Sale) SetOwner(val OptAccountAddress) {
	s.Owner = val
}

// SetPrice sets the value of Price.
func (s *Sale) SetPrice(val Price) {
	s.Price = val
}

// SendBlockchainMessageOK is response for SendBlockchainMessage operation.
type SendBlockchainMessageOK struct{}

type SendBlockchainMessageReq struct {
	Boc   OptString `json:"boc"`
	Batch []string  `json:"batch"`
}

// GetBoc returns the value of Boc.
func (s *SendBlockchainMessageReq) GetBoc() OptString {
	return s.Boc
}

// GetBatch returns the value of Batch.
func (s *SendBlockchainMessageReq) GetBatch() []string {
	return s.Batch
}

// SetBoc sets the value of Boc.
func (s *SendBlockchainMessageReq) SetBoc(val OptString) {
	s.Boc = val
}

// SetBatch sets the value of Batch.
func (s *SendBlockchainMessageReq) SetBatch(val []string) {
	s.Batch = val
}

type SendRawMessageOK struct {
	Code int32 `json:"code"`
}

// GetCode returns the value of Code.
func (s *SendRawMessageOK) GetCode() int32 {
	return s.Code
}

// SetCode sets the value of Code.
func (s *SendRawMessageOK) SetCode(val int32) {
	s.Code = val
}

type SendRawMessageReq struct {
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *SendRawMessageReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *SendRawMessageReq) SetBody(val string) {
	s.Body = val
}

// Ref: #/components/schemas/Seqno
type Seqno struct {
	Seqno int32 `json:"seqno"`
}

// GetSeqno returns the value of Seqno.
func (s *Seqno) GetSeqno() int32 {
	return s.Seqno
}

// SetSeqno sets the value of Seqno.
func (s *Seqno) SetSeqno(val int32) {
	s.Seqno = val
}

// Ref: #/components/schemas/ServiceStatus
type ServiceStatus struct {
	RestOnline      bool `json:"rest_online"`
	IndexingLatency int  `json:"indexing_latency"`
}

// GetRestOnline returns the value of RestOnline.
func (s *ServiceStatus) GetRestOnline() bool {
	return s.RestOnline
}

// GetIndexingLatency returns the value of IndexingLatency.
func (s *ServiceStatus) GetIndexingLatency() int {
	return s.IndexingLatency
}

// SetRestOnline sets the value of RestOnline.
func (s *ServiceStatus) SetRestOnline(val bool) {
	s.RestOnline = val
}

// SetIndexingLatency sets the value of IndexingLatency.
func (s *ServiceStatus) SetIndexingLatency(val int) {
	s.IndexingLatency = val
}

// SetWalletBackupOK is response for SetWalletBackup operation.
type SetWalletBackupOK struct{}

type SetWalletBackupReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SetWalletBackupReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// Ref: #/components/schemas/SizeLimitsConfig
type SizeLimitsConfig struct {
	MaxMsgBits       int64    `json:"max_msg_bits"`
	MaxMsgCells      int64    `json:"max_msg_cells"`
	MaxLibraryCells  int64    `json:"max_library_cells"`
	MaxVMDataDepth   int      `json:"max_vm_data_depth"`
	MaxExtMsgSize    int64    `json:"max_ext_msg_size"`
	MaxExtMsgDepth   int      `json:"max_ext_msg_depth"`
	MaxAccStateCells OptInt64 `json:"max_acc_state_cells"`
	MaxAccStateBits  OptInt64 `json:"max_acc_state_bits"`
}

// GetMaxMsgBits returns the value of MaxMsgBits.
func (s *SizeLimitsConfig) GetMaxMsgBits() int64 {
	return s.MaxMsgBits
}

// GetMaxMsgCells returns the value of MaxMsgCells.
func (s *SizeLimitsConfig) GetMaxMsgCells() int64 {
	return s.MaxMsgCells
}

// GetMaxLibraryCells returns the value of MaxLibraryCells.
func (s *SizeLimitsConfig) GetMaxLibraryCells() int64 {
	return s.MaxLibraryCells
}

// GetMaxVMDataDepth returns the value of MaxVMDataDepth.
func (s *SizeLimitsConfig) GetMaxVMDataDepth() int {
	return s.MaxVMDataDepth
}

// GetMaxExtMsgSize returns the value of MaxExtMsgSize.
func (s *SizeLimitsConfig) GetMaxExtMsgSize() int64 {
	return s.MaxExtMsgSize
}

// GetMaxExtMsgDepth returns the value of MaxExtMsgDepth.
func (s *SizeLimitsConfig) GetMaxExtMsgDepth() int {
	return s.MaxExtMsgDepth
}

// GetMaxAccStateCells returns the value of MaxAccStateCells.
func (s *SizeLimitsConfig) GetMaxAccStateCells() OptInt64 {
	return s.MaxAccStateCells
}

// GetMaxAccStateBits returns the value of MaxAccStateBits.
func (s *SizeLimitsConfig) GetMaxAccStateBits() OptInt64 {
	return s.MaxAccStateBits
}

// SetMaxMsgBits sets the value of MaxMsgBits.
func (s *SizeLimitsConfig) SetMaxMsgBits(val int64) {
	s.MaxMsgBits = val
}

// SetMaxMsgCells sets the value of MaxMsgCells.
func (s *SizeLimitsConfig) SetMaxMsgCells(val int64) {
	s.MaxMsgCells = val
}

// SetMaxLibraryCells sets the value of MaxLibraryCells.
func (s *SizeLimitsConfig) SetMaxLibraryCells(val int64) {
	s.MaxLibraryCells = val
}

// SetMaxVMDataDepth sets the value of MaxVMDataDepth.
func (s *SizeLimitsConfig) SetMaxVMDataDepth(val int) {
	s.MaxVMDataDepth = val
}

// SetMaxExtMsgSize sets the value of MaxExtMsgSize.
func (s *SizeLimitsConfig) SetMaxExtMsgSize(val int64) {
	s.MaxExtMsgSize = val
}

// SetMaxExtMsgDepth sets the value of MaxExtMsgDepth.
func (s *SizeLimitsConfig) SetMaxExtMsgDepth(val int) {
	s.MaxExtMsgDepth = val
}

// SetMaxAccStateCells sets the value of MaxAccStateCells.
func (s *SizeLimitsConfig) SetMaxAccStateCells(val OptInt64) {
	s.MaxAccStateCells = val
}

// SetMaxAccStateBits sets the value of MaxAccStateBits.
func (s *SizeLimitsConfig) SetMaxAccStateBits(val OptInt64) {
	s.MaxAccStateBits = val
}

// Ref: #/components/schemas/SmartContractAction
type SmartContractAction struct {
	Executor AccountAddress `json:"executor"`
	Contract AccountAddress `json:"contract"`
	// Amount in nanotons.
	TonAttached int64     `json:"ton_attached"`
	Operation   string    `json:"operation"`
	Payload     OptString `json:"payload"`
	Refund      OptRefund `json:"refund"`
}

// GetExecutor returns the value of Executor.
func (s *SmartContractAction) GetExecutor() AccountAddress {
	return s.Executor
}

// GetContract returns the value of Contract.
func (s *SmartContractAction) GetContract() AccountAddress {
	return s.Contract
}

// GetTonAttached returns the value of TonAttached.
func (s *SmartContractAction) GetTonAttached() int64 {
	return s.TonAttached
}

// GetOperation returns the value of Operation.
func (s *SmartContractAction) GetOperation() string {
	return s.Operation
}

// GetPayload returns the value of Payload.
func (s *SmartContractAction) GetPayload() OptString {
	return s.Payload
}

// GetRefund returns the value of Refund.
func (s *SmartContractAction) GetRefund() OptRefund {
	return s.Refund
}

// SetExecutor sets the value of Executor.
func (s *SmartContractAction) SetExecutor(val AccountAddress) {
	s.Executor = val
}

// SetContract sets the value of Contract.
func (s *SmartContractAction) SetContract(val AccountAddress) {
	s.Contract = val
}

// SetTonAttached sets the value of TonAttached.
func (s *SmartContractAction) SetTonAttached(val int64) {
	s.TonAttached = val
}

// SetOperation sets the value of Operation.
func (s *SmartContractAction) SetOperation(val string) {
	s.Operation = val
}

// SetPayload sets the value of Payload.
func (s *SmartContractAction) SetPayload(val OptString) {
	s.Payload = val
}

// SetRefund sets the value of Refund.
func (s *SmartContractAction) SetRefund(val OptRefund) {
	s.Refund = val
}

// Ref: #/components/schemas/StateInit
type StateInit struct {
	Boc string `json:"boc"`
}

// GetBoc returns the value of Boc.
func (s *StateInit) GetBoc() string {
	return s.Boc
}

// SetBoc sets the value of Boc.
func (s *StateInit) SetBoc(val string) {
	s.Boc = val
}

// Ref: #/components/schemas/StoragePhase
type StoragePhase struct {
	FeesCollected int64           `json:"fees_collected"`
	FeesDue       OptInt64        `json:"fees_due"`
	StatusChange  AccStatusChange `json:"status_change"`
}

// GetFeesCollected returns the value of FeesCollected.
func (s *StoragePhase) GetFeesCollected() int64 {
	return s.FeesCollected
}

// GetFeesDue returns the value of FeesDue.
func (s *StoragePhase) GetFeesDue() OptInt64 {
	return s.FeesDue
}

// GetStatusChange returns the value of StatusChange.
func (s *StoragePhase) GetStatusChange() AccStatusChange {
	return s.StatusChange
}

// SetFeesCollected sets the value of FeesCollected.
func (s *StoragePhase) SetFeesCollected(val int64) {
	s.FeesCollected = val
}

// SetFeesDue sets the value of FeesDue.
func (s *StoragePhase) SetFeesDue(val OptInt64) {
	s.FeesDue = val
}

// SetStatusChange sets the value of StatusChange.
func (s *StoragePhase) SetStatusChange(val AccStatusChange) {
	s.StatusChange = val
}

// Ref: #/components/schemas/StorageProvider
type StorageProvider struct {
	Address            string `json:"address"`
	AcceptNewContracts bool   `json:"accept_new_contracts"`
	RatePerMBDay       int64  `json:"rate_per_mb_day"`
	MaxSpan            int64  `json:"max_span"`
	MinimalFileSize    int64  `json:"minimal_file_size"`
	MaximalFileSize    int64  `json:"maximal_file_size"`
}

// GetAddress returns the value of Address.
func (s *StorageProvider) GetAddress() string {
	return s.Address
}

// GetAcceptNewContracts returns the value of AcceptNewContracts.
func (s *StorageProvider) GetAcceptNewContracts() bool {
	return s.AcceptNewContracts
}

// GetRatePerMBDay returns the value of RatePerMBDay.
func (s *StorageProvider) GetRatePerMBDay() int64 {
	return s.RatePerMBDay
}

// GetMaxSpan returns the value of MaxSpan.
func (s *StorageProvider) GetMaxSpan() int64 {
	return s.MaxSpan
}

// GetMinimalFileSize returns the value of MinimalFileSize.
func (s *StorageProvider) GetMinimalFileSize() int64 {
	return s.MinimalFileSize
}

// GetMaximalFileSize returns the value of MaximalFileSize.
func (s *StorageProvider) GetMaximalFileSize() int64 {
	return s.MaximalFileSize
}

// SetAddress sets the value of Address.
func (s *StorageProvider) SetAddress(val string) {
	s.Address = val
}

// SetAcceptNewContracts sets the value of AcceptNewContracts.
func (s *StorageProvider) SetAcceptNewContracts(val bool) {
	s.AcceptNewContracts = val
}

// SetRatePerMBDay sets the value of RatePerMBDay.
func (s *StorageProvider) SetRatePerMBDay(val int64) {
	s.RatePerMBDay = val
}

// SetMaxSpan sets the value of MaxSpan.
func (s *StorageProvider) SetMaxSpan(val int64) {
	s.MaxSpan = val
}

// SetMinimalFileSize sets the value of MinimalFileSize.
func (s *StorageProvider) SetMinimalFileSize(val int64) {
	s.MinimalFileSize = val
}

// SetMaximalFileSize sets the value of MaximalFileSize.
func (s *StorageProvider) SetMaximalFileSize(val int64) {
	s.MaximalFileSize = val
}

// Ref: #/components/schemas/Subscription
type Subscription struct {
	Address            string `json:"address"`
	WalletAddress      string `json:"wallet_address"`
	BeneficiaryAddress string `json:"beneficiary_address"`
	Amount             int64  `json:"amount"`
	Period             int64  `json:"period"`
	StartTime          int64  `json:"start_time"`
	Timeout            int64  `json:"timeout"`
	LastPaymentTime    int64  `json:"last_payment_time"`
	LastRequestTime    int64  `json:"last_request_time"`
	SubscriptionID     int64  `json:"subscription_id"`
	FailedAttempts     int32  `json:"failed_attempts"`
}

// GetAddress returns the value of Address.
func (s *Subscription) GetAddress() string {
	return s.Address
}

// GetWalletAddress returns the value of WalletAddress.
func (s *Subscription) GetWalletAddress() string {
	return s.WalletAddress
}

// GetBeneficiaryAddress returns the value of BeneficiaryAddress.
func (s *Subscription) GetBeneficiaryAddress() string {
	return s.BeneficiaryAddress
}

// GetAmount returns the value of Amount.
func (s *Subscription) GetAmount() int64 {
	return s.Amount
}

// GetPeriod returns the value of Period.
func (s *Subscription) GetPeriod() int64 {
	return s.Period
}

// GetStartTime returns the value of StartTime.
func (s *Subscription) GetStartTime() int64 {
	return s.StartTime
}

// GetTimeout returns the value of Timeout.
func (s *Subscription) GetTimeout() int64 {
	return s.Timeout
}

// GetLastPaymentTime returns the value of LastPaymentTime.
func (s *Subscription) GetLastPaymentTime() int64 {
	return s.LastPaymentTime
}

// GetLastRequestTime returns the value of LastRequestTime.
func (s *Subscription) GetLastRequestTime() int64 {
	return s.LastRequestTime
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *Subscription) GetSubscriptionID() int64 {
	return s.SubscriptionID
}

// GetFailedAttempts returns the value of FailedAttempts.
func (s *Subscription) GetFailedAttempts() int32 {
	return s.FailedAttempts
}

// SetAddress sets the value of Address.
func (s *Subscription) SetAddress(val string) {
	s.Address = val
}

// SetWalletAddress sets the value of WalletAddress.
func (s *Subscription) SetWalletAddress(val string) {
	s.WalletAddress = val
}

// SetBeneficiaryAddress sets the value of BeneficiaryAddress.
func (s *Subscription) SetBeneficiaryAddress(val string) {
	s.BeneficiaryAddress = val
}

// SetAmount sets the value of Amount.
func (s *Subscription) SetAmount(val int64) {
	s.Amount = val
}

// SetPeriod sets the value of Period.
func (s *Subscription) SetPeriod(val int64) {
	s.Period = val
}

// SetStartTime sets the value of StartTime.
func (s *Subscription) SetStartTime(val int64) {
	s.StartTime = val
}

// SetTimeout sets the value of Timeout.
func (s *Subscription) SetTimeout(val int64) {
	s.Timeout = val
}

// SetLastPaymentTime sets the value of LastPaymentTime.
func (s *Subscription) SetLastPaymentTime(val int64) {
	s.LastPaymentTime = val
}

// SetLastRequestTime sets the value of LastRequestTime.
func (s *Subscription) SetLastRequestTime(val int64) {
	s.LastRequestTime = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *Subscription) SetSubscriptionID(val int64) {
	s.SubscriptionID = val
}

// SetFailedAttempts sets the value of FailedAttempts.
func (s *Subscription) SetFailedAttempts(val int32) {
	s.FailedAttempts = val
}

// Ref: #/components/schemas/SubscriptionAction
type SubscriptionAction struct {
	Subscriber   AccountAddress `json:"subscriber"`
	Subscription string         `json:"subscription"`
	Beneficiary  AccountAddress `json:"beneficiary"`
	Amount       int64          `json:"amount"`
	Initial      bool           `json:"initial"`
}

// GetSubscriber returns the value of Subscriber.
func (s *SubscriptionAction) GetSubscriber() AccountAddress {
	return s.Subscriber
}

// GetSubscription returns the value of Subscription.
func (s *SubscriptionAction) GetSubscription() string {
	return s.Subscription
}

// GetBeneficiary returns the value of Beneficiary.
func (s *SubscriptionAction) GetBeneficiary() AccountAddress {
	return s.Beneficiary
}

// GetAmount returns the value of Amount.
func (s *SubscriptionAction) GetAmount() int64 {
	return s.Amount
}

// GetInitial returns the value of Initial.
func (s *SubscriptionAction) GetInitial() bool {
	return s.Initial
}

// SetSubscriber sets the value of Subscriber.
func (s *SubscriptionAction) SetSubscriber(val AccountAddress) {
	s.Subscriber = val
}

// SetSubscription sets the value of Subscription.
func (s *SubscriptionAction) SetSubscription(val string) {
	s.Subscription = val
}

// SetBeneficiary sets the value of Beneficiary.
func (s *SubscriptionAction) SetBeneficiary(val AccountAddress) {
	s.Beneficiary = val
}

// SetAmount sets the value of Amount.
func (s *SubscriptionAction) SetAmount(val int64) {
	s.Amount = val
}

// SetInitial sets the value of Initial.
func (s *SubscriptionAction) SetInitial(val bool) {
	s.Initial = val
}

// Ref: #/components/schemas/Subscriptions
type Subscriptions struct {
	Subscriptions []Subscription `json:"subscriptions"`
}

// GetSubscriptions returns the value of Subscriptions.
func (s *Subscriptions) GetSubscriptions() []Subscription {
	return s.Subscriptions
}

// SetSubscriptions sets the value of Subscriptions.
func (s *Subscriptions) SetSubscriptions(val []Subscription) {
	s.Subscriptions = val
}

// Ref: #/components/schemas/TokenRates
type TokenRates struct {
	Prices  OptTokenRatesPrices  `json:"prices"`
	Diff24h OptTokenRatesDiff24h `json:"diff_24h"`
	Diff7d  OptTokenRatesDiff7d  `json:"diff_7d"`
	Diff30d OptTokenRatesDiff30d `json:"diff_30d"`
}

// GetPrices returns the value of Prices.
func (s *TokenRates) GetPrices() OptTokenRatesPrices {
	return s.Prices
}

// GetDiff24h returns the value of Diff24h.
func (s *TokenRates) GetDiff24h() OptTokenRatesDiff24h {
	return s.Diff24h
}

// GetDiff7d returns the value of Diff7d.
func (s *TokenRates) GetDiff7d() OptTokenRatesDiff7d {
	return s.Diff7d
}

// GetDiff30d returns the value of Diff30d.
func (s *TokenRates) GetDiff30d() OptTokenRatesDiff30d {
	return s.Diff30d
}

// SetPrices sets the value of Prices.
func (s *TokenRates) SetPrices(val OptTokenRatesPrices) {
	s.Prices = val
}

// SetDiff24h sets the value of Diff24h.
func (s *TokenRates) SetDiff24h(val OptTokenRatesDiff24h) {
	s.Diff24h = val
}

// SetDiff7d sets the value of Diff7d.
func (s *TokenRates) SetDiff7d(val OptTokenRatesDiff7d) {
	s.Diff7d = val
}

// SetDiff30d sets the value of Diff30d.
func (s *TokenRates) SetDiff30d(val OptTokenRatesDiff30d) {
	s.Diff30d = val
}

type TokenRatesDiff24h map[string]string

func (s *TokenRatesDiff24h) init() TokenRatesDiff24h {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type TokenRatesDiff30d map[string]string

func (s *TokenRatesDiff30d) init() TokenRatesDiff30d {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type TokenRatesDiff7d map[string]string

func (s *TokenRatesDiff7d) init() TokenRatesDiff7d {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type TokenRatesPrices map[string]float64

func (s *TokenRatesPrices) init() TokenRatesPrices {
	m := *s
	if m == nil {
		m = map[string]float64{}
		*s = m
	}
	return m
}

type TonConnectProofOK struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *TonConnectProofOK) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *TonConnectProofOK) SetToken(val string) {
	s.Token = val
}

type TonConnectProofReq struct {
	Address string                  `json:"address"`
	Proof   TonConnectProofReqProof `json:"proof"`
}

// GetAddress returns the value of Address.
func (s *TonConnectProofReq) GetAddress() string {
	return s.Address
}

// GetProof returns the value of Proof.
func (s *TonConnectProofReq) GetProof() TonConnectProofReqProof {
	return s.Proof
}

// SetAddress sets the value of Address.
func (s *TonConnectProofReq) SetAddress(val string) {
	s.Address = val
}

// SetProof sets the value of Proof.
func (s *TonConnectProofReq) SetProof(val TonConnectProofReqProof) {
	s.Proof = val
}

type TonConnectProofReqProof struct {
	Timestamp int64                         `json:"timestamp"`
	Domain    TonConnectProofReqProofDomain `json:"domain"`
	Signature string                        `json:"signature"`
	Payload   string                        `json:"payload"`
	StateInit OptString                     `json:"state_init"`
}

// GetTimestamp returns the value of Timestamp.
func (s *TonConnectProofReqProof) GetTimestamp() int64 {
	return s.Timestamp
}

// GetDomain returns the value of Domain.
func (s *TonConnectProofReqProof) GetDomain() TonConnectProofReqProofDomain {
	return s.Domain
}

// GetSignature returns the value of Signature.
func (s *TonConnectProofReqProof) GetSignature() string {
	return s.Signature
}

// GetPayload returns the value of Payload.
func (s *TonConnectProofReqProof) GetPayload() string {
	return s.Payload
}

// GetStateInit returns the value of StateInit.
func (s *TonConnectProofReqProof) GetStateInit() OptString {
	return s.StateInit
}

// SetTimestamp sets the value of Timestamp.
func (s *TonConnectProofReqProof) SetTimestamp(val int64) {
	s.Timestamp = val
}

// SetDomain sets the value of Domain.
func (s *TonConnectProofReqProof) SetDomain(val TonConnectProofReqProofDomain) {
	s.Domain = val
}

// SetSignature sets the value of Signature.
func (s *TonConnectProofReqProof) SetSignature(val string) {
	s.Signature = val
}

// SetPayload sets the value of Payload.
func (s *TonConnectProofReqProof) SetPayload(val string) {
	s.Payload = val
}

// SetStateInit sets the value of StateInit.
func (s *TonConnectProofReqProof) SetStateInit(val OptString) {
	s.StateInit = val
}

type TonConnectProofReqProofDomain struct {
	LengthBytes OptInt32 `json:"length_bytes"`
	Value       string   `json:"value"`
}

// GetLengthBytes returns the value of LengthBytes.
func (s *TonConnectProofReqProofDomain) GetLengthBytes() OptInt32 {
	return s.LengthBytes
}

// GetValue returns the value of Value.
func (s *TonConnectProofReqProofDomain) GetValue() string {
	return s.Value
}

// SetLengthBytes sets the value of LengthBytes.
func (s *TonConnectProofReqProofDomain) SetLengthBytes(val OptInt32) {
	s.LengthBytes = val
}

// SetValue sets the value of Value.
func (s *TonConnectProofReqProofDomain) SetValue(val string) {
	s.Value = val
}

// Ref: #/components/schemas/TonTransferAction
type TonTransferAction struct {
	Sender    AccountAddress `json:"sender"`
	Recipient AccountAddress `json:"recipient"`
	// Amount in nanotons.
	Amount           int64               `json:"amount"`
	Comment          OptString           `json:"comment"`
	EncryptedComment OptEncryptedComment `json:"encrypted_comment"`
	Refund           OptRefund           `json:"refund"`
}

// GetSender returns the value of Sender.
func (s *TonTransferAction) GetSender() AccountAddress {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s *TonTransferAction) GetRecipient() AccountAddress {
	return s.Recipient
}

// GetAmount returns the value of Amount.
func (s *TonTransferAction) GetAmount() int64 {
	return s.Amount
}

// GetComment returns the value of Comment.
func (s *TonTransferAction) GetComment() OptString {
	return s.Comment
}

// GetEncryptedComment returns the value of EncryptedComment.
func (s *TonTransferAction) GetEncryptedComment() OptEncryptedComment {
	return s.EncryptedComment
}

// GetRefund returns the value of Refund.
func (s *TonTransferAction) GetRefund() OptRefund {
	return s.Refund
}

// SetSender sets the value of Sender.
func (s *TonTransferAction) SetSender(val AccountAddress) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *TonTransferAction) SetRecipient(val AccountAddress) {
	s.Recipient = val
}

// SetAmount sets the value of Amount.
func (s *TonTransferAction) SetAmount(val int64) {
	s.Amount = val
}

// SetComment sets the value of Comment.
func (s *TonTransferAction) SetComment(val OptString) {
	s.Comment = val
}

// SetEncryptedComment sets the value of EncryptedComment.
func (s *TonTransferAction) SetEncryptedComment(val OptEncryptedComment) {
	s.EncryptedComment = val
}

// SetRefund sets the value of Refund.
func (s *TonTransferAction) SetRefund(val OptRefund) {
	s.Refund = val
}

// Ref: #/components/schemas/Trace
type Trace struct {
	Transaction Transaction `json:"transaction"`
	Interfaces  []string    `json:"interfaces"`
	Children    []Trace     `json:"children"`
	Emulated    OptBool     `json:"emulated"`
}

// GetTransaction returns the value of Transaction.
func (s *Trace) GetTransaction() Transaction {
	return s.Transaction
}

// GetInterfaces returns the value of Interfaces.
func (s *Trace) GetInterfaces() []string {
	return s.Interfaces
}

// GetChildren returns the value of Children.
func (s *Trace) GetChildren() []Trace {
	return s.Children
}

// GetEmulated returns the value of Emulated.
func (s *Trace) GetEmulated() OptBool {
	return s.Emulated
}

// SetTransaction sets the value of Transaction.
func (s *Trace) SetTransaction(val Transaction) {
	s.Transaction = val
}

// SetInterfaces sets the value of Interfaces.
func (s *Trace) SetInterfaces(val []string) {
	s.Interfaces = val
}

// SetChildren sets the value of Children.
func (s *Trace) SetChildren(val []Trace) {
	s.Children = val
}

// SetEmulated sets the value of Emulated.
func (s *Trace) SetEmulated(val OptBool) {
	s.Emulated = val
}

// Ref: #/components/schemas/TraceID
type TraceID struct {
	ID    string `json:"id"`
	Utime int64  `json:"utime"`
}

// GetID returns the value of ID.
func (s *TraceID) GetID() string {
	return s.ID
}

// GetUtime returns the value of Utime.
func (s *TraceID) GetUtime() int64 {
	return s.Utime
}

// SetID sets the value of ID.
func (s *TraceID) SetID(val string) {
	s.ID = val
}

// SetUtime sets the value of Utime.
func (s *TraceID) SetUtime(val int64) {
	s.Utime = val
}

// Ref: #/components/schemas/TraceIDs
type TraceIDs struct {
	Traces []TraceID `json:"traces"`
}

// GetTraces returns the value of Traces.
func (s *TraceIDs) GetTraces() []TraceID {
	return s.Traces
}

// SetTraces sets the value of Traces.
func (s *TraceIDs) SetTraces(val []TraceID) {
	s.Traces = val
}

// Ref: #/components/schemas/Transaction
type Transaction struct {
	Hash            string             `json:"hash"`
	Lt              int64              `json:"lt"`
	Account         AccountAddress     `json:"account"`
	Success         bool               `json:"success"`
	Utime           int64              `json:"utime"`
	OrigStatus      AccountStatus      `json:"orig_status"`
	EndStatus       AccountStatus      `json:"end_status"`
	TotalFees       int64              `json:"total_fees"`
	EndBalance      int64              `json:"end_balance"`
	TransactionType TransactionType    `json:"transaction_type"`
	StateUpdateOld  string             `json:"state_update_old"`
	StateUpdateNew  string             `json:"state_update_new"`
	InMsg           OptMessage         `json:"in_msg"`
	OutMsgs         []Message          `json:"out_msgs"`
	Block           string             `json:"block"`
	PrevTransHash   OptString          `json:"prev_trans_hash"`
	PrevTransLt     OptInt64           `json:"prev_trans_lt"`
	ComputePhase    OptComputePhase    `json:"compute_phase"`
	StoragePhase    OptStoragePhase    `json:"storage_phase"`
	CreditPhase     OptCreditPhase     `json:"credit_phase"`
	ActionPhase     OptActionPhase     `json:"action_phase"`
	BouncePhase     OptBouncePhaseType `json:"bounce_phase"`
	Aborted         bool               `json:"aborted"`
	Destroyed       bool               `json:"destroyed"`
}

// GetHash returns the value of Hash.
func (s *Transaction) GetHash() string {
	return s.Hash
}

// GetLt returns the value of Lt.
func (s *Transaction) GetLt() int64 {
	return s.Lt
}

// GetAccount returns the value of Account.
func (s *Transaction) GetAccount() AccountAddress {
	return s.Account
}

// GetSuccess returns the value of Success.
func (s *Transaction) GetSuccess() bool {
	return s.Success
}

// GetUtime returns the value of Utime.
func (s *Transaction) GetUtime() int64 {
	return s.Utime
}

// GetOrigStatus returns the value of OrigStatus.
func (s *Transaction) GetOrigStatus() AccountStatus {
	return s.OrigStatus
}

// GetEndStatus returns the value of EndStatus.
func (s *Transaction) GetEndStatus() AccountStatus {
	return s.EndStatus
}

// GetTotalFees returns the value of TotalFees.
func (s *Transaction) GetTotalFees() int64 {
	return s.TotalFees
}

// GetEndBalance returns the value of EndBalance.
func (s *Transaction) GetEndBalance() int64 {
	return s.EndBalance
}

// GetTransactionType returns the value of TransactionType.
func (s *Transaction) GetTransactionType() TransactionType {
	return s.TransactionType
}

// GetStateUpdateOld returns the value of StateUpdateOld.
func (s *Transaction) GetStateUpdateOld() string {
	return s.StateUpdateOld
}

// GetStateUpdateNew returns the value of StateUpdateNew.
func (s *Transaction) GetStateUpdateNew() string {
	return s.StateUpdateNew
}

// GetInMsg returns the value of InMsg.
func (s *Transaction) GetInMsg() OptMessage {
	return s.InMsg
}

// GetOutMsgs returns the value of OutMsgs.
func (s *Transaction) GetOutMsgs() []Message {
	return s.OutMsgs
}

// GetBlock returns the value of Block.
func (s *Transaction) GetBlock() string {
	return s.Block
}

// GetPrevTransHash returns the value of PrevTransHash.
func (s *Transaction) GetPrevTransHash() OptString {
	return s.PrevTransHash
}

// GetPrevTransLt returns the value of PrevTransLt.
func (s *Transaction) GetPrevTransLt() OptInt64 {
	return s.PrevTransLt
}

// GetComputePhase returns the value of ComputePhase.
func (s *Transaction) GetComputePhase() OptComputePhase {
	return s.ComputePhase
}

// GetStoragePhase returns the value of StoragePhase.
func (s *Transaction) GetStoragePhase() OptStoragePhase {
	return s.StoragePhase
}

// GetCreditPhase returns the value of CreditPhase.
func (s *Transaction) GetCreditPhase() OptCreditPhase {
	return s.CreditPhase
}

// GetActionPhase returns the value of ActionPhase.
func (s *Transaction) GetActionPhase() OptActionPhase {
	return s.ActionPhase
}

// GetBouncePhase returns the value of BouncePhase.
func (s *Transaction) GetBouncePhase() OptBouncePhaseType {
	return s.BouncePhase
}

// GetAborted returns the value of Aborted.
func (s *Transaction) GetAborted() bool {
	return s.Aborted
}

// GetDestroyed returns the value of Destroyed.
func (s *Transaction) GetDestroyed() bool {
	return s.Destroyed
}

// SetHash sets the value of Hash.
func (s *Transaction) SetHash(val string) {
	s.Hash = val
}

// SetLt sets the value of Lt.
func (s *Transaction) SetLt(val int64) {
	s.Lt = val
}

// SetAccount sets the value of Account.
func (s *Transaction) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetSuccess sets the value of Success.
func (s *Transaction) SetSuccess(val bool) {
	s.Success = val
}

// SetUtime sets the value of Utime.
func (s *Transaction) SetUtime(val int64) {
	s.Utime = val
}

// SetOrigStatus sets the value of OrigStatus.
func (s *Transaction) SetOrigStatus(val AccountStatus) {
	s.OrigStatus = val
}

// SetEndStatus sets the value of EndStatus.
func (s *Transaction) SetEndStatus(val AccountStatus) {
	s.EndStatus = val
}

// SetTotalFees sets the value of TotalFees.
func (s *Transaction) SetTotalFees(val int64) {
	s.TotalFees = val
}

// SetEndBalance sets the value of EndBalance.
func (s *Transaction) SetEndBalance(val int64) {
	s.EndBalance = val
}

// SetTransactionType sets the value of TransactionType.
func (s *Transaction) SetTransactionType(val TransactionType) {
	s.TransactionType = val
}

// SetStateUpdateOld sets the value of StateUpdateOld.
func (s *Transaction) SetStateUpdateOld(val string) {
	s.StateUpdateOld = val
}

// SetStateUpdateNew sets the value of StateUpdateNew.
func (s *Transaction) SetStateUpdateNew(val string) {
	s.StateUpdateNew = val
}

// SetInMsg sets the value of InMsg.
func (s *Transaction) SetInMsg(val OptMessage) {
	s.InMsg = val
}

// SetOutMsgs sets the value of OutMsgs.
func (s *Transaction) SetOutMsgs(val []Message) {
	s.OutMsgs = val
}

// SetBlock sets the value of Block.
func (s *Transaction) SetBlock(val string) {
	s.Block = val
}

// SetPrevTransHash sets the value of PrevTransHash.
func (s *Transaction) SetPrevTransHash(val OptString) {
	s.PrevTransHash = val
}

// SetPrevTransLt sets the value of PrevTransLt.
func (s *Transaction) SetPrevTransLt(val OptInt64) {
	s.PrevTransLt = val
}

// SetComputePhase sets the value of ComputePhase.
func (s *Transaction) SetComputePhase(val OptComputePhase) {
	s.ComputePhase = val
}

// SetStoragePhase sets the value of StoragePhase.
func (s *Transaction) SetStoragePhase(val OptStoragePhase) {
	s.StoragePhase = val
}

// SetCreditPhase sets the value of CreditPhase.
func (s *Transaction) SetCreditPhase(val OptCreditPhase) {
	s.CreditPhase = val
}

// SetActionPhase sets the value of ActionPhase.
func (s *Transaction) SetActionPhase(val OptActionPhase) {
	s.ActionPhase = val
}

// SetBouncePhase sets the value of BouncePhase.
func (s *Transaction) SetBouncePhase(val OptBouncePhaseType) {
	s.BouncePhase = val
}

// SetAborted sets the value of Aborted.
func (s *Transaction) SetAborted(val bool) {
	s.Aborted = val
}

// SetDestroyed sets the value of Destroyed.
func (s *Transaction) SetDestroyed(val bool) {
	s.Destroyed = val
}

// Ref: #/components/schemas/TransactionType
type TransactionType string

const (
	TransactionTypeTransOrd          TransactionType = "TransOrd"
	TransactionTypeTransTickTock     TransactionType = "TransTickTock"
	TransactionTypeTransSplitPrepare TransactionType = "TransSplitPrepare"
	TransactionTypeTransSplitInstall TransactionType = "TransSplitInstall"
	TransactionTypeTransMergePrepare TransactionType = "TransMergePrepare"
	TransactionTypeTransMergeInstall TransactionType = "TransMergeInstall"
	TransactionTypeTransStorage      TransactionType = "TransStorage"
)

// AllValues returns all TransactionType values.
func (TransactionType) AllValues() []TransactionType {
	return []TransactionType{
		TransactionTypeTransOrd,
		TransactionTypeTransTickTock,
		TransactionTypeTransSplitPrepare,
		TransactionTypeTransSplitInstall,
		TransactionTypeTransMergePrepare,
		TransactionTypeTransMergeInstall,
		TransactionTypeTransStorage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransactionType) MarshalText() ([]byte, error) {
	switch s {
	case TransactionTypeTransOrd:
		return []byte(s), nil
	case TransactionTypeTransTickTock:
		return []byte(s), nil
	case TransactionTypeTransSplitPrepare:
		return []byte(s), nil
	case TransactionTypeTransSplitInstall:
		return []byte(s), nil
	case TransactionTypeTransMergePrepare:
		return []byte(s), nil
	case TransactionTypeTransMergeInstall:
		return []byte(s), nil
	case TransactionTypeTransStorage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransactionType) UnmarshalText(data []byte) error {
	switch TransactionType(data) {
	case TransactionTypeTransOrd:
		*s = TransactionTypeTransOrd
		return nil
	case TransactionTypeTransTickTock:
		*s = TransactionTypeTransTickTock
		return nil
	case TransactionTypeTransSplitPrepare:
		*s = TransactionTypeTransSplitPrepare
		return nil
	case TransactionTypeTransSplitInstall:
		*s = TransactionTypeTransSplitInstall
		return nil
	case TransactionTypeTransMergePrepare:
		*s = TransactionTypeTransMergePrepare
		return nil
	case TransactionTypeTransMergeInstall:
		*s = TransactionTypeTransMergeInstall
		return nil
	case TransactionTypeTransStorage:
		*s = TransactionTypeTransStorage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Transactions
type Transactions struct {
	Transactions []Transaction `json:"transactions"`
}

// GetTransactions returns the value of Transactions.
func (s *Transactions) GetTransactions() []Transaction {
	return s.Transactions
}

// SetTransactions sets the value of Transactions.
func (s *Transactions) SetTransactions(val []Transaction) {
	s.Transactions = val
}

// Ref: #/components/schemas/TvmStackRecord
type TvmStackRecord struct {
	Type  TvmStackRecordType `json:"type"`
	Cell  OptString          `json:"cell"`
	Slice OptString          `json:"slice"`
	Num   OptString          `json:"num"`
	Tuple []TvmStackRecord   `json:"tuple"`
}

// GetType returns the value of Type.
func (s *TvmStackRecord) GetType() TvmStackRecordType {
	return s.Type
}

// GetCell returns the value of Cell.
func (s *TvmStackRecord) GetCell() OptString {
	return s.Cell
}

// GetSlice returns the value of Slice.
func (s *TvmStackRecord) GetSlice() OptString {
	return s.Slice
}

// GetNum returns the value of Num.
func (s *TvmStackRecord) GetNum() OptString {
	return s.Num
}

// GetTuple returns the value of Tuple.
func (s *TvmStackRecord) GetTuple() []TvmStackRecord {
	return s.Tuple
}

// SetType sets the value of Type.
func (s *TvmStackRecord) SetType(val TvmStackRecordType) {
	s.Type = val
}

// SetCell sets the value of Cell.
func (s *TvmStackRecord) SetCell(val OptString) {
	s.Cell = val
}

// SetSlice sets the value of Slice.
func (s *TvmStackRecord) SetSlice(val OptString) {
	s.Slice = val
}

// SetNum sets the value of Num.
func (s *TvmStackRecord) SetNum(val OptString) {
	s.Num = val
}

// SetTuple sets the value of Tuple.
func (s *TvmStackRecord) SetTuple(val []TvmStackRecord) {
	s.Tuple = val
}

type TvmStackRecordType string

const (
	TvmStackRecordTypeCell  TvmStackRecordType = "cell"
	TvmStackRecordTypeNum   TvmStackRecordType = "num"
	TvmStackRecordTypeNan   TvmStackRecordType = "nan"
	TvmStackRecordTypeNull  TvmStackRecordType = "null"
	TvmStackRecordTypeTuple TvmStackRecordType = "tuple"
)

// AllValues returns all TvmStackRecordType values.
func (TvmStackRecordType) AllValues() []TvmStackRecordType {
	return []TvmStackRecordType{
		TvmStackRecordTypeCell,
		TvmStackRecordTypeNum,
		TvmStackRecordTypeNan,
		TvmStackRecordTypeNull,
		TvmStackRecordTypeTuple,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TvmStackRecordType) MarshalText() ([]byte, error) {
	switch s {
	case TvmStackRecordTypeCell:
		return []byte(s), nil
	case TvmStackRecordTypeNum:
		return []byte(s), nil
	case TvmStackRecordTypeNan:
		return []byte(s), nil
	case TvmStackRecordTypeNull:
		return []byte(s), nil
	case TvmStackRecordTypeTuple:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TvmStackRecordType) UnmarshalText(data []byte) error {
	switch TvmStackRecordType(data) {
	case TvmStackRecordTypeCell:
		*s = TvmStackRecordTypeCell
		return nil
	case TvmStackRecordTypeNum:
		*s = TvmStackRecordTypeNum
		return nil
	case TvmStackRecordTypeNan:
		*s = TvmStackRecordTypeNan
		return nil
	case TvmStackRecordTypeNull:
		*s = TvmStackRecordTypeNull
		return nil
	case TvmStackRecordTypeTuple:
		*s = TvmStackRecordTypeTuple
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UnSubscriptionAction
type UnSubscriptionAction struct {
	Subscriber   AccountAddress `json:"subscriber"`
	Subscription string         `json:"subscription"`
	Beneficiary  AccountAddress `json:"beneficiary"`
}

// GetSubscriber returns the value of Subscriber.
func (s *UnSubscriptionAction) GetSubscriber() AccountAddress {
	return s.Subscriber
}

// GetSubscription returns the value of Subscription.
func (s *UnSubscriptionAction) GetSubscription() string {
	return s.Subscription
}

// GetBeneficiary returns the value of Beneficiary.
func (s *UnSubscriptionAction) GetBeneficiary() AccountAddress {
	return s.Beneficiary
}

// SetSubscriber sets the value of Subscriber.
func (s *UnSubscriptionAction) SetSubscriber(val AccountAddress) {
	s.Subscriber = val
}

// SetSubscription sets the value of Subscription.
func (s *UnSubscriptionAction) SetSubscription(val string) {
	s.Subscription = val
}

// SetBeneficiary sets the value of Beneficiary.
func (s *UnSubscriptionAction) SetBeneficiary(val AccountAddress) {
	s.Beneficiary = val
}

// Ref: #/components/schemas/Validator
type Validator struct {
	Address     string `json:"address"`
	AdnlAddress string `json:"adnl_address"`
	Stake       int64  `json:"stake"`
	MaxFactor   int64  `json:"max_factor"`
}

// GetAddress returns the value of Address.
func (s *Validator) GetAddress() string {
	return s.Address
}

// GetAdnlAddress returns the value of AdnlAddress.
func (s *Validator) GetAdnlAddress() string {
	return s.AdnlAddress
}

// GetStake returns the value of Stake.
func (s *Validator) GetStake() int64 {
	return s.Stake
}

// GetMaxFactor returns the value of MaxFactor.
func (s *Validator) GetMaxFactor() int64 {
	return s.MaxFactor
}

// SetAddress sets the value of Address.
func (s *Validator) SetAddress(val string) {
	s.Address = val
}

// SetAdnlAddress sets the value of AdnlAddress.
func (s *Validator) SetAdnlAddress(val string) {
	s.AdnlAddress = val
}

// SetStake sets the value of Stake.
func (s *Validator) SetStake(val int64) {
	s.Stake = val
}

// SetMaxFactor sets the value of MaxFactor.
func (s *Validator) SetMaxFactor(val int64) {
	s.MaxFactor = val
}

// Ref: #/components/schemas/Validators
type Validators struct {
	ElectAt    int64       `json:"elect_at"`
	ElectClose int64       `json:"elect_close"`
	MinStake   int64       `json:"min_stake"`
	TotalStake int64       `json:"total_stake"`
	Validators []Validator `json:"validators"`
}

// GetElectAt returns the value of ElectAt.
func (s *Validators) GetElectAt() int64 {
	return s.ElectAt
}

// GetElectClose returns the value of ElectClose.
func (s *Validators) GetElectClose() int64 {
	return s.ElectClose
}

// GetMinStake returns the value of MinStake.
func (s *Validators) GetMinStake() int64 {
	return s.MinStake
}

// GetTotalStake returns the value of TotalStake.
func (s *Validators) GetTotalStake() int64 {
	return s.TotalStake
}

// GetValidators returns the value of Validators.
func (s *Validators) GetValidators() []Validator {
	return s.Validators
}

// SetElectAt sets the value of ElectAt.
func (s *Validators) SetElectAt(val int64) {
	s.ElectAt = val
}

// SetElectClose sets the value of ElectClose.
func (s *Validators) SetElectClose(val int64) {
	s.ElectClose = val
}

// SetMinStake sets the value of MinStake.
func (s *Validators) SetMinStake(val int64) {
	s.MinStake = val
}

// SetTotalStake sets the value of TotalStake.
func (s *Validators) SetTotalStake(val int64) {
	s.TotalStake = val
}

// SetValidators sets the value of Validators.
func (s *Validators) SetValidators(val []Validator) {
	s.Validators = val
}

// Ref: #/components/schemas/ValidatorsSet
type ValidatorsSet struct {
	UtimeSince  int                     `json:"utime_since"`
	UtimeUntil  int                     `json:"utime_until"`
	Total       int                     `json:"total"`
	Main        int                     `json:"main"`
	TotalWeight OptString               `json:"total_weight"`
	List        []ValidatorsSetListItem `json:"list"`
}

// GetUtimeSince returns the value of UtimeSince.
func (s *ValidatorsSet) GetUtimeSince() int {
	return s.UtimeSince
}

// GetUtimeUntil returns the value of UtimeUntil.
func (s *ValidatorsSet) GetUtimeUntil() int {
	return s.UtimeUntil
}

// GetTotal returns the value of Total.
func (s *ValidatorsSet) GetTotal() int {
	return s.Total
}

// GetMain returns the value of Main.
func (s *ValidatorsSet) GetMain() int {
	return s.Main
}

// GetTotalWeight returns the value of TotalWeight.
func (s *ValidatorsSet) GetTotalWeight() OptString {
	return s.TotalWeight
}

// GetList returns the value of List.
func (s *ValidatorsSet) GetList() []ValidatorsSetListItem {
	return s.List
}

// SetUtimeSince sets the value of UtimeSince.
func (s *ValidatorsSet) SetUtimeSince(val int) {
	s.UtimeSince = val
}

// SetUtimeUntil sets the value of UtimeUntil.
func (s *ValidatorsSet) SetUtimeUntil(val int) {
	s.UtimeUntil = val
}

// SetTotal sets the value of Total.
func (s *ValidatorsSet) SetTotal(val int) {
	s.Total = val
}

// SetMain sets the value of Main.
func (s *ValidatorsSet) SetMain(val int) {
	s.Main = val
}

// SetTotalWeight sets the value of TotalWeight.
func (s *ValidatorsSet) SetTotalWeight(val OptString) {
	s.TotalWeight = val
}

// SetList sets the value of List.
func (s *ValidatorsSet) SetList(val []ValidatorsSetListItem) {
	s.List = val
}

type ValidatorsSetListItem struct {
	PublicKey string    `json:"public_key"`
	Weight    int64     `json:"weight"`
	AdnlAddr  OptString `json:"adnl_addr"`
}

// GetPublicKey returns the value of PublicKey.
func (s *ValidatorsSetListItem) GetPublicKey() string {
	return s.PublicKey
}

// GetWeight returns the value of Weight.
func (s *ValidatorsSetListItem) GetWeight() int64 {
	return s.Weight
}

// GetAdnlAddr returns the value of AdnlAddr.
func (s *ValidatorsSetListItem) GetAdnlAddr() OptString {
	return s.AdnlAddr
}

// SetPublicKey sets the value of PublicKey.
func (s *ValidatorsSetListItem) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetWeight sets the value of Weight.
func (s *ValidatorsSetListItem) SetWeight(val int64) {
	s.Weight = val
}

// SetAdnlAddr sets the value of AdnlAddr.
func (s *ValidatorsSetListItem) SetAdnlAddr(val OptString) {
	s.AdnlAddr = val
}

// Ref: #/components/schemas/ValueFlow
type ValueFlow struct {
	Account AccountAddress         `json:"account"`
	Ton     int64                  `json:"ton"`
	Fees    int64                  `json:"fees"`
	Jettons []ValueFlowJettonsItem `json:"jettons"`
}

// GetAccount returns the value of Account.
func (s *ValueFlow) GetAccount() AccountAddress {
	return s.Account
}

// GetTon returns the value of Ton.
func (s *ValueFlow) GetTon() int64 {
	return s.Ton
}

// GetFees returns the value of Fees.
func (s *ValueFlow) GetFees() int64 {
	return s.Fees
}

// GetJettons returns the value of Jettons.
func (s *ValueFlow) GetJettons() []ValueFlowJettonsItem {
	return s.Jettons
}

// SetAccount sets the value of Account.
func (s *ValueFlow) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetTon sets the value of Ton.
func (s *ValueFlow) SetTon(val int64) {
	s.Ton = val
}

// SetFees sets the value of Fees.
func (s *ValueFlow) SetFees(val int64) {
	s.Fees = val
}

// SetJettons sets the value of Jettons.
func (s *ValueFlow) SetJettons(val []ValueFlowJettonsItem) {
	s.Jettons = val
}

type ValueFlowJettonsItem struct {
	Account  AccountAddress `json:"account"`
	Jetton   JettonPreview  `json:"jetton"`
	Quantity int64          `json:"quantity"`
}

// GetAccount returns the value of Account.
func (s *ValueFlowJettonsItem) GetAccount() AccountAddress {
	return s.Account
}

// GetJetton returns the value of Jetton.
func (s *ValueFlowJettonsItem) GetJetton() JettonPreview {
	return s.Jetton
}

// GetQuantity returns the value of Quantity.
func (s *ValueFlowJettonsItem) GetQuantity() int64 {
	return s.Quantity
}

// SetAccount sets the value of Account.
func (s *ValueFlowJettonsItem) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetJetton sets the value of Jetton.
func (s *ValueFlowJettonsItem) SetJetton(val JettonPreview) {
	s.Jetton = val
}

// SetQuantity sets the value of Quantity.
func (s *ValueFlowJettonsItem) SetQuantity(val int64) {
	s.Quantity = val
}

// Ref: #/components/schemas/WalletDNS
type WalletDNS struct {
	Address         string         `json:"address"`
	Account         AccountAddress `json:"account"`
	IsWallet        bool           `json:"is_wallet"`
	HasMethodPubkey bool           `json:"has_method_pubkey"`
	HasMethodSeqno  bool           `json:"has_method_seqno"`
	Names           []string       `json:"names"`
}

// GetAddress returns the value of Address.
func (s *WalletDNS) GetAddress() string {
	return s.Address
}

// GetAccount returns the value of Account.
func (s *WalletDNS) GetAccount() AccountAddress {
	return s.Account
}

// GetIsWallet returns the value of IsWallet.
func (s *WalletDNS) GetIsWallet() bool {
	return s.IsWallet
}

// GetHasMethodPubkey returns the value of HasMethodPubkey.
func (s *WalletDNS) GetHasMethodPubkey() bool {
	return s.HasMethodPubkey
}

// GetHasMethodSeqno returns the value of HasMethodSeqno.
func (s *WalletDNS) GetHasMethodSeqno() bool {
	return s.HasMethodSeqno
}

// GetNames returns the value of Names.
func (s *WalletDNS) GetNames() []string {
	return s.Names
}

// SetAddress sets the value of Address.
func (s *WalletDNS) SetAddress(val string) {
	s.Address = val
}

// SetAccount sets the value of Account.
func (s *WalletDNS) SetAccount(val AccountAddress) {
	s.Account = val
}

// SetIsWallet sets the value of IsWallet.
func (s *WalletDNS) SetIsWallet(val bool) {
	s.IsWallet = val
}

// SetHasMethodPubkey sets the value of HasMethodPubkey.
func (s *WalletDNS) SetHasMethodPubkey(val bool) {
	s.HasMethodPubkey = val
}

// SetHasMethodSeqno sets the value of HasMethodSeqno.
func (s *WalletDNS) SetHasMethodSeqno(val bool) {
	s.HasMethodSeqno = val
}

// SetNames sets the value of Names.
func (s *WalletDNS) SetNames(val []string) {
	s.Names = val
}

// Validator's participation in elections.
// Ref: #/components/schemas/WithdrawStakeAction
type WithdrawStakeAction struct {
	Amount         int64                  `json:"amount"`
	Staker         AccountAddress         `json:"staker"`
	Pool           AccountAddress         `json:"pool"`
	Implementation PoolImplementationType `json:"implementation"`
}

// GetAmount returns the value of Amount.
func (s *WithdrawStakeAction) GetAmount() int64 {
	return s.Amount
}

// GetStaker returns the value of Staker.
func (s *WithdrawStakeAction) GetStaker() AccountAddress {
	return s.Staker
}

// GetPool returns the value of Pool.
func (s *WithdrawStakeAction) GetPool() AccountAddress {
	return s.Pool
}

// GetImplementation returns the value of Implementation.
func (s *WithdrawStakeAction) GetImplementation() PoolImplementationType {
	return s.Implementation
}

// SetAmount sets the value of Amount.
func (s *WithdrawStakeAction) SetAmount(val int64) {
	s.Amount = val
}

// SetStaker sets the value of Staker.
func (s *WithdrawStakeAction) SetStaker(val AccountAddress) {
	s.Staker = val
}

// SetPool sets the value of Pool.
func (s *WithdrawStakeAction) SetPool(val AccountAddress) {
	s.Pool = val
}

// SetImplementation sets the value of Implementation.
func (s *WithdrawStakeAction) SetImplementation(val PoolImplementationType) {
	s.Implementation = val
}

// Validator's participation in elections.
// Ref: #/components/schemas/WithdrawStakeRequestAction
type WithdrawStakeRequestAction struct {
	Amount         OptInt64               `json:"amount"`
	Staker         AccountAddress         `json:"staker"`
	Pool           AccountAddress         `json:"pool"`
	Implementation PoolImplementationType `json:"implementation"`
}

// GetAmount returns the value of Amount.
func (s *WithdrawStakeRequestAction) GetAmount() OptInt64 {
	return s.Amount
}

// GetStaker returns the value of Staker.
func (s *WithdrawStakeRequestAction) GetStaker() AccountAddress {
	return s.Staker
}

// GetPool returns the value of Pool.
func (s *WithdrawStakeRequestAction) GetPool() AccountAddress {
	return s.Pool
}

// GetImplementation returns the value of Implementation.
func (s *WithdrawStakeRequestAction) GetImplementation() PoolImplementationType {
	return s.Implementation
}

// SetAmount sets the value of Amount.
func (s *WithdrawStakeRequestAction) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetStaker sets the value of Staker.
func (s *WithdrawStakeRequestAction) SetStaker(val AccountAddress) {
	s.Staker = val
}

// SetPool sets the value of Pool.
func (s *WithdrawStakeRequestAction) SetPool(val AccountAddress) {
	s.Pool = val
}

// SetImplementation sets the value of Implementation.
func (s *WithdrawStakeRequestAction) SetImplementation(val PoolImplementationType) {
	s.Implementation = val
}

// Ref: #/components/schemas/WorkchainDescr
type WorkchainDescr struct {
	Workchain         int    `json:"workchain"`
	EnabledSince      int64  `json:"enabled_since"`
	ActualMinSplit    int    `json:"actual_min_split"`
	MinSplit          int    `json:"min_split"`
	MaxSplit          int    `json:"max_split"`
	Basic             int    `json:"basic"`
	Active            bool   `json:"active"`
	AcceptMsgs        bool   `json:"accept_msgs"`
	Flags             int    `json:"flags"`
	ZerostateRootHash string `json:"zerostate_root_hash"`
	ZerostateFileHash string `json:"zerostate_file_hash"`
	Version           int64  `json:"version"`
}

// GetWorkchain returns the value of Workchain.
func (s *WorkchainDescr) GetWorkchain() int {
	return s.Workchain
}

// GetEnabledSince returns the value of EnabledSince.
func (s *WorkchainDescr) GetEnabledSince() int64 {
	return s.EnabledSince
}

// GetActualMinSplit returns the value of ActualMinSplit.
func (s *WorkchainDescr) GetActualMinSplit() int {
	return s.ActualMinSplit
}

// GetMinSplit returns the value of MinSplit.
func (s *WorkchainDescr) GetMinSplit() int {
	return s.MinSplit
}

// GetMaxSplit returns the value of MaxSplit.
func (s *WorkchainDescr) GetMaxSplit() int {
	return s.MaxSplit
}

// GetBasic returns the value of Basic.
func (s *WorkchainDescr) GetBasic() int {
	return s.Basic
}

// GetActive returns the value of Active.
func (s *WorkchainDescr) GetActive() bool {
	return s.Active
}

// GetAcceptMsgs returns the value of AcceptMsgs.
func (s *WorkchainDescr) GetAcceptMsgs() bool {
	return s.AcceptMsgs
}

// GetFlags returns the value of Flags.
func (s *WorkchainDescr) GetFlags() int {
	return s.Flags
}

// GetZerostateRootHash returns the value of ZerostateRootHash.
func (s *WorkchainDescr) GetZerostateRootHash() string {
	return s.ZerostateRootHash
}

// GetZerostateFileHash returns the value of ZerostateFileHash.
func (s *WorkchainDescr) GetZerostateFileHash() string {
	return s.ZerostateFileHash
}

// GetVersion returns the value of Version.
func (s *WorkchainDescr) GetVersion() int64 {
	return s.Version
}

// SetWorkchain sets the value of Workchain.
func (s *WorkchainDescr) SetWorkchain(val int) {
	s.Workchain = val
}

// SetEnabledSince sets the value of EnabledSince.
func (s *WorkchainDescr) SetEnabledSince(val int64) {
	s.EnabledSince = val
}

// SetActualMinSplit sets the value of ActualMinSplit.
func (s *WorkchainDescr) SetActualMinSplit(val int) {
	s.ActualMinSplit = val
}

// SetMinSplit sets the value of MinSplit.
func (s *WorkchainDescr) SetMinSplit(val int) {
	s.MinSplit = val
}

// SetMaxSplit sets the value of MaxSplit.
func (s *WorkchainDescr) SetMaxSplit(val int) {
	s.MaxSplit = val
}

// SetBasic sets the value of Basic.
func (s *WorkchainDescr) SetBasic(val int) {
	s.Basic = val
}

// SetActive sets the value of Active.
func (s *WorkchainDescr) SetActive(val bool) {
	s.Active = val
}

// SetAcceptMsgs sets the value of AcceptMsgs.
func (s *WorkchainDescr) SetAcceptMsgs(val bool) {
	s.AcceptMsgs = val
}

// SetFlags sets the value of Flags.
func (s *WorkchainDescr) SetFlags(val int) {
	s.Flags = val
}

// SetZerostateRootHash sets the value of ZerostateRootHash.
func (s *WorkchainDescr) SetZerostateRootHash(val string) {
	s.ZerostateRootHash = val
}

// SetZerostateFileHash sets the value of ZerostateFileHash.
func (s *WorkchainDescr) SetZerostateFileHash(val string) {
	s.ZerostateFileHash = val
}

// SetVersion sets the value of Version.
func (s *WorkchainDescr) SetVersion(val int64) {
	s.Version = val
}
