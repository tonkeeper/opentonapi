//go:build ignore

package main

import (
	"encoding/json"
	"fmt"
	"go/format"
	"net/http"
	"os"
	"strings"
)

const Header = `package references
// Code generated by go generate; DO NOT EDIT

import (
	"github.com/tonkeeper/tongo"
)

%v

`

const WhitelistDeclaration = `
var %vWhitelistVaults = map[tongo.AccountID]struct{}{
	%v
}
`

const MapItem = "tongo.MustParseAddress(\"%v\").ID: {},\n"

const StonfiRouterListUrl = "https://api.ston.fi/v1/routers"

func main() {
	stonfiRouters, err := http.Get(StonfiRouterListUrl)
	if err != nil {
		panic(err)
	}
	defer stonfiRouters.Body.Close()

	file, err := os.Create("whitelist.go")
	if err != nil {
		panic(err)
	}
	routers := getStonfiRouters()
	code := []byte(fmt.Sprintf(Header, routers))
	formatedCode, err := format.Source(code)
	if err != nil {
		formatedCode = code
		//panic(err)
	}
	_, err = file.Write(formatedCode)
	if err != nil {
		panic(err)
	}
	err = file.Close()
	if err != nil {
		panic(err)
	}
}

func getStonfiRouters() string {
	routers, err := http.Get(StonfiRouterListUrl)
	if err != nil {
		panic(err)
	}
	defer routers.Body.Close()

	type StonfiRoutersResponse struct {
		RouterList []struct {
			Address string `json:"address"`
		} `json:"router_list"`
	}
	var r StonfiRoutersResponse

	if err := json.NewDecoder(routers.Body).Decode(&r); err != nil {
		panic(err)
	}

	var mapValues strings.Builder
	for _, router := range r.RouterList {
		mapValues.WriteString(fmt.Sprintf(MapItem, router.Address))
	}

	return fmt.Sprintf(WhitelistDeclaration, "Stonfi", mapValues.String())
}
